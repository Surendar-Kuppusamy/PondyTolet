{"ast":null,"code":"var _jsxFileName = \"D:\\\\Apache\\\\Apache24\\\\htdocs\\\\Server\\\\React\\\\DemoProject\\\\frontend\\\\src\\\\components\\\\pages\\\\login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch, connect } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport { login } from '../../../actions/userActions';\nimport { LOGIN_FORM, LOGIN_FORM_RESULT } from '../../../constants/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login(props) {\n  _s();\n\n  let location = useLocation();\n  let history = useHistory();\n  const userState = useSelector(state => state.userState);\n  const {\n    login_form_result\n  } = userState;\n  const dispatch = useDispatch();\n  const initialValues = {\n    email: '',\n    password: ''\n  };\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().required('Email is required').email('Email is invalid'),\n    password: Yup.string().required('Password is required').min(6, 'Password must have 8 characters').max(50, 'Password must be less than 50 characters')\n  });\n\n  const onSubmit = values => {\n    dispatch({\n      type: LOGIN_FORM,\n      payload: values\n    });\n    props.login();\n  };\n\n  useEffect(() => {\n    if (login_form_result != undefined && Object.keys(login_form_result).length > 0) {\n      console.log('Result ===>' + login_form_result);\n\n      if (login_form_result.status == 'error') {\n        dispatch({\n          type: LOGIN_FORM_RESULT,\n          payload: {}\n        });\n        toast.error(login_form_result.message, {\n          theme: \"colored\"\n        });\n      } else {\n        dispatch({\n          type: LOGIN_FORM_RESULT,\n          payload: {}\n        });\n        toast.success(login_form_result.message, {\n          theme: \"colored\"\n        });\n        localStorage.setItem(\"token\", login_form_result.token);\n        history.push(\"/home\");\n      }\n    }\n  }, [login_form_result]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"login\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: onSubmit,\n        children: ({\n          errors,\n          values,\n          touched,\n          setValues,\n          setFieldValue,\n          handleChange,\n          handleBlur\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n            children: JSON.stringify(values)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                className: \"form-label\",\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: 'form-control' + (errors.email && touched.email ? ' is-invalid' : ''),\n                id: \"email\",\n                name: \"email\",\n                placeholder: \"Enter your email\",\n                onChange: handleChange,\n                onBlur: handleBlur,\n                value: values.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"email\",\n                component: \"span\",\n                className: \"text-danger\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"password\",\n                className: \"form-label\",\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                className: 'form-control' + (errors.password && touched.password ? ' is-invalid' : ''),\n                id: \"password\",\n                name: \"password\",\n                placeholder: \"Enter your password\",\n                onChange: handleChange,\n                onBlur: handleBlur,\n                value: values.password\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"password\",\n                component: \"span\",\n                className: \"text-danger\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 text-right\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary\",\n                type: \"submit\",\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Login, \"Wc6oEXUmudmmT7HqsB2KfoG2KWg=\", false, function () {\n  return [useLocation, useHistory, useSelector, useDispatch];\n});\n\n_c = Login;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: () => {\n      dispatch(login());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/Apache/Apache24/htdocs/Server/React/DemoProject/frontend/src/components/pages/login/Login.js"],"names":["React","useEffect","useSelector","useDispatch","connect","useLocation","useHistory","Formik","Form","Field","FieldArray","ErrorMessage","Yup","toast","login","LOGIN_FORM","LOGIN_FORM_RESULT","Login","props","location","history","userState","state","login_form_result","dispatch","initialValues","email","password","validationSchema","object","shape","string","required","min","max","onSubmit","values","type","payload","undefined","Object","keys","length","console","log","status","error","message","theme","success","localStorage","setItem","token","push","errors","touched","setValues","setFieldValue","handleChange","handleBlur","JSON","stringify","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch, connect } from 'react-redux';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { toast } from 'react-toastify';\r\nimport { login } from '../../../actions/userActions';\r\nimport { LOGIN_FORM, LOGIN_FORM_RESULT } from '../../../constants/constants';\r\n\r\nfunction Login(props) {\r\n    let location = useLocation();\r\n    let history = useHistory();\r\n    const userState = useSelector((state) => state.userState);\r\n    const { login_form_result } = userState;\r\n    const dispatch = useDispatch();\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: ''\r\n    };\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        email: Yup.string()\r\n                .required('Email is required')\r\n                .email('Email is invalid'),\r\n        password: Yup.string()\r\n                .required('Password is required')\r\n                .min(6, 'Password must have 8 characters')\r\n                .max(50, 'Password must be less than 50 characters')\r\n    });\r\n    \r\n    const onSubmit = (values) => {\r\n        dispatch({type: LOGIN_FORM, payload: values });\r\n        props.login();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(login_form_result != undefined && Object.keys(login_form_result).length > 0) {\r\n            console.log('Result ===>'+login_form_result);\r\n            if(login_form_result.status == 'error') {\r\n                dispatch({type: LOGIN_FORM_RESULT, payload: {}});\r\n                toast.error(login_form_result.message, {theme: \"colored\"});\r\n            } else {\r\n                dispatch({type: LOGIN_FORM_RESULT, payload: {}});\r\n                toast.success(login_form_result.message, {theme: \"colored\"});\r\n                localStorage.setItem(\"token\", login_form_result.token);\r\n                history.push(\"/home\");\r\n            }\r\n        }\r\n    },[login_form_result])\r\n    \r\n    return (\r\n        <section id=\"login\">\r\n            <h3>Login Page</h3>\r\n            <div className=\"container\">\r\n                <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n                    {({ errors, values, touched, setValues, setFieldValue, handleChange, handleBlur }) => (\r\n                        <Form>\r\n                            <pre>{JSON.stringify(values)}</pre>\r\n                            <div className=\"container\">\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n                                    <input type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} id=\"email\" name=\"email\" placeholder=\"Enter your email\" onChange={handleChange} onBlur={handleBlur} value={values.email} />\r\n                                    <ErrorMessage name=\"email\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <input type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} id=\"password\" name=\"password\" placeholder=\"Enter your password\" onChange={handleChange} onBlur={handleBlur} value={values.password} />\r\n                                    <ErrorMessage name=\"password\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mt-3 text-right\">\r\n                                    <button className=\"btn btn-primary\" type=\"submit\">Login</button>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: () => {\r\n            dispatch(login())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);"]},"metadata":{},"sourceType":"module"}