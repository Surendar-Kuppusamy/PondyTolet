{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { assetReducer, assetReducer1 } from '../reducers/assetReducer';\nconst reducer = combineReducers({\n  asset: assetReducer,\n  asset1: assetReducer1\n});\nconst allOptions = localStorage.getItem('allopt') ? JSON.parse(localStorage.getItem('allopt')) : {};\nconst initialState = {\n  asset: {\n    //key should be from above any one of the reducer\n    options: allOptions\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["D:/Apache/Apache24/htdocs/Server/React/DemoProject/demo/src/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","assetReducer","assetReducer1","reducer","asset","asset1","allOptions","localStorage","getItem","JSON","parse","initialState","options","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACIC,YADJ,EAEIC,aAFJ,QAGO,0BAHP;AAKA,MAAMC,OAAO,GAAGN,eAAe,CAAC;AAC5BO,EAAAA,KAAK,EAAEH,YADqB;AAE5BI,EAAAA,MAAM,EAAEH;AAFoB,CAAD,CAA/B;AAKA,MAAMI,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,IACfC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,CADe,GAEf,EAFJ;AAIA,MAAMG,YAAY,GAAG;AACjBP,EAAAA,KAAK,EAAE;AAAK;AACRQ,IAAAA,OAAO,EAAEN;AADN;AADU,CAArB;AAME,MAAMO,UAAU,GAAG,CAACd,KAAD,CAAnB;AAEA,MAAMe,KAAK,GAAGlB,WAAW,CACvBO,OADuB,EAEvBQ,YAFuB,EAGvBX,mBAAmB,CAACF,eAAe,CAAC,GAAGe,UAAJ,CAAhB,CAHI,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport {\r\n    assetReducer,\r\n    assetReducer1,\r\n} from '../reducers/assetReducer'\r\n\r\nconst reducer = combineReducers({\r\n    asset: assetReducer,\r\n    asset1: assetReducer1\r\n})\r\n\r\nconst allOptions = localStorage.getItem('allopt')\r\n  ? JSON.parse(localStorage.getItem('allopt'))\r\n  : {}\r\n\r\nconst initialState = {\r\n    asset: {    //key should be from above any one of the reducer\r\n        options: allOptions\r\n    }\r\n}\r\n  \r\n  const middleware = [thunk]\r\n  \r\n  const store = createStore(\r\n    reducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n  )\r\n  \r\n  export default store;"]},"metadata":{},"sourceType":"module"}