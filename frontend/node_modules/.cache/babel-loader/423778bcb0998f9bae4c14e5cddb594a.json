{"ast":null,"code":"var _jsxFileName = \"D:\\\\Apache\\\\Apache24\\\\htdocs\\\\Server\\\\React\\\\DemoProject\\\\demo\\\\src\\\\components\\\\pages\\\\common\\\\FileUploadComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FileUploadComponent(props) {\n  _s();\n\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n        console.log(binaryStr);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.path, \" - \", file.size, \" bytes\"]\n        }, file.path, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }, this);\n      };\n\n      reader.readAsText(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    acceptedFiles\n  } = useDropzone({\n    noDrag: true,\n    onDrop\n  });\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n        className: 'dropzone'\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: files\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FileUploadComponent, \"x2/4X7K5eieuKtM8kukhKui2J8Q=\", false, function () {\n  return [useDropzone];\n});\n\n_c = FileUploadComponent;\nexport default FileUploadComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUploadComponent\");","map":{"version":3,"sources":["D:/Apache/Apache24/htdocs/Server/React/DemoProject/demo/src/components/pages/common/FileUploadComponent.js"],"names":["React","useCallback","useDropzone","FileUploadComponent","props","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","path","size","readAsText","getRootProps","getInputProps","noDrag","className","files"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAAQC,WAAR,QAA0B,gBAA1B;;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAClC,QAAMC,MAAM,GAAGJ,WAAW,CAAEK,aAAD,IAAmB;AAC5CA,IAAAA,aAAa,CAACC,OAAd,CAAuBC,IAAD,IAAU;AAC9B,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,MAAAA,MAAM,CAACE,OAAP,GAAiB,MAAMC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACK,OAAP,GAAiB,MAAMF,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AACtB;AACE,cAAMC,SAAS,GAAGP,MAAM,CAACQ,MAAzB;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACA,4BACI;AAAA,qBACGR,IAAI,CAACU,IADR,SACiBV,IAAI,CAACW,IADtB;AAAA,WAASX,IAAI,CAACU,IAAd;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKD,OATD;;AAUAT,MAAAA,MAAM,CAACW,UAAP,CAAkBZ,IAAlB;AACD,KAfD;AAgBD,GAjByB,EAiBvB,EAjBuB,CAA1B;AAkBA,QAAM;AAACa,IAAAA,YAAD;AAAeC,IAAAA,aAAf;AAA8BhB,IAAAA;AAA9B,MAA+CJ,WAAW,CAAC;AAACqB,IAAAA,MAAM,EAAE,IAAT;AAAelB,IAAAA;AAAf,GAAD,CAAhE;AACA,sBACE;AAAS,IAAA,SAAS,EAAC,WAAnB;AAAA,4BACE,oBAASgB,YAAY,CAAC;AAACG,QAAAA,SAAS,EAAE;AAAZ,OAAD,CAArB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,sBAAWF,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKG;AAAL;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAhCQtB,mB;UAmB8CD,W;;;KAnB9CC,mB;AAiCT,eAAeA,mBAAf","sourcesContent":["import React, { useCallback } from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nfunction FileUploadComponent(props) {\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader()\r\n      reader.onabort = () => console.log('file reading was aborted')\r\n      reader.onerror = () => console.log('file reading has failed')\r\n      reader.onload = () => {\r\n      // Do whatever you want with the file contents\r\n        const binaryStr = reader.result\r\n        console.log(binaryStr);\r\n        return (\r\n            <li key={file.path}>\r\n              {file.path} - {file.size} bytes\r\n            </li>\r\n        );\r\n      }\r\n      reader.readAsText(file);\r\n    })\r\n  }, []);\r\n  const {getRootProps, getInputProps, acceptedFiles} = useDropzone({noDrag: true, onDrop});\r\n  return (\r\n    <section className=\"container\">\r\n      <div {...getRootProps({className: 'dropzone'})}>\r\n        <p>Upload File</p>\r\n        <input {...getInputProps()} />\r\n      </div>\r\n      <aside>\r\n        <h4>Files</h4>\r\n        <ul>{files}</ul>\r\n      </aside>\r\n    </section>\r\n  );\r\n}\r\nexport default FileUploadComponent;"]},"metadata":{},"sourceType":"module"}