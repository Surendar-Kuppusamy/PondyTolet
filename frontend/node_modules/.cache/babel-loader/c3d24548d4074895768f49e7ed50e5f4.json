{"ast":null,"code":"var _jsxFileName = \"D:\\\\Apache\\\\Apache24\\\\htdocs\\\\Server\\\\React\\\\DemoProject\\\\frontend\\\\src\\\\components\\\\pages\\\\settings\\\\BulkDataInsert.js\";\nimport React from 'react';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\nimport { useSelector, useDispatch, connect } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router';\nimport { CUSTOM_STYLES, BULK_DATA_INSERT_TYPES } from '../../../config/globalConstant';\nimport LoadingIndicator from '../common/LoadingIndicator';\nimport { getAllOptions } from '../../../actions/assetActions';\nimport { bulkInsert } from '../../../actions/settingActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BulkDataInsert extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type_of_data_to_insert: 0,\n      type_options: [],\n      default_type_option: 0,\n      bulk_data: \"\",\n      bulk_loader: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.getoptions();\n    console.log(this.props.assetState); //this.setState({available_options})\n  }\n\n  componentWillUnmount() {\n    console.log('componentWillUnmount');\n  }\n\n  onSelectDataType(e) {\n    this.setState({\n      type_of_data_to_insert: e.value\n    });\n\n    if (e.value == 1) {\n      this.setState({\n        type_options: this.props.assetState.alloptions.city_options\n      });\n    } else if (e.value == 2) {\n      this.setState({\n        type_options: this.props.assetState.alloptions.state_options\n      });\n    } else if (e.value == 3) {\n      this.setState({\n        type_options: this.props.assetState.alloptions.who_can_contact_options\n      });\n    }\n  }\n\n  onSelectOptions(value, actionMeta) {\n    console.log(value, actionMeta);\n\n    if (actionMeta.action == \"create-option\" && actionMeta.option.__isNew__) {//this.setState({default_type_option: })\n    }\n  }\n\n  handleBulkData(e) {\n    console.log(e.target.value);\n    this.setState({\n      bulk_data: e.target.value\n    });\n  }\n\n  insertBulkData() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"BulkDataInsert\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"mt-4 pt-5\",\n        children: \"Bulk Data Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"bulkDataForm\",\n        name: \"bulkDataForm\",\n        onSubmit: insertBulkData(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"my-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"my-2\",\n            children: \"Select Data want to insert:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            isLoading: this.state.bulk_loader,\n            className: \"basic-single\",\n            classNamePrefix: \"select\",\n            id: \"type_of_data_to_insert\",\n            name: \"type_of_data_to_insert\",\n            options: BULK_DATA_INSERT_TYPES,\n            onChange: e => this.onSelectDataType(e),\n            defaultValue: this.state.type_of_data_to_insert,\n            components: {\n              LoadingIndicator\n            },\n            styles: CUSTOM_STYLES\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"type_of_data_to_insert_error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), this.state.type_of_data_to_insert != 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"my-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"my-2\",\n              children: BULK_DATA_INSERT_TYPES[this.state.type_of_data_to_insert - 1].label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CreatableSelect, {\n              isLoading: this.state.bulk_loader,\n              formatCreateLabel: inputValue => 'Add or Create \"' + inputValue + '\"',\n              createOptionPosition: \"first\",\n              className: \"basic-single\",\n              classNamePrefix: \"select\",\n              id: \"who_can_contact\",\n              name: \"who_can_contact\",\n              options: this.state.type_options,\n              createOptionPosition: \"first\",\n              onChange: (value, actionMeta) => this.onSelectOptions(value, actionMeta),\n              defaultValue: this.state.default_type_option,\n              components: {\n                LoadingIndicator\n              },\n              styles: CUSTOM_STYLES\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"bulk_data\",\n              className: \"form-label\",\n              children: \"Bulk Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              id: \"bulk_data\",\n              name: \"bulk_data\",\n              rows: \"3\",\n              onChange: e => this.handleBulkData(e),\n              value: this.bulk_data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              id: \"bulk_data_error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    assetState: state.assetState,\n    settingState: state.settingState\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getoptions: () => {\n      dispatch(getAllOptions());\n    },\n    bulkInsert: () => {\n      dispatch(bulkInsert());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BulkDataInsert);","map":{"version":3,"sources":["D:/Apache/Apache24/htdocs/Server/React/DemoProject/frontend/src/components/pages/settings/BulkDataInsert.js"],"names":["React","Select","CreatableSelect","useSelector","useDispatch","connect","useLocation","useHistory","CUSTOM_STYLES","BULK_DATA_INSERT_TYPES","LoadingIndicator","getAllOptions","bulkInsert","BulkDataInsert","Component","constructor","props","state","type_of_data_to_insert","type_options","default_type_option","bulk_data","bulk_loader","componentDidMount","getoptions","console","log","assetState","componentWillUnmount","onSelectDataType","e","setState","value","alloptions","city_options","state_options","who_can_contact_options","onSelectOptions","actionMeta","action","option","__isNew__","handleBulkData","target","insertBulkData","render","label","inputValue","mapStateToProps","settingState","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Select from 'react-select';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport { useSelector, useDispatch, connect } from 'react-redux';\r\nimport { useLocation, useHistory } from 'react-router';\r\nimport { CUSTOM_STYLES, BULK_DATA_INSERT_TYPES } from '../../../config/globalConstant';\r\nimport LoadingIndicator from '../common/LoadingIndicator';\r\nimport { getAllOptions } from '../../../actions/assetActions';\r\nimport { bulkInsert } from '../../../actions/settingActions';\r\n\r\n\r\n\r\nclass BulkDataInsert extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state={\r\n            type_of_data_to_insert: 0,\r\n            type_options: [],\r\n            default_type_option: 0,\r\n            bulk_data: \"\",\r\n            bulk_loader:false\r\n        }\r\n        \r\n    }\r\n    componentDidMount() {\r\n        this.props.getoptions();\r\n        console.log(this.props.assetState);\r\n        //this.setState({available_options})\r\n    }\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount');\r\n    }\r\n    onSelectDataType(e) {\r\n        this.setState({type_of_data_to_insert: e.value});\r\n        if(e.value == 1) {\r\n            this.setState({type_options: this.props.assetState.alloptions.city_options})\r\n        } else if(e.value == 2) {\r\n            this.setState({type_options: this.props.assetState.alloptions.state_options})\r\n        } else if(e.value == 3) {\r\n            this.setState({type_options: this.props.assetState.alloptions.who_can_contact_options})\r\n        }\r\n    }\r\n    onSelectOptions(value, actionMeta) {\r\n        console.log(value, actionMeta);\r\n        if(actionMeta.action == \"create-option\" && actionMeta.option.__isNew__) {\r\n            //this.setState({default_type_option: })\r\n        }\r\n    };\r\n    handleBulkData(e) {\r\n        console.log(e.target.value);\r\n        this.setState({bulk_data: e.target.value});\r\n    }\r\n    insertBulkData() {\r\n        \r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <section id=\"BulkDataInsert\">\r\n                <h4 className=\"mt-4 pt-5\">\r\n                    Bulk Data Insert\r\n                </h4>\r\n                <form id=\"bulkDataForm\" name=\"bulkDataForm\" onSubmit={insertBulkData()}>\r\n                <div className=\"my-2\">\r\n                    <div className=\"my-2\">\r\n                        Select Data want to insert:\r\n                    </div>\r\n                    <Select isLoading={this.state.bulk_loader} className=\"basic-single\" classNamePrefix=\"select\" id=\"type_of_data_to_insert\" name=\"type_of_data_to_insert\" options={BULK_DATA_INSERT_TYPES} onChange={e => this.onSelectDataType(e)} defaultValue={this.state.type_of_data_to_insert} components={{LoadingIndicator}} styles={CUSTOM_STYLES} />\r\n                    <span id=\"type_of_data_to_insert_error\"></span>\r\n                </div>\r\n                {this.state.type_of_data_to_insert !=0 && \r\n                    <div>\r\n                        <div className=\"my-2\">\r\n                            <div className=\"my-2\">\r\n                                {BULK_DATA_INSERT_TYPES[(this.state.type_of_data_to_insert - 1)].label}\r\n                            </div>\r\n                            <CreatableSelect isLoading={this.state.bulk_loader} formatCreateLabel={(inputValue) => 'Add or Create \"'+inputValue+'\"'} createOptionPosition=\"first\" className=\"basic-single\" classNamePrefix=\"select\" id=\"who_can_contact\" name=\"who_can_contact\" options={this.state.type_options} createOptionPosition={\"first\"} onChange={(value, actionMeta) => this.onSelectOptions(value, actionMeta)} defaultValue={this.state.default_type_option} components={{LoadingIndicator}} styles={CUSTOM_STYLES} />\r\n                            <span></span>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"bulk_data\" className=\"form-label\">Bulk Data</label>\r\n                            <textarea className=\"form-control\" id=\"bulk_data\" name=\"bulk_data\" rows=\"3\" onChange={e => this.handleBulkData(e)} value={this.bulk_data}></textarea>\r\n                            <span id=\"bulk_data_error\"></span>\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"btn btn-primary\">\r\n                                Submit\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        assetState: state.assetState,\r\n        settingState: state.settingState\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getoptions: () => {\r\n            dispatch(getAllOptions())\r\n        },\r\n        bulkInsert: () => {\r\n            dispatch(bulkInsert())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BulkDataInsert);"]},"metadata":{},"sourceType":"module"}