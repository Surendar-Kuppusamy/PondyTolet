{"ast":null,"code":"var _jsxFileName = \"D:\\\\Apache\\\\Apache24\\\\htdocs\\\\Server\\\\React\\\\DemoProject\\\\demo\\\\src\\\\components\\\\pages\\\\assets\\\\AddAssets.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Formik, Form, FieldArray, ErrorMessage } from 'formik';\nimport { SET_SITE_LOADER, ALL_OPTIONS } from '../../../actions/constants';\nimport * as Yup from 'yup';\nimport Select from 'react-select';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Loader from '../../Loader';\nimport AssetSubForm from './AssetSubForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddAssets(props) {\n  _s();\n\n  const onSelectChange = (e, field, values, setFieldValue) => {\n    //console.log(e);\n    if (e.__isNew__) {//Save and select\n    } else {\n      setFieldValue(field, e.value);\n    }\n  };\n\n  const onSelectMultipleChange = (e, field, values, setFieldValue) => {\n    console.log(e);\n  };\n\n  const onClickDMYTypes = (e, field, values, setFieldValue) => {\n    setFieldValue(field, e.value);\n  };\n\n  console.log('comes');\n  const [loading, setLoader] = useState(true);\n  const dispatch = useDispatch();\n  const all_options = useSelector(state => state.defaultReducers.all_options);\n  console.log(all_options);\n  useEffect(() => {\n    setLoader(false);\n  }, []);\n  const initialValues = {\n    user_id: 0,\n    type_of_asset: 'House',\n    asset_for: 'Rent',\n    asset_name: '',\n    door_number: 0,\n    street: '',\n    nagar: '',\n    city: 0,\n    state: 0,\n    pincode: 0,\n    landmark: '',\n    number_of_rooms: 0,\n    bhk: 0,\n    age_of_asset: 0,\n    age_of_asset_type: 'Day(s)',\n    asset_main_image: null,\n    asset_size_in_length_type: 'sq.ft.',\n    asset_size_in_length: 0,\n    asset_size_in_width_type: 'sq.ft.',\n    asset_size_in_width: 0,\n    asset_notes_by_owner: '',\n    who_can_contact: [],\n    advance_amount_for_asset: 0,\n    monthly_rent_for_asset: 0,\n    lease_amount_for_asset: 0,\n    lease_period_for_asset_type: 'Day(s)',\n    asset_price: 0,\n    asset_available_on_from: '',\n    notice_period_for_vocate_asset: 0,\n    notice_period_for_vocate_asset_type: 'Day(s)',\n    asset_status_now: 0,\n    show_my_asset_for_tenants: 'Show'\n  };\n  const validationSchema = Yup.object().shape({\n    type_of_asset: Yup.string().required('Asset type is required.'),\n    asset_for: Yup.string().required('Asset for is required.'),\n    asset_name: Yup.string().required('Asset name is required.').min(3, 'Asset name must be minimum 3 characters.').max(50, 'Asset name character must be less than 50 characters.'),\n    door_number: Yup.number().when('type_of_asset', {\n      is: (type_of_asset, validationSchema) => {\n        if (type_of_asset != 'Land') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Door number is required.').min(1, 'Door number must be valid.')\n    }),\n    street: Yup.string(),\n    nagar: Yup.string(),\n    city: Yup.number().required('City is required.'),\n    state: Yup.number().required('State is required.'),\n    pincode: Yup.number().required('Pincode is required.'),\n    landmark: Yup.string(),\n    number_of_rooms: Yup.number().when('type_of_asset', {\n      is: (type_of_asset, validationSchema) => {\n        if (type_of_asset == 'House' || type_of_asset == 'Appartment') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Number of room is required.').min(1, 'Number of room must be valid.').max(20, 'Number of room must be valid.')\n    }),\n    bhk: Yup.number().when('type_of_asset', {\n      is: (type_of_asset, validationSchema) => {\n        if (type_of_asset == 'House' || type_of_asset == 'Appartment') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('BHK is required.').min(1, 'BHK must be valid.').max(20, 'BHK must be valid.')\n    }),\n    age_of_asset: Yup.number().when('type_of_asset', {\n      is: (type_of_asset, validationSchema) => {\n        if (type_of_asset != 'Land') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Age of asset is required.').min(1, 'Age of asset must be valid.').max(50, 'Age of asst must be valid.')\n    }),\n    age_of_asset_type: Yup.string().when('type_of_asset', {\n      is: (type_of_asset, validationSchema) => {\n        if (type_of_asset != 'Land') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Age of asset type is required.')\n    }),\n    asset_main_image: Yup.mixed(),\n    asset_size_in_length_type: Yup.string(),\n    asset_size_in_length: Yup.number(),\n    asset_size_in_width_type: Yup.string(),\n    asset_size_in_width: Yup.number(),\n    asset_notes_by_owner: Yup.string(),\n    who_can_contact: Yup.array().of(Yup.number().min(1, 'Select any one of the tenant type')),\n    advance_amount_for_asset: Yup.number().when('asset_for', {\n      is: (asset_for, validationSchema) => {\n        if (asset_for == 'Rent') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Asset advance amount is required.').min(100, 'Asset advance amount must be valid.').max(500000, 'Asset advance amount must be valid.')\n    }),\n    monthly_rent_for_asset: Yup.number().when('asset_for', {\n      is: (asset_for, validationSchema) => {\n        if (asset_for == 'Rent') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Asset monthly rent amount is required.').min(100, 'Asset monthly rent amount must be valid.').max(500000, 'Asset monthly rent amount must be valid.')\n    }),\n    lease_amount_for_asset: Yup.number().when('asset_for', {\n      is: (asset_for, validationSchema) => {\n        if (asset_for == 'Lease') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Asset lease amount is required.').min(100, 'Asset lease amount must be valid.')\n    }),\n    lease_period_for_asset_type: Yup.string().when('asset_for', {\n      is: (asset_for, validationSchema) => {\n        if (asset_for == 'Lease') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Asset lease amount type is required.')\n    }),\n    asset_price: Yup.number().when('asset_for', {\n      is: (asset_for, validationSchema) => {\n        if (asset_for == 'Sale') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Asset price is required.').min(100, 'Asset price must be valid.')\n    }),\n    asset_available_on_from: Yup.date(),\n    notice_period_for_vocate_asset: Yup.number().when('asset_for', {\n      is: (asset_for, validationSchema) => {\n        if (asset_for == 'Rent') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Notice period to vocate is required.').min(1, 'Notice period to vocate must be valid.')\n    }),\n    notice_period_for_vocate_asset_type: Yup.string().when('asset_for', {\n      is: (asset_for, validationSchema) => {\n        if (asset_for == 'Rent') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      then: validationSchema.required('Notice period to vocate type is required.')\n    }),\n    asset_status_now: Yup.number().required('Asset status is required.'),\n    show_my_asset_for_tenants: Yup.string().required('Show my asset to tenant status is required.')\n  });\n\n  const onSubmit = values => {\n    console.log(values);\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"AddAssets\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add Asset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: initialValues,\n          validationSchema: validationSchema,\n          onSubmit: onSubmit,\n          children: ({\n            errors,\n            values,\n            field,\n            touched,\n            setValues,\n            setFieldValue,\n            handleChange,\n            handleBlur\n          }) => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n              children: JSON.stringify(values)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(FieldArray, {\n              name: \"arrayOfAssetTypes\",\n              render: arrayHelpers => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"my-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-2\",\n                  children: [\"Asset/Property Type:\", /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"type_of_asset\",\n                    component: \"span\",\n                    className: \"text-danger\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 270,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 45\n                }, this), all_options.type_of_asset_options.map((type, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-check form-check-inline\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    className: \"form-check-input\",\n                    type: \"radio\",\n                    name: \"type_of_asset\",\n                    id: 'type_of_asset_' + index,\n                    value: type.value,\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    checked: values.type_of_asset == type.value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-check-label\",\n                    htmlFor: 'type_of_asset_' + index,\n                    children: type.label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 57\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 53\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(FieldArray, {\n              name: \"arrayOfAssetFor\",\n              render: arrayHelpers => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"my-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-2\",\n                  children: [\"Asset/Property For:\", /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"asset_for\",\n                    component: \"span\",\n                    className: \"text-danger\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 45\n                }, this), all_options.asset_for_options.map((type, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-check form-check-inline\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    className: \"form-check-input\",\n                    type: \"radio\",\n                    name: \"asset_for\",\n                    id: 'asset_for_options_' + index,\n                    value: type.value,\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    checked: values.asset_for == type.value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-check-label\",\n                    htmlFor: 'asset_for_options_' + index,\n                    children: type.label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 57\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 53\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"asset_name\",\n                className: \"form-label\",\n                children: \"Asset Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: 'form-control' + (errors.last_name && touched.last_name ? ' is-invalid' : ''),\n                id: \"asset_name\",\n                name: \"asset_name\",\n                placeholder: \"Enter your last name\",\n                onChange: handleChange,\n                onBlur: handleBlur,\n                value: values.asset_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"asset_name\",\n                component: \"span\",\n                className: \"text-danger\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(AddAssets, \"YMgPalNI1pDv8RtVrkoi+wIEeDg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AddAssets;\nexport default AddAssets;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddAssets\");","map":{"version":3,"sources":["D:/Apache/Apache24/htdocs/Server/React/DemoProject/demo/src/components/pages/assets/AddAssets.js"],"names":["React","useEffect","useState","Formik","Form","FieldArray","ErrorMessage","SET_SITE_LOADER","ALL_OPTIONS","Yup","Select","useSelector","useDispatch","Loader","AssetSubForm","AddAssets","props","onSelectChange","e","field","values","setFieldValue","__isNew__","value","onSelectMultipleChange","console","log","onClickDMYTypes","loading","setLoader","dispatch","all_options","state","defaultReducers","initialValues","user_id","type_of_asset","asset_for","asset_name","door_number","street","nagar","city","pincode","landmark","number_of_rooms","bhk","age_of_asset","age_of_asset_type","asset_main_image","asset_size_in_length_type","asset_size_in_length","asset_size_in_width_type","asset_size_in_width","asset_notes_by_owner","who_can_contact","advance_amount_for_asset","monthly_rent_for_asset","lease_amount_for_asset","lease_period_for_asset_type","asset_price","asset_available_on_from","notice_period_for_vocate_asset","notice_period_for_vocate_asset_type","asset_status_now","show_my_asset_for_tenants","validationSchema","object","shape","string","required","min","max","number","when","is","then","mixed","array","of","date","onSubmit","errors","touched","setValues","handleChange","handleBlur","JSON","stringify","arrayHelpers","type_of_asset_options","map","type","index","label","asset_for_options","last_name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Formik, Form, FieldArray, ErrorMessage } from 'formik';\r\nimport { SET_SITE_LOADER, ALL_OPTIONS } from '../../../actions/constants'\r\nimport * as Yup from 'yup';\r\nimport Select from 'react-select';\r\nimport { useSelector, useDispatch }  from 'react-redux';\r\nimport Loader from '../../Loader';\r\nimport AssetSubForm from './AssetSubForm';\r\n\r\nfunction AddAssets(props) {\r\n\r\n    const onSelectChange = (e, field, values, setFieldValue) => {\r\n        //console.log(e);\r\n        if(e.__isNew__) {\r\n            //Save and select\r\n        } else {\r\n            setFieldValue(field, e.value);\r\n        }\r\n    };\r\n    \r\n    const onSelectMultipleChange = (e, field, values, setFieldValue) => {\r\n        console.log(e);\r\n    };\r\n    \r\n    \r\n    \r\n    const onClickDMYTypes = (e, field, values, setFieldValue) => {\r\n        setFieldValue(field, e.value);\r\n    }\r\n\r\n\r\n    console.log('comes');\r\n    const [loading, setLoader] = useState(true);\r\n    const dispatch = useDispatch();\r\n    const all_options = useSelector((state) => state.defaultReducers.all_options);\r\n    console.log(all_options)\r\n    useEffect(() => {\r\n        setLoader(false);\r\n    }, []);\r\n\r\n    const initialValues = {\r\n        user_id: 0,\r\n        type_of_asset: 'House',\r\n        asset_for: 'Rent',\r\n        asset_name: '',\r\n        door_number: 0,\r\n        street: '',\r\n        nagar: '',\r\n        city: 0,\r\n        state: 0,\r\n        pincode:0,\r\n        landmark: '',\r\n        number_of_rooms: 0,\r\n        bhk: 0,\r\n        age_of_asset: 0,\r\n        age_of_asset_type: 'Day(s)',\r\n        asset_main_image: null,\r\n        asset_size_in_length_type: 'sq.ft.',\r\n        asset_size_in_length: 0,\r\n        asset_size_in_width_type: 'sq.ft.',\r\n        asset_size_in_width: 0,\r\n        asset_notes_by_owner: '',\r\n        who_can_contact: [],\r\n        advance_amount_for_asset:0,\r\n        monthly_rent_for_asset: 0,\r\n        lease_amount_for_asset: 0,\r\n        lease_period_for_asset_type: 'Day(s)',\r\n        asset_price:0,\r\n        asset_available_on_from: '',\r\n        notice_period_for_vocate_asset: 0,\r\n        notice_period_for_vocate_asset_type: 'Day(s)',\r\n        asset_status_now: 0,\r\n        show_my_asset_for_tenants: 'Show'\r\n    };\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        type_of_asset: Yup.string()\r\n            .required('Asset type is required.'),\r\n        asset_for: Yup.string()\r\n            .required('Asset for is required.'),\r\n        asset_name: Yup.string()\r\n            .required('Asset name is required.')\r\n            .min(3, 'Asset name must be minimum 3 characters.')\r\n            .max(50, 'Asset name character must be less than 50 characters.'),\r\n        door_number: Yup.number()\r\n            .when('type_of_asset', {\r\n                is: (type_of_asset, validationSchema) => {\r\n                    if(type_of_asset  != 'Land') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Door number is required.').min(1, 'Door number must be valid.')\r\n            }),\r\n        street: Yup.string(),\r\n        nagar: Yup.string(),\r\n        city: Yup.number()\r\n            .required('City is required.'),\r\n        state: Yup.number()\r\n            .required('State is required.'),\r\n        pincode: Yup.number()\r\n            .required('Pincode is required.'),\r\n        landmark: Yup.string(),\r\n        number_of_rooms: Yup.number()\r\n            .when('type_of_asset', {\r\n                is: (type_of_asset, validationSchema) => {\r\n                    if(type_of_asset  == 'House' || type_of_asset  == 'Appartment') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Number of room is required.').min(1, 'Number of room must be valid.').max(20, 'Number of room must be valid.')\r\n            }),\r\n        bhk: Yup.number()\r\n            .when('type_of_asset', {\r\n                is: (type_of_asset, validationSchema) => {\r\n                    if(type_of_asset  == 'House' || type_of_asset  == 'Appartment') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('BHK is required.').min(1, 'BHK must be valid.').max(20, 'BHK must be valid.')\r\n            }),\r\n        age_of_asset: Yup.number()\r\n            .when('type_of_asset', {\r\n                is: (type_of_asset, validationSchema) => {\r\n                    if(type_of_asset  != 'Land') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Age of asset is required.').min(1, 'Age of asset must be valid.').max(50, 'Age of asst must be valid.')\r\n            }),\r\n        age_of_asset_type: Yup.string()\r\n            .when('type_of_asset', {\r\n                is: (type_of_asset, validationSchema) => {\r\n                    if(type_of_asset  != 'Land') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Age of asset type is required.')\r\n            }),\r\n        asset_main_image: Yup.mixed(),\r\n        asset_size_in_length_type: Yup.string(),\r\n        asset_size_in_length: Yup.number(),\r\n        asset_size_in_width_type: Yup.string(),\r\n        asset_size_in_width: Yup.number(),\r\n        asset_notes_by_owner: Yup.string(),\r\n        who_can_contact: Yup.array().of(Yup.number().min(1, 'Select any one of the tenant type')),\r\n        advance_amount_for_asset: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for  == 'Rent') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Asset advance amount is required.').min(100, 'Asset advance amount must be valid.').max(500000, 'Asset advance amount must be valid.')\r\n            }),\r\n        monthly_rent_for_asset: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for  == 'Rent') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Asset monthly rent amount is required.').min(100, 'Asset monthly rent amount must be valid.').max(500000, 'Asset monthly rent amount must be valid.')\r\n            }),\r\n        lease_amount_for_asset: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for  == 'Lease') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Asset lease amount is required.').min(100, 'Asset lease amount must be valid.')\r\n            }),\r\n        lease_period_for_asset_type: Yup.string()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for  == 'Lease') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Asset lease amount type is required.')\r\n            }),\r\n        asset_price: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for  == 'Sale') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Asset price is required.').min(100, 'Asset price must be valid.')\r\n            }),\r\n        asset_available_on_from: Yup.date(),\r\n        notice_period_for_vocate_asset: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for  == 'Rent') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Notice period to vocate is required.').min(1, 'Notice period to vocate must be valid.')\r\n            }),\r\n        notice_period_for_vocate_asset_type: Yup.string()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for  == 'Rent') {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: validationSchema.required('Notice period to vocate type is required.')\r\n            }),\r\n        asset_status_now: Yup.number()\r\n            .required('Asset status is required.'),\r\n        show_my_asset_for_tenants: Yup.string()\r\n            .required('Show my asset to tenant status is required.')\r\n    });\r\n    \r\n\r\n    const onSubmit = (values) => {\r\n        console.log(values);\r\n    };\r\n\r\n    if(loading) {\r\n        return (\r\n            <div>\r\n                <Loader />\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <section id=\"AddAssets\">\r\n                <h3>Add Asset</h3>\r\n                <div className=\"container\">\r\n                    <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n                        {({ errors, values, field, touched, setValues, setFieldValue, handleChange, handleBlur }) => (\r\n                            <Form>\r\n                                <pre>\r\n                                    {JSON.stringify(values)}\r\n                                </pre>\r\n\r\n\r\n                                <FieldArray\r\n                                    name=\"arrayOfAssetTypes\"\r\n                                    render={arrayHelpers => (\r\n                                        <div className=\"my-2\">\r\n                                            <div className=\"mb-2\">\r\n                                                Asset/Property Type:\r\n                                                <ErrorMessage name=\"type_of_asset\" component=\"span\" className=\"text-danger\" />\r\n                                            </div>\r\n                                            {all_options.type_of_asset_options.map((type, index) =>\r\n                                                (\r\n                                                    <div className=\"form-check form-check-inline\"  key={index}>\r\n                                                        <input className=\"form-check-input\" type=\"radio\" name=\"type_of_asset\" id={'type_of_asset_'+index} value={type.value} onChange={handleChange} onBlur={handleBlur} checked={values.type_of_asset == type.value } />\r\n                                                        <label className=\"form-check-label\" htmlFor={'type_of_asset_'+index}>{type.label}</label>\r\n                                                    </div>\r\n                                                )\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <FieldArray\r\n                                    name=\"arrayOfAssetFor\"\r\n                                    render={arrayHelpers => (\r\n                                        <div className=\"my-2\">\r\n                                            <div className=\"mb-2\">\r\n                                                Asset/Property For:\r\n                                                <ErrorMessage name=\"asset_for\" component=\"span\" className=\"text-danger\" />\r\n                                            </div>\r\n                                            {all_options.asset_for_options.map((type, index) =>\r\n                                                (\r\n                                                    <div className=\"form-check form-check-inline\"  key={index}>\r\n                                                        <input className=\"form-check-input\" type=\"radio\" name=\"asset_for\" id={'asset_for_options_'+index} value={type.value} onChange={handleChange} onBlur={handleBlur} checked={values.asset_for == type.value } />\r\n                                                        <label className=\"form-check-label\" htmlFor={'asset_for_options_'+index}>{type.label}</label>\r\n                                                    </div>\r\n                                                )\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"asset_name\" className=\"form-label\">Asset Name:</label>\r\n                                    <input type=\"text\" className={'form-control' + (errors.last_name && touched.last_name ? ' is-invalid' : '')} id=\"asset_name\" name=\"asset_name\" placeholder=\"Enter your last name\" onChange={handleChange} onBlur={handleBlur} value={values.asset_name} />\r\n                                    <ErrorMessage name=\"asset_name\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\nexport default AddAssets;"]},"metadata":{},"sourceType":"module"}