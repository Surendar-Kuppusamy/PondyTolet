[{"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\index.js":"1","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\reportWebVitals.js":"2","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\App.js":"3","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\store\\store.js":"4","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\routes\\RouterOutlet.js":"5","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\reducers\\assetReducer.js":"6","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\reducers\\userReducer.js":"7","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\routes\\AllRoutes.js":"8","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\Loader.js":"9","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\Footer.js":"10","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\Header.js":"11","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\constants\\constants.js":"12","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\Contents.js":"13","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\Home.js":"14","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\login\\Login.js":"15","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\signup\\Signup.js":"16","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AddAssets.js":"17","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep1.js":"18","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep5.js":"19","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep2.js":"20","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep3.js":"21","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep4.js":"22","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep6.js":"23","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep7.js":"24","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\actions\\assetActions.js":"25","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\actions\\userActions.js":"26","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\common\\LoadingIndicator.js":"27","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\common\\FileUploadComponent.js":"28","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\constants\\Apiconstants.js":"29","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\commonFunctions\\Validations.js":"30","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\config\\globalConstant.js":"31","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\settings\\BulkDataInsert.js":"32","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\reducers\\settingReducer.js":"33","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\actions\\settingActions.js":"34","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\routes\\PrivateRoutes.js":"35","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\auth\\Auth.js":"36","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\settings\\CitiesList.js":"37","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\settings\\StatesList.js":"38","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\settings\\TenantsTypeList.js":"39","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\settings\\User.js":"40"},{"size":838,"mtime":1638899383615,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":499162500000,"results":"43","hashOfConfig":"42"},{"size":523,"mtime":1632043021838,"results":"44","hashOfConfig":"42"},{"size":958,"mtime":1633118062106,"results":"45","hashOfConfig":"42"},{"size":605,"mtime":1624046624486,"results":"46","hashOfConfig":"42"},{"size":2038,"mtime":1635364017078,"results":"47","hashOfConfig":"42"},{"size":1554,"mtime":1633142541144,"results":"48","hashOfConfig":"42"},{"size":2524,"mtime":1638901373157,"results":"49","hashOfConfig":"42"},{"size":269,"mtime":1632857278276,"results":"50","hashOfConfig":"42"},{"size":219,"mtime":1623690014944,"results":"51","hashOfConfig":"42"},{"size":4243,"mtime":1635448229988,"results":"52","hashOfConfig":"42"},{"size":2241,"mtime":1635616683314,"results":"53","hashOfConfig":"42"},{"size":156,"mtime":1623350397739,"results":"54","hashOfConfig":"42"},{"size":145,"mtime":1623353182748,"results":"55","hashOfConfig":"42"},{"size":4232,"mtime":1634407510607,"results":"56","hashOfConfig":"42"},{"size":14184,"mtime":1639159560429,"results":"57","hashOfConfig":"42"},{"size":21917,"mtime":1633140487799,"results":"58","hashOfConfig":"42"},{"size":3204,"mtime":1633116927704,"results":"59","hashOfConfig":"42"},{"size":8582,"mtime":1633117129991,"results":"60","hashOfConfig":"42"},{"size":8146,"mtime":1633117103680,"results":"61","hashOfConfig":"42"},{"size":3639,"mtime":1633117114135,"results":"62","hashOfConfig":"42"},{"size":4875,"mtime":1633117122871,"results":"63","hashOfConfig":"42"},{"size":6245,"mtime":1633117137384,"results":"64","hashOfConfig":"42"},{"size":4496,"mtime":1633117146247,"results":"65","hashOfConfig":"42"},{"size":2617,"mtime":1634762210470,"results":"66","hashOfConfig":"42"},{"size":1898,"mtime":1633462425463,"results":"67","hashOfConfig":"42"},{"size":403,"mtime":1630348968060,"results":"68","hashOfConfig":"42"},{"size":3437,"mtime":1632620843579,"results":"69","hashOfConfig":"42"},{"size":2445,"mtime":1639158574259,"results":"70","hashOfConfig":"42"},{"size":590,"mtime":1632418455574,"results":"71","hashOfConfig":"42"},{"size":3627,"mtime":1640203594581,"results":"72","hashOfConfig":"42"},{"size":8481,"mtime":1635363742449,"results":"73","hashOfConfig":"42"},{"size":2517,"mtime":1638903712884,"results":"74","hashOfConfig":"42"},{"size":13994,"mtime":1640203693013,"results":"75","hashOfConfig":"42"},{"size":403,"mtime":1633140239920,"results":"76","hashOfConfig":"42"},{"size":134,"mtime":1633140279039,"results":"77","hashOfConfig":"42"},{"size":13311,"mtime":1639161790156,"results":"78","hashOfConfig":"42"},{"size":13379,"mtime":1635451661461,"results":"79","hashOfConfig":"42"},{"size":13536,"mtime":1635451689289,"results":"80","hashOfConfig":"42"},{"size":10514,"mtime":1640204840384,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},"1886exk",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"85"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"85"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"85"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"85"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"85"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"85"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"85"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"85"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":52,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"85"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":2,"source":"129","usedDeprecatedRules":"85"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":7,"source":"132","usedDeprecatedRules":"85"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":9,"source":"135","usedDeprecatedRules":"85"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":4,"source":"138","usedDeprecatedRules":"85"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":6,"source":"141","usedDeprecatedRules":"85"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":5,"source":"144","usedDeprecatedRules":"85"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"85"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"85"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"85"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"85"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"85"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"85"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"85"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"85"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"85"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"85"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"85"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"85"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\index.js",["192"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport dotenv from 'dotenv';\nimport './index.css';\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle.min\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n/* ReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n); */\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["193","194"],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\reportWebVitals.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\App.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\store\\store.js",["195"],"import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport {\r\n    assetReducer,\r\n    assetReducer1,\r\n} from '../reducers/assetReducer';\r\nimport { userReducer } from '../reducers/userReducer';\r\nimport { settingReducer } from '../reducers/settingReducer';\r\n\r\nconst reducer = combineReducers({\r\n    userState:userReducer,\r\n    assetState: assetReducer,\r\n    assetState1: assetReducer1,\r\n    settingState: settingReducer\r\n})\r\n\r\nconst allOptions = localStorage.getItem('allopt')\r\n  ? JSON.parse(localStorage.getItem('allopt'))\r\n  : {}\r\n\r\nconst initialState = {\r\n    assetState: {    //key should be from above any one of the reducer\r\n        alloptions: allOptions\r\n    }\r\n}\r\n  \r\n  const middleware = [thunk]\r\n  \r\n  const store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n  )\r\n  \r\n  export default store;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\routes\\RouterOutlet.js",["196","197","198","199"],"import React, { Suspense, lazy } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\r\nimport Loader from '../components/Loader';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport AllRoutes from './AllRoutes'\r\n\r\n\r\nfunction RouterOutlet() {\r\n    return (\r\n        <Router forceRefresh={false}>\r\n            <Suspense fallback={<Loader />}>\r\n                <Header />\r\n                <AllRoutes />\r\n                <Footer />\r\n            </Suspense>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default RouterOutlet;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\reducers\\assetReducer.js",["200","201","202","203","204"],"import {\r\n    SITE_LOADER,\r\n    ASSET_FORM,\r\n    ASSET_LOADER,\r\n    ALL_OPTIONS,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGOUT,\r\n    ASSET_RESULT,\r\n    PUSH_OPTION\r\n} from '../constants/constants';\r\n\r\n\r\nconst allOptions = localStorage.getItem('alloptions')\r\n  ? JSON.parse(localStorage.getItem('alloptions'))\r\n  : {}\r\n\r\nconst initialState = {\r\n    site_loader: false,\r\n    alloptions: allOptions,\r\n    asset_loader: false,\r\n    asset_result: {}\r\n};\r\n\r\nexport const assetReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SITE_LOADER: {\r\n            return {...state }\r\n        }\r\n        case ASSET_LOADER: {\r\n            return {...state, asset_loader: false }\r\n        }\r\n        case ASSET_FORM: {\r\n            let assetForm = action.payload;\r\n            return {...state, asset_form: assetForm, asset_loader: true }\r\n        }\r\n        case ASSET_RESULT: {\r\n            let assetForm = action.payload;\r\n            return {...state, asset_result:action.payload, asset_loader: false }\r\n        }\r\n        case ALL_OPTIONS: {\r\n            let alloptions = action.payload;\r\n            localStorage.setItem('alloptions', JSON.stringify(alloptions));\r\n            return { ...state, alloptions }\r\n        }\r\n        case PUSH_OPTION: {\r\n            if(action.payload.fieldType == 1) {\r\n                return {  ...state, ...state.alloptions.city_options.unshift(action.payload.option) }\r\n            } else if(action.payload == 2) {\r\n                return {  ...state, ...state.alloptions.state_options.unshift(action.payload.option) }\r\n            } else if(action.payload == 3) {\r\n                return {  ...state, ...state.alloptions.who_can_contact_options.unshift(action.payload.option) }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const assetReducer1 = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case USER_LOGIN_FAIL:\r\n        return { }\r\n      case USER_LOGOUT:\r\n        return {}\r\n      default:\r\n        return state\r\n    }\r\n}","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\reducers\\userReducer.js",["205","206"],"import {\r\n    SITE_LOADER,\r\n    USER_INFO,\r\n    USER_LOADER,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGOUT,\r\n    SIGNUP_FORM,\r\n    SIGNUP_RESULT,\r\n    SIGNUP_ERROR,\r\n    LOGIN_FORM,\r\n    LOGIN_FORM_RESULT\r\n} from '../constants/constants';\r\n\r\n\r\nconst user_info = localStorage.getItem('user_info')\r\n  ? JSON.parse(localStorage.getItem('user_info'))\r\n  : {}\r\n\r\nconst initialState = {\r\n    site_loader: false,\r\n    user_loader: false,\r\n    user_info: user_info,\r\n    signup_result:{}\r\n};\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SITE_LOADER: {\r\n            return {...state }\r\n        }\r\n        case SIGNUP_FORM: {\r\n            return {...state, signup_form:action.payload, user_loader: true }\r\n        }\r\n        case SIGNUP_RESULT: {\r\n            return {...state, signup_result:action.payload, user_loader: false }\r\n        }\r\n        case SIGNUP_ERROR: {\r\n            return {...state, signup_error:action.payload, user_loader: false }\r\n        }\r\n        case LOGIN_FORM: {\r\n            return {...state, login_form:action.payload, user_loader: true }\r\n        }\r\n        case LOGIN_FORM_RESULT: {\r\n            return {...state, login_form_result:action.payload, user_loader: false }\r\n        }\r\n        case USER_LOADER: {\r\n            return {...state, user_loader:action.payload }\r\n        }\r\n        case USER_INFO: {\r\n            let user_details = action.payload;\r\n            return { ...state, user_info:user_details }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\routes\\AllRoutes.js",["207","208","209","210","211"],"import React, { Suspense, lazy } from 'react';\r\nimport { HashRouter as Router, Route, Redirect, Switch, useLocation } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SET_SITE_LOADER } from '../constants/constants';\r\nimport PrivateRoutes from '../routes/PrivateRoutes';\r\nimport Loader from '../components/Loader';\r\n\r\n\r\nconst Content = lazy(() => import('../components/Contents'));\r\nconst Home = lazy(() => import('../components/pages/Home'));\r\nconst Login = lazy(() => import('../components/pages/login/Login'));\r\nconst Signup = lazy(() => import('../components/pages/signup/Signup'));\r\nconst AddAssets = lazy(() => import('../components/pages/assets/AddAssets'));\r\nconst BulkDataInsert = lazy(() => import('../components/pages/settings/BulkDataInsert'));\r\nconst User = lazy(() => import('../components/pages/settings/User'));\r\nconst CitiesList = lazy(() => import('../components/pages/settings/CitiesList'));\r\nconst StatesList = lazy(() => import('../components/pages/settings/StatesList'));\r\nconst TenantsTypeList = lazy(() => import('../components/pages/settings/TenantsTypeList'));\r\n\r\n\r\n\r\nfunction AllRoutes() {\r\n    let location = useLocation();\r\n    /* const dispatch = useDispatch();\r\n    dispatch({type: SET_SITE_LOADER, payload: true}); */\r\n    React.useEffect(() => {\r\n        console.log(location)\r\n    }, [location]);\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\">\r\n                <Redirect to=\"/home\" />\r\n            </Route>\r\n            <Route exact path=\"/home\" component={() => (<Home />)} />\r\n            <Route exact path=\"/loader\" component={() => <Loader />} />\r\n            <Route exact path=\"/content\" component={() => <Content />} />\r\n\r\n            <Route exact path=\"/login\" component={() => <Login />} />\r\n            <Route exact path=\"/signup\" component={() => <Signup />} />\r\n\r\n            <Route exact path=\"/asset/add\" component={() => <AddAssets />} />\r\n            <Route exact path=\"/settings/bulk\" component={() => <BulkDataInsert />} />\r\n            <Route exact path=\"/users\" component={() => <User />} />\r\n            <Route exact path=\"/cities\" component={() => <CitiesList />} />\r\n            <Route exact path=\"/states\" component={() => <StatesList />} />\r\n            <Route exact path=\"/tenants/type\" component={() => <TenantsTypeList />} />\r\n            \r\n\r\n            <PrivateRoutes path=\"/auth/asset/add\" component={() => <AddAssets />} />\r\n            \r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default AllRoutes;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\Loader.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\Footer.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\Header.js",["212","213","214","215","216","217","218"],"import React, { useEffect, useState } from 'react';\r\nimport { useLocation, useHistory } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { USER_LOGOUT } from '../constants/constants';\r\n\r\nfunction Header(props) {\r\n    let location = useLocation();\r\n    let history = useHistory();\r\n    const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n\r\n    useEffect(() => {\r\n        setToken(localStorage.getItem(\"token\"));\r\n    });\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem(\"token\");\r\n        history.push(\"/login\");\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/home\">Navbar</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                        <ul className=\"navbar-nav ml-auto\">\r\n                            <li className=\"nav-item\">\r\n                                <NavLink  className=\"nav-link\" activeStyle={{ color: 'red' }} to=\"/home\">Home</NavLink>\r\n                            </li>\r\n                            { (token == undefined || token == '')  && \r\n                                <li className=\"nav-item\">\r\n                                    <NavLink  className=\"nav-link\" activeStyle={{ color: 'red' }} to=\"/login\">Login</NavLink>\r\n                                </li>\r\n                            }\r\n                            <li className=\"nav-item\">\r\n                            <NavLink className=\"nav-link\" activeStyle={{ color: 'red' }} to=\"/signup\">Singup</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" activeStyle={{ color: 'red' }} to=\"/asset/add\">Add Asset</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" activeStyle={{ color: 'red' }} to=\"/auth/asset/add\">Auth Add Asset</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" activeStyle={{ color: 'red' }} to=\"/settings/bulk\">Settings</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" activeStyle={{ color: 'red' }} to=\"/cities\">Cities</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" activeStyle={{ color: 'red' }} to=\"/states\">States</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" activeStyle={{ color: 'red' }} to=\"/tenants/type\">Tenants Type List</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink className=\"nav-link\" activeStyle={{ color: 'red' }} to=\"/users\">Users</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link disabled\" href=\"/home\" tabIndex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n                            </li>\r\n                            { (token != '' && token != undefined && token != null) && \r\n                                <li className=\"nav-item\">\r\n                                    <span className=\"nav-link pointer\" onClick={logout}>Logout</span>\r\n                                </li>\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\constants\\constants.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\Contents.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\Home.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\login\\Login.js",["219","220","221","222","223","224"],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch, connect } from 'react-redux';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { toast } from 'react-toastify';\r\nimport { login } from '../../../actions/userActions';\r\nimport { LOGIN_FORM, LOGIN_FORM_RESULT } from '../../../constants/constants';\r\n\r\nfunction Login(props) {\r\n    let location = useLocation();\r\n    let history = useHistory();\r\n    const userState = useSelector((state) => state.userState);\r\n    const { login_form_result } = userState;\r\n    const dispatch = useDispatch();\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: ''\r\n    };\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        email: Yup.string()\r\n                .required('Email is required')\r\n                .email('Email is invalid'),\r\n        password: Yup.string()\r\n                .required('Password is required')\r\n                .min(6, 'Password must have 8 characters')\r\n                .max(50, 'Password must be less than 50 characters')\r\n    });\r\n    \r\n    const onSubmit = (values) => {\r\n        dispatch({type: LOGIN_FORM, payload: values });\r\n        props.login();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(login_form_result != undefined && Object.keys(login_form_result).length > 0) {\r\n            console.log('Result ===>'+login_form_result);\r\n            if(login_form_result.status == 'error') {\r\n                dispatch({type: LOGIN_FORM_RESULT, payload: {}});\r\n                toast.error(login_form_result.message, {theme: \"colored\"});\r\n            } else {\r\n                dispatch({type: LOGIN_FORM_RESULT, payload: {}});\r\n                toast.success(login_form_result.message, {theme: \"colored\"});\r\n                localStorage.setItem(\"token\", login_form_result.token);\r\n                history.push(\"/home\");\r\n            }\r\n        }\r\n    },[login_form_result])\r\n    \r\n    return (\r\n        <section id=\"login\">\r\n            <h3>Login Page</h3>\r\n            <div className=\"container\">\r\n                <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n                    {({ errors, values, touched, setValues, setFieldValue, handleChange, handleBlur }) => (\r\n                        <Form>\r\n                            <pre>{JSON.stringify(values)}</pre>\r\n                            <div className=\"container\">\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n                                    <input type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} id=\"email\" name=\"email\" placeholder=\"Enter your email\" onChange={handleChange} onBlur={handleBlur} value={values.email} />\r\n                                    <ErrorMessage name=\"email\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <input type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} id=\"password\" name=\"password\" placeholder=\"Enter your password\" onChange={handleChange} onBlur={handleBlur} value={values.password} />\r\n                                    <ErrorMessage name=\"password\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mt-3 text-right\">\r\n                                    <button className=\"btn btn-primary\" type=\"submit\">Login</button>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: () => {\r\n            dispatch(login())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\signup\\Signup.js",["225","226","227","228","229","230","231","232","233","234","235","236","237","238"],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch, connect }  from 'react-redux';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport { Formik, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport DatePicker from \"react-datepicker\";\r\nimport { subYears } from 'date-fns';\r\nimport { toast } from 'react-toastify';\r\nimport { signup } from '../../../actions/userActions';\r\nimport Loader from '../../Loader';\r\nimport { USER_LOADER, SIGNUP_FORM } from '../../../constants/constants';\r\nimport { isNumber } from '../../../commonFunctions/Validations';\r\nimport FileUploadComponent from '../common/FileUploadComponent';\r\n\r\n\r\nfunction Signup(props) {\r\n    let location = useLocation();\r\n    let history = useHistory();\r\n    const userState = useSelector((state) => state.userState);\r\n    const { signup_result, signup_error, signup_form } = userState;\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if(Object.keys(signup_result).length != 0) {\r\n            console.log('Result ===>'+signup_result);\r\n            if(signup_result.status == 'error') {\r\n                //let message = signup_result.params.toUpperCase()+': '+signup_result.message;\r\n                toast.error(signup_result.message, {theme: \"colored\"});\r\n            } else if(signup_result.status == 'success') {\r\n                toast.success(signup_result.message, {theme: \"colored\"});\r\n                //history.push(\"/home\");\r\n            }\r\n        }\r\n    },[signup_result])\r\n    console.log(signup_form);\r\n    let initialValues = {};\r\n    if(signup_form == undefined) {\r\n        initialValues = {\r\n            first_name: '',\r\n            last_name: '',\r\n            email: '',\r\n            password: '',\r\n            confirm_password:'',\r\n            dob: '',\r\n            mobile_number: '',\r\n            std_code:'',\r\n            telephone_number: '',\r\n            address: '',\r\n            user_type:3,\r\n            files:[]\r\n        };\r\n    } else {\r\n        initialValues = signup_form;\r\n    }\r\n    \r\n    const validationSchema = Yup.object({\r\n        first_name: Yup.string()\r\n            .max(50, 'First name must be 50 characters or less')\r\n            .required('First name is required'),\r\n        last_name: Yup.string()\r\n            .max(50, 'Last name must be 50 characters or less')\r\n            .required('Last name is required'),\r\n        email: Yup.string()\r\n            .email('Invalid email address')\r\n            .required('Email required'),\r\n        password: Yup.string()\r\n            .required('Password is required'),\r\n        confirm_password:Yup.string()\r\n            .required('Confirm password is required')\r\n            .oneOf([Yup.ref('password'), null], 'Passwords must match'),\r\n        dob: Yup.date('DOB is date'),\r\n        mobile_number: Yup.string().matches(/^\\d{10}$/, 'Invalid mobile number')\r\n            .min(10, 'Invalid mobile number')\r\n            .max(10,'Invalid mobile number')\r\n            .required('Mobile number is required'),\r\n        std_code:Yup.string()\r\n            .min(3, 'Invalid STD code')\r\n            .max(4,'Invalid STD code'),\r\n        telephone_number: Yup.string()\r\n            .min(6, 'Invalid telephone number')\r\n            .max(8,'Invalid telephone number'),\r\n        address: Yup.string()\r\n            .required('Address is required'),\r\n        user_type:Yup.number()\r\n            .required('User type is required'),\r\n    });\r\n\r\n    const onDobDateChange = (e, field, values, setFieldValue) => {\r\n        console.log(e.getDate(), e.getFullYear(), e.getMonth());\r\n        let selYear = e.getFullYear();\r\n        let selMonth = (e.getMonth() < 9 ? '0' : '') + (e.getMonth() + 1);\r\n        let selDate = (e.getDate() < 10 ? '0' : '') + e.getDate();\r\n        var dobDate = selYear+'-'+selMonth+'-'+selDate;\r\n        console.log(dobDate);\r\n        setFieldValue(field, dobDate);\r\n    };\r\n\r\n    const handleForms = async(values) => {\r\n        console.log('Test');\r\n    }\r\n\r\n    const onSubmit = async(values, formikBag) => {\r\n        //console.log(values, userState, props);\r\n        dispatch({type:SIGNUP_FORM, payload: values});\r\n        await props.register();\r\n        /* console.log(props);\r\n        //formikBag.setSubmitting(false);\r\n        //actions.resetForm(initialValues); */\r\n        /* dispatch({type:SIGNUP_FORM, payload: values});\r\n        await props.register(); */\r\n    };\r\n\r\n\r\n    return (\r\n        <section id=\"signup\">\r\n            {userState.user_loader == true ? <Loader /> : <div>\r\n                <h3 className=\"text-center\">Signup Page</h3>\r\n                <div className=\"container\">\r\n                    <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n                        {(props) => (\r\n                            <Form>\r\n                                <pre>\r\n                                    {JSON.stringify(props.values)}\r\n                                </pre>\r\n                                {/* <div className=\"mb-2\">\r\n                                    <FileUploadComponent maxFiles=\"4\" fileTypes=\".jpeg,.png\" setField={props} fieldName={'files'} />\r\n                                </div> */}\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"first_name\" className=\"form-label\">First Name<span className=\"pl-2 text-danger\">*</span></label>\r\n                                    <input type=\"text\" className={'form-control' + (props.errors.first_name && props.touched.first_name ? ' is-invalid' : '')} id=\"first_name\" name=\"first_name\" placeholder=\"Enter your first name\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.first_name}  />\r\n                                    <ErrorMessage name=\"first_name\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"last_name\" className=\"form-label\">Last Name<span className=\"pl-2 text-danger\">*</span></label>\r\n                                    <input type=\"text\" className={'form-control' + (props.errors.last_name && props.touched.last_name ? ' is-invalid' : '')} id=\"last_name\" name=\"last_name\" placeholder=\"Enter your last name\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.last_name} />\r\n                                    <ErrorMessage name=\"last_name\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email<span className=\"pl-2 text-danger\">*</span></label>\r\n                                    <input type=\"text\" className={'form-control' + (props.errors.email && props.touched.email ? ' is-invalid' : '')} id=\"email\" name=\"email\" placeholder=\"Enter your email\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.email} />\r\n                                    <ErrorMessage name=\"email\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password<span className=\"pl-2 text-danger\">*</span></label>\r\n                                    <input type=\"password\" className={'form-control' + (props.errors.password && props.touched.password ? ' is-invalid' : '')} id=\"password\" name=\"password\" placeholder=\"Enter your password\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.password} />\r\n                                    <ErrorMessage name=\"password\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"confirm_password\" className=\"form-label\">Confirm Password<span className=\"pl-2 text-danger\">*</span></label>\r\n                                    <input type=\"password\" className={'form-control' + (props.errors.confirm_password && props.touched.confirm_password ? ' is-invalid' : '')} id=\"confirm_password\" name=\"confirm_password\" placeholder=\"Re-enter password\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.confirm_password} />\r\n                                    <ErrorMessage name=\"confirm_password\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"dob\" className=\"form-label\">DOB</label>\r\n                                    {/* <input type=\"text\" className=\"form-control\" id=\"dob\" name=\"dob\" placeholder=\"Enter your DOB\" onChange={handleChange} onBlur={handleBlur} /> */}\r\n                                    <div>\r\n                                        <DatePicker id=\"dob\" className={'form-control' + (props.errors.dob && props.touched.dob ? ' is-invalid' : '')} name=\"dob\" maxDate={subYears(new Date(), 17)} onChange={e => onDobDateChange(e, 'dob', props.values, props.setFieldValue)} value={props.values.dob} peekNextMonth showMonthDropdown showYearDropdown dropdownMode=\"select\" />\r\n                                    </div>\r\n                                    <ErrorMessage name=\"dob\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"mobile_number\" className=\"form-label\">Mobile Number<span className=\"pl-2 text-danger\">*</span></label>\r\n                                    <input type=\"text\" className={'form-control' + (props.errors.mobile_number && props.touched.mobile_number ? ' is-invalid' : '')} id=\"mobile_number\" name=\"mobile_number\" placeholder=\"Enter your Mobile number\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.mobile_number} />\r\n                                    <ErrorMessage name=\"mobile_number\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"row g-3 align-items-center\">\r\n                                    <div className=\"col-md-12\">\r\n                                        Telephone Number\r\n                                    </div>\r\n                                    <div className=\"col-auto\">\r\n                                        <label htmlFor=\"std_code\" className=\"\">STD Code</label>\r\n                                        <input type=\"text\" className={'form-control'} id=\"std_code\" name=\"std_code\" placeholder=\"Enter STD code\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.std_code} />\r\n                                        <ErrorMessage name=\"std_code\" component=\"span\" className=\"text-danger\" />\r\n                                    </div>\r\n                                    <div className=\"col-auto\">\r\n                                        <label htmlFor=\"telephone_number\" className=\"\">Phone Number</label>\r\n                                        <input type=\"text\" className={'form-control'} id=\"telephone_number\" name=\"telephone_number\" placeholder=\"Enter phone number\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.telephone_number} />\r\n                                        <ErrorMessage name=\"telephone_number\" component=\"span\" className=\"text-danger\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"address\" className=\"form-label\">Address<span className=\"pl-2 text-danger\">*</span></label>\r\n                                    <textarea className={'form-control' + (props.errors.address && props.touched.address ? ' is-invalid' : '')} id=\"address\" name=\"address\" placeholder=\"Enter address\" rows=\"3\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.address}></textarea>\r\n                                    <ErrorMessage name=\"address\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"mb-2\">\r\n                                    User Type<span className=\"pl-2 text-danger\">*</span>\r\n                                    <ErrorMessage name=\"user_type\" component=\"span\" className=\"text-danger\" />\r\n                                </div>\r\n                                <div className=\"form-check form-check-inline\">\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"user_type\" id=\"user_type_tenant\" value=\"3\"  onChange={props.handleChange} onBlur={props.handleBlur} checked={props.values.user_type == 3 ? true : false} />\r\n                                    <label className=\"form-check-label\" htmlFor=\"user_type_tenant\">Tenant</label>\r\n                                </div>\r\n                                <div className=\"form-check form-check-inline\">\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"user_type\" id=\"user_type_owner\" value=\"2\" onChange={props.handleChange} onBlur={props.handleBlur} checked={props.values.user_type == 2 ? true : false} />\r\n                                    <label className=\"form-check-label\" htmlFor=\"user_type_owner\">Owner</label>\r\n                                </div>\r\n                                <div className=\"mt-2 text-right\">\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">Signup</button>\r\n                                </div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n            }\r\n        </section>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        register: () => {\r\n            dispatch(signup());\r\n        }\r\n    }   \r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Signup);","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AddAssets.js",["239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290"],"import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { Formik, Form, FieldArray, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport DatePicker from \"react-datepicker\";\r\nimport Select from 'react-select';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport { parse, isDate } from \"date-fns\";\r\nimport StepWizard from \"react-step-wizard\";\r\nimport { toast } from 'react-toastify';\r\nimport { ASSET_FORM, ASSET_LOADER, NEW_CITY } from '../../../constants/constants';\r\nimport { createAsset, getAllOptions } from '../../../actions/assetActions';\r\nimport { createCity } from '../../../actions/settingActions';\r\nimport Loader from '../../Loader';\r\nimport AssetAddFormWizzardStep1 from './AssetAddFormWizzardStep1';\r\nimport AssetAddFormWizzardStep2 from './AssetAddFormWizzardStep2';\r\nimport AssetAddFormWizzardStep3 from './AssetAddFormWizzardStep3';\r\nimport AssetAddFormWizzardStep4 from './AssetAddFormWizzardStep4';\r\nimport AssetAddFormWizzardStep5 from './AssetAddFormWizzardStep5';\r\nimport AssetAddFormWizzardStep6 from './AssetAddFormWizzardStep6';\r\nimport AssetAddFormWizzardStep7 from './AssetAddFormWizzardStep7';\r\n\r\nconst onSelectMultipleChange = (value, actionMeta, field, values, setFieldValue) => {\r\n    var loader = field+'_is_loading';\r\n    setFieldValue(loader, true);\r\n    console.log(value, actionMeta);\r\n    let tempValue = [];\r\n    tempValue = values.who_can_contact;\r\n    if(actionMeta.action == \"create-option\" && actionMeta.option.__isNew__) {\r\n        console.log(actionMeta.option.value);\r\n        //Save and select\r\n        //all_options.who_can_contact_options.unshift({label: actionMeta.option.value, value: actionMeta.option.value});\r\n        setFieldValue(loader, false);\r\n    } else if(actionMeta.action == \"select-option\") {\r\n        tempValue.push(actionMeta.option.value);\r\n        setFieldValue(field, tempValue);\r\n        setFieldValue(loader, false);\r\n    } else if(actionMeta.action == \"remove-value\") {\r\n        var removedIndex = tempValue.indexOf(actionMeta.removedValue.value);\r\n        tempValue.splice(removedIndex, 1);\r\n        setFieldValue(field, tempValue);\r\n        setFieldValue(loader, false);\r\n    }\r\n    setFieldValue(loader, false);\r\n};\r\n\r\n\r\n\r\nconst onDobDateChange = (e, field, values, setFieldValue) => {\r\n    var asset_available_on_from = e.getFullYear()+'-'+(e.getMonth() + 1)+'-'+e.getDate();\r\n    setFieldValue(field, asset_available_on_from);\r\n};    \r\n\r\nconst onClickDMYTypes = (e, field, values, setFieldValue) => {\r\n    console.log(e, field, values, setFieldValue);\r\n    setFieldValue(field, e.value);\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        assetState: state.assetState\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getoptions: () => {\r\n            dispatch(getAllOptions());\r\n        },\r\n        addCity: () => {\r\n            dispatch(createCity());\r\n        },\r\n        createNewAsset: () => {\r\n            dispatch(createAsset());\r\n        }\r\n    }   \r\n}\r\n\r\nfunction AddAssets(props) {\r\n    const dispatch = useDispatch();\r\n    const assetState = useSelector((state) => state.assetState)\r\n    const { asset_loader, asset_result } = assetState;\r\n    /* dispatch({type: ALL_OPTIONS, payload: {'te': 'function'}});\r\n    const assetState = useSelector((state) => state.assetState) */\r\n\r\n    const customStyles = {\r\n        singleValue: (provided, state) => {\r\n          const color = state.selectProps.isLoading ? 'white' : 'black';\r\n          return { ...provided, color };\r\n        },\r\n        valueContainer: (provided, state) => {\r\n            const color = state.selectProps.isLoading ? 'white' : 'black';\r\n            return { ...provided, color };\r\n          }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(Object.keys(asset_result).length != 0) {\r\n            console.log('Result ===>'+asset_result);\r\n            if(asset_result.status == 'error') {\r\n                toast.error(asset_result.message, {theme: \"colored\"});\r\n            } else if(asset_result.status == 'success') {\r\n                toast.success(asset_result.message, {theme: \"colored\"});\r\n                //history.push(\"/home\");\r\n            }\r\n        }\r\n    },[asset_result])\r\n\r\n    \r\n    \r\n    if(Object.keys(props.assetState.alloptions).length == 0) {\r\n        props.getoptions();\r\n        console.log(assetState);\r\n    }\r\n\r\n    const onSelectChange = (e, field, values, setFieldValue, loader) => {\r\n        var loader = field+'_is_loading';\r\n        setFieldValue(loader, true);\r\n        if(e.__isNew__) {\r\n            //Save and select\r\n            assetState.alloptions.city_options.push({'label': 'Loading', 'value': 0});\r\n            setFieldValue(field, 0);\r\n            if(field == 'city') {\r\n                dispatch({type:NEW_CITY, payload: e.value});\r\n                props.addCity(e.value);\r\n            }\r\n            \r\n            setTimeout(function() {\r\n                assetState.alloptions.city_options.unshift({'label': e.value, 'value': e.value});\r\n                setFieldValue(loader, false);\r\n                setFieldValue(field, e.value);\r\n                //setFieldValue(field, 0);\r\n            }, 2000);\r\n        } else {\r\n            setFieldValue(field, e.value);\r\n            setFieldValue(loader, false);\r\n        }\r\n    };\r\n    \r\n    /* const onClickRoomsTypes = (e, field, index, values, setFieldValue) => {\r\n        console.log(values);\r\n        setFieldValue(field, e.value);\r\n    }\r\n\r\n    const handleRoomChange = (e, index, field, room, setFieldValue) => {\r\n        setFieldValue(room[field], e.value);\r\n    }; */\r\n\r\n    const initialValues = {\r\n        user_id: 0,\r\n        type_of_asset: 1,\r\n        asset_for: 1,\r\n        asset_name: '',\r\n        door_number: 0,\r\n        address_hint:'',\r\n        street: '',\r\n        nagar: '',\r\n        city: 0,\r\n        city_is_loading: false,\r\n        state: 0,\r\n        state_is_loading: false,\r\n        pincode:0,\r\n        landmark: '',\r\n        number_of_rooms: 0,\r\n        bhk: 0,\r\n        age_of_asset: 0,\r\n        age_of_asset_type: 1,\r\n        asset_main_image: [],\r\n        asset_size_in_length_type: 1,\r\n        asset_size_in_length: 0,\r\n        asset_size_in_width_type: 1,\r\n        asset_size_in_width: 0,\r\n        asset_notes_by_owner: '',\r\n        who_can_contact: [],\r\n        who_can_contact_is_loading: false,\r\n        advance_amount_for_asset:0,\r\n        monthly_rent_for_asset: 0,\r\n        lease_amount_for_asset: 0,\r\n        lease_period_for_asset: 0,\r\n        lease_period_for_asset_type: 1,\r\n        asset_price:0,\r\n        asset_available_on_from: '',\r\n        notice_period_for_vocate_asset: 0,\r\n        notice_period_for_vocate_asset_type: 1,\r\n        asset_status_now: 0,\r\n        asset_status_now_is_loading: false,\r\n        show_my_asset_for_tenants: 1,\r\n\r\n        rooms: []\r\n    };\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        type_of_asset: Yup.number()\r\n            .required('Asset type is required.'),\r\n        asset_for: Yup.number()\r\n            .required('Asset for is required.'),\r\n        asset_name: Yup.string()\r\n            .required('Asset name is required.')\r\n            .min(3, 'Asset name must be minimum 3 characters.')\r\n            .max(50, 'Asset name character must be less than 50 characters.'),\r\n        door_number: Yup.number()\r\n            .when('type_of_asset', {\r\n                is: (type_of_asset, validationSchema) => {\r\n                    if(type_of_asset  != 5 && type_of_asset  != 3 && type_of_asset  != 4) {   //5 => 'Land', 3 => 'Store', 4 => 'Koddon'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Door number is required.').min(1, 'Door number must be valid.')\r\n            }),\r\n        address_hint: Yup.string(),\r\n        street: Yup.string(),\r\n        nagar: Yup.string(),\r\n        city: Yup.number()\r\n            .required('City is required.')\r\n            .min(1, 'City is required.'),\r\n        state: Yup.number()\r\n            .required('State is required.')\r\n            .min(1, 'State is required.'),\r\n        pincode: Yup.number()\r\n            .required('Pincode is required.')\r\n            .min(1, 'Pincode is required.'),\r\n        landmark: Yup.string(),\r\n        number_of_rooms: Yup.number()\r\n            .when('type_of_asset', {\r\n                is: (type_of_asset, validationSchema) => {\r\n                    if(type_of_asset  == 1 || type_of_asset  == 2) {   //1 => 'House', 2 => 'Appartment'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Number of room is required.').min(1, 'Number of room must be valid.').max(20, 'Number of room must be valid.')\r\n            }),\r\n        bhk: Yup.number()\r\n            .when('type_of_asset', {\r\n                is: (type_of_asset, validationSchema) => {\r\n                    if(type_of_asset  == 1 || type_of_asset  == 2) {   //1 => 'House', 2 => 'Appartment'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('BHK is required.').min(1, 'BHK must be valid.').max(20, 'BHK must be valid.')\r\n            }),\r\n        age_of_asset: Yup.number()\r\n            .when('type_of_asset', {\r\n                is: (type_of_asset, validationSchema) => {\r\n                    if(type_of_asset != 5) {  //5 => 'Land'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Age of asset is required.').min(1, 'Age of asset must be valid.').max(50, 'Age of asst must be valid.')\r\n            }),\r\n        age_of_asset_type: Yup.number()\r\n            .when('type_of_asset', {\r\n                is: (type_of_asset, validationSchema) => {\r\n                    if(type_of_asset != 5) {  //5 => 'Land'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Age of asset type is required.')\r\n            }),\r\n        asset_main_image: Yup.array(),\r\n        asset_size_in_length_type: Yup.number(),\r\n        asset_size_in_length: Yup.number(),\r\n        asset_size_in_width_type: Yup.number(),\r\n        asset_size_in_width: Yup.number(),\r\n        asset_notes_by_owner: Yup.string(),\r\n        who_can_contact: Yup.array().min(1, 'Select any one of the tenant type'),\r\n        advance_amount_for_asset: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for == 1) {  //1 => 'Rent'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Asset advance amount is required.').min(100, 'Asset advance amount must be valid.').max(500000, 'Asset advance amount must be valid.')\r\n            }),\r\n        monthly_rent_for_asset: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for == 1) {  //1 => 'Rent'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Asset monthly rent amount is required.').min(100, 'Asset monthly rent amount must be valid.').max(500000, 'Asset monthly rent amount must be valid.')\r\n            }),\r\n        lease_amount_for_asset: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for == 2) { //2 => 'Lease'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Asset lease amount is required.').min(100, 'Asset lease amount must be valid.')\r\n            }),\r\n        lease_period_for_asset: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for == 2) { //2 => 'Lease'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Asset lease period is required.').min(1, 'Asset lease period is required.')\r\n            }),\r\n        lease_period_for_asset_type: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for == 2) { //2 => 'Lease'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Asset lease amount type is required.')\r\n            }),\r\n        asset_price: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for  == 3) {  //3 => 'Sale'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Asset price is required.').min(100, 'Asset price must be valid.')\r\n            }),\r\n        asset_available_on_from: Yup.date().required('Asset available date required.'),\r\n        notice_period_for_vocate_asset: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for == 1) {  //1 => 'Rent'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Notice period to vocate is required.').min(1, 'Notice period to vocate must be valid.').test('notice_period_for_vocate_asset', 'Only numeric allowed.',(value) => Number.isInteger(value))\r\n            }),\r\n        notice_period_for_vocate_asset_type: Yup.number()\r\n            .when('asset_for', {\r\n                is: (asset_for, validationSchema) => {\r\n                    if(asset_for == 1) {  //1 => 'Rent'\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                },\r\n                then: Yup.number().required('Notice period to vocate type is required.')\r\n            }),\r\n        asset_status_now: Yup.number()\r\n            .required('Asset status is required.')\r\n            .min(1, 'Asset status is required.'),\r\n        show_my_asset_for_tenants: Yup.number()\r\n            .required('Show my asset to tenant status is required.'),\r\n        rooms: Yup.array().of(Yup.object().shape({\r\n            room_name: Yup.string()\r\n                .when('type_of_asset', {\r\n                    is: (type_of_asset, validationSchema) => {\r\n                        if(type_of_asset  == 1 || type_of_asset  == 2) {   //1 => 'House', 2 => 'Appartment'\r\n                            return true;\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    then:  Yup.string().required('Room name required.')\r\n                }),\r\n            room_size_in_length: Yup.number()\r\n                .when('type_of_asset', {\r\n                    is: (type_of_asset, validationSchema) => {\r\n                        if(type_of_asset  == 1 || type_of_asset  == 2) {   //1 => 'House', 2 => 'Appartment'\r\n                            return true;\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    then:  Yup.number().required('Room length required.')\r\n                }),\r\n            room_size_in_length_type: Yup.string()\r\n                .when('type_of_asset', {\r\n                    is: (type_of_asset, validationSchema) => {\r\n                        if(type_of_asset  == 1 || type_of_asset  == 2) {   //1 => 'House', 2 => 'Appartment'\r\n                            return true;\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    then:  Yup.string().required('Room length type required.')\r\n                }),\r\n            room_size_in_width: Yup.number()\r\n                .when('type_of_asset', {\r\n                    is: (type_of_asset, validationSchema) => {\r\n                        if(type_of_asset  == 1 || type_of_asset  == 2) {   //1 => 'House', 2 => 'Appartment'\r\n                            return true;\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    then:  Yup.number().required('Room width required.')\r\n                }),\r\n            room_size_in_width_type: Yup.string()\r\n                .when('type_of_asset', {\r\n                    is: (type_of_asset, validationSchema) => {\r\n                        if(type_of_asset  == 1 || type_of_asset  == 2) {   //1 => 'House', 2 => 'Appartment'\r\n                            return true;\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    then:  Yup.string().required('Room width type required.')\r\n                })\r\n        }))\r\n    });\r\n\r\n    let custom = {\r\n        enterLeft: 'animate__backInUp'\r\n    }\r\n\r\n    const onSubmit = (values) => {\r\n        dispatch({\r\n            type: ASSET_FORM,\r\n            payload: values\r\n        });\r\n        props.createNewAsset(values);\r\n    };\r\n\r\n    return (\r\n            <section id=\"AddAssets\">\r\n                {asset_loader == false ? \r\n                <div>\r\n                    <h3>Add Asset</h3>\r\n                    <div className=\"container\">\r\n                        <Formik initialValues={initialValues} /* validationSchema={validationSchema} */ onSubmit={onSubmit}>\r\n                            {({ errors, values, field, touched, setTouched, validateField, setFieldTouched, setValues, setFieldValue, handleChange, handleBlur }) => (\r\n                                <Form>\r\n                                    <pre>\r\n                                        {JSON.stringify(values)}\r\n                                    </pre>\r\n                                \r\n                                    <StepWizard transitions={custom} onStepChange={() => window.scrollTo(0, 0)}>\r\n                                        <AssetAddFormWizzardStep1 formikProps={{ errors, values, field, touched, setTouched, validateField, setFieldTouched, setValues, setFieldValue, handleChange, handleBlur }} all_options={assetState.alloptions} />\r\n                                        <AssetAddFormWizzardStep2 formikProps={{ errors, values, field, touched, setTouched, validateField, setFieldTouched, setValues, setFieldValue, handleChange, handleBlur }} all_options={assetState.alloptions} customStyles={customStyles} onSelectChange={onSelectChange} onSelectMultipleChange={onSelectMultipleChange} />\r\n                                        { (values.type_of_asset == 2 || values.type_of_asset == 1)/* 2 => 'Appartment', 1 => 'House' */ &&\r\n                                            <AssetAddFormWizzardStep3 formikProps={{ errors, values, field, touched, setTouched, validateField, setFieldTouched, setValues, setFieldValue, handleChange, handleBlur }} all_options={assetState.alloptions} onClickDMYTypes={onClickDMYTypes} />\r\n                                        }\r\n                                        <AssetAddFormWizzardStep4 formikProps={{ errors, values, field, touched, setTouched, validateField, setFieldTouched, setValues, setFieldValue, handleChange, handleBlur }} all_options={assetState.alloptions} onClickDMYTypes={onClickDMYTypes} />\r\n                                        <AssetAddFormWizzardStep5 formikProps={{ errors, values, field, touched, setTouched, validateField, setFieldTouched, setValues, setFieldValue, handleChange, handleBlur }} all_options={assetState.alloptions} customStyles={customStyles} onSelectChange={onSelectChange} onSelectMultipleChange={onSelectMultipleChange} onClickDMYTypes={onClickDMYTypes} />\r\n                                        <AssetAddFormWizzardStep6 formikProps={{ errors, values, field, touched, setTouched, validateField, setFieldTouched, setValues, setFieldValue, handleChange, handleBlur }} all_options={assetState.alloptions} customStyles={customStyles} onSelectChange={onSelectChange} onSelectMultipleChange={onSelectMultipleChange} onClickDMYTypes={onClickDMYTypes} onDobDateChange={onDobDateChange} />\r\n                                    </StepWizard>\r\n                                    <div className=\"mb-2 mt-2\">\r\n                                        <button className=\"btn btn-primary\" type=\"submit\">\r\n                                            Submit\r\n                                        </button>\r\n                                    </div>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </div>\r\n                </div>\r\n                : <Loader />}\r\n                \r\n            </section>\r\n    );\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddAssets);","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep1.js",["291","292","293","294","295","296","297","298"],"import React, { useEffect, useState } from 'react';\r\nimport { FieldArray, ErrorMessage } from 'formik';\r\n\r\nfunction AssetAddFormWizzardStep1(props) {\r\n    \r\n    const handleNext = async () => {\r\n        await props.formikProps.setTouched({['type_of_asset']:true, ['asset_for']:true});\r\n        if(props.formikProps.errors.type_of_asset == undefined && props.formikProps.errors.asset_for == undefined) {\r\n            props.nextStep();\r\n        }        \r\n    };\r\n    return (\r\n        <div>\r\n            <h4>Step: {props.currentStep}</h4>\r\n            <FieldArray\r\n                name=\"arrayOfAssetTypes\"\r\n                render={arrayHelpers => (\r\n                    <div className=\"my-2\">\r\n                        <div className=\"mb-2\">\r\n                            Asset/Property Type:\r\n                        </div>\r\n                        {props.all_options.type_of_asset_options.map((type, index) =>\r\n                            (\r\n                                <div className=\"form-check form-check-inline\"  key={index}>\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"type_of_asset\" id={'type_of_asset_'+type.key} value={type.key} onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} checked={props.formikProps.values.type_of_asset == type.key } />\r\n                                    <label className=\"form-check-label\" htmlFor={'type_of_asset_'+type.key}>{type.label}</label>\r\n                                </div>\r\n                            )\r\n                        )}\r\n                        <br/>\r\n                        <ErrorMessage name=\"type_of_asset\" component=\"span\" className=\"text-danger\" />\r\n                    </div>\r\n                )}\r\n            />\r\n            <FieldArray\r\n                name=\"arrayOfAssetFor\"\r\n                render={arrayHelpers => (\r\n                    <div className=\"my-2\">\r\n                        <div className=\"mb-2\">\r\n                            Asset/Property For:\r\n                        </div>\r\n                        {props.all_options.asset_for_options.map((type, index) =>\r\n                            (\r\n                                <div className=\"form-check form-check-inline\"  key={index}>\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"asset_for\" id={'asset_for_options_'+type.key} value={type.key} onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} checked={props.formikProps.values.asset_for == type.key } />\r\n                                    <label className=\"form-check-label\" htmlFor={'asset_for_options_'+type.key}>{type.label}</label>\r\n                                </div>\r\n                            )\r\n                        )}\r\n                        <br/>\r\n                        <ErrorMessage name=\"asset_for\" component=\"span\" className=\"text-danger\" />\r\n                    </div>\r\n                )}\r\n            />\r\n            <div className=\"mt-2\">\r\n                <button type=\"button\" className=\"btn btn-success\" onClick={handleNext}>Next Step</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default AssetAddFormWizzardStep1;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep5.js",["299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316"],"import React from 'react';\r\nimport { ErrorMessage } from 'formik';\r\nimport Dropdown from 'react-dropdown';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport LoadingIndicator from '../common/LoadingIndicator';\r\n\r\n\r\nfunction AssetAddFormWizzardStep5(props) {\r\n    const handleNext = async () => {\r\n        await props.formikProps.setTouched({['who_can_contact']:true, ['advance_amount_for_asset']:true, ['monthly_rent_for_asset']:true, ['lease_amount_for_asset']:true, ['lease_period_for_asset']:true, ['lease_period_for_asset_type']:true, ['asset_price']:true});\r\n        if(props.formikProps.errors.who_can_contact == undefined && props.formikProps.errors.advance_amount_for_asset == undefined && props.formikProps.errors.monthly_rent_for_asset == undefined && props.formikProps.errors.lease_amount_for_asset == undefined && props.formikProps.errors.lease_period_for_asset == undefined && props.formikProps.errors.lease_period_for_asset_type == undefined && props.formikProps.errors.asset_price == undefined) {\r\n            props.nextStep();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h4>Step: {props.currentStep}</h4>\r\n            <div className=\"my-2\">\r\n                <div className=\"my-2\">\r\n                    Who can contacts you:\r\n                </div>\r\n                <CreatableSelect isLoading={props.formikProps.values.who_can_contact_is_loading} isMulti formatCreateLabel={(inputValue) => 'Add or Create \"'+inputValue+'\"'} createOptionPosition=\"first\" className=\"basic-single\" classNamePrefix=\"select\" id=\"who_can_contact\" name=\"who_can_contact\" options={props.all_options.who_can_contact_options} createOptionPosition={\"first\"} onChange={(value, actionMeta) => props.onSelectMultipleChange(value, actionMeta, 'who_can_contact', props.formikProps.values, props.formikProps.setFieldValue)} defaultValue={props.formikProps.values.who_can_contact} components={{LoadingIndicator}} styles={props.customStyles} />\r\n                <ErrorMessage name=\"who_can_contact\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            { props.formikProps.values.asset_for == 1 /*1 => 'Rent' */ &&\r\n                (\r\n                    <div>\r\n                        <div className=\"mb-2\">\r\n                            Advance Amount:\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <span className=\"input-group-text\" id=\"asset_amount_rupees\">Rs.</span>\r\n                            <input type=\"number\" aria-label=\"Advance Amount for Asset\" aria-describedby=\"asset_amount_rupees\" className={'form-control' + (props.formikProps.errors.advance_amount_for_asset && props.formikProps.touched.advance_amount_for_asset ? ' is-invalid' : '')} id=\"advance_amount_for_asset\" name=\"advance_amount_for_asset\" placeholder=\"Enter advance amount for asset\" min=\"0\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.advance_amount_for_asset} />\r\n                        </div>\r\n                        <div className=\"mt-n2 mb-3\">\r\n                            <ErrorMessage name=\"advance_amount_for_asset\" component=\"span\" className=\"text-danger\" />\r\n                        </div>\r\n                        \r\n                        <div className=\"mb-2\">\r\n                            Monthly Rent Amount:\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <span className=\"input-group-text\" id=\"asset_monthly_rupees\">Rs.</span>\r\n                            <input type=\"number\" aria-label=\"Rent Amount for Asset\" aria-describedby=\"asset_monthly_rupees\" className={'form-control' + (props.formikProps.errors.monthly_rent_for_asset && props.formikProps.touched.monthly_rent_for_asset ? ' is-invalid' : '')} id=\"monthly_rent_for_asset\" name=\"monthly_rent_for_asset\" placeholder=\"Enter monthly rent amount for asset\" min=\"0\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.monthly_rent_for_asset} />\r\n                        </div>\r\n                        <div className=\"mt-n2 mb-3\">\r\n                            <ErrorMessage name=\"monthly_rent_for_asset\" component=\"span\" className=\"text-danger\" />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            { props.formikProps.values.asset_for == 2 /*2 => 'Lease' */ &&\r\n                (\r\n                    <div>\r\n                        <div className=\"mb-2\">\r\n                            Lease Amount:\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <span className=\"input-group-text\" id=\"asset_lease_rupees\">Rs.</span>\r\n                            <input type=\"number\" aria-label=\"Lease Amount for Asset\" aria-describedby=\"asset_lease_rupees\" className={'form-control' + (props.formikProps.errors.lease_amount_for_asset && props.formikProps.touched.lease_amount_for_asset ? ' is-invalid' : '')} id=\"lease_amount_for_asset\" name=\"lease_amount_for_asset\" placeholder=\"Enter advance amount for asset\" min=\"0\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.lease_amount_for_asset} />\r\n                            \r\n                        </div>\r\n                        <div className=\"mt-n2 mb-3\">\r\n                            <ErrorMessage name=\"lease_amount_for_asset\" component=\"span\" className=\"text-danger\" />\r\n                        </div>\r\n                        \r\n                        <div className=\"mb-2\">\r\n                            Lease Period:\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <input type=\"number\" className={'form-control' + (props.formikProps.errors.lease_period_for_asset && props.formikProps.touched.lease_period_for_asset ? ' is-invalid' : '')} aria-label=\"Asset lease period\" name=\"lease_period_for_asset\" id=\"lease_period_for_asset\" placeholder=\"Enter asset lease period\" min=\"0\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.lease_period_for_asset} />\r\n                            <Dropdown options={props.all_options.days_month_years_options} onChange={e => props.onClickDMYTypes(e, 'lease_period_for_asset_type', props.formikProps.values, props.formikProps.setFieldValue)} value={props.all_options.days_month_years_options[props.formikProps.values.lease_period_for_asset_type - 1]} placeholder=\"Select period type\" />\r\n                        </div>\r\n                        <div className=\"mt-n2 mb-3\">\r\n                            <ErrorMessage name=\"lease_period_for_asset\" component=\"span\" className=\"text-danger\" />\r\n                            <span> </span>\r\n                            <ErrorMessage name=\"lease_period_for_asset_type\" component=\"span\" className=\"text-danger\" />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            \r\n            { props.formikProps.values.asset_for == 3 /*3 => 'Sale' */ &&\r\n                (\r\n                    <div>\r\n                        <div className=\"mb-2\">\r\n                            Asset Price:\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <span className=\"input-group-text\" id=\"asset_prices\">Rs.</span>\r\n                            <input type=\"number\" aria-label=\"Asset price\" aria-describedby=\"asset_prices\" className={'form-control' + (props.formikProps.errors.asset_price && props.formikProps.touched.asset_price ? ' is-invalid' : '')} id=\"asset_price\" name=\"asset_price\" placeholder=\"Enter asset price\" min=\"0\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.asset_price} />\r\n                            \r\n                        </div>\r\n                        <div className=\"mt-n2 mb-3\">\r\n                            <ErrorMessage name=\"asset_price\" component=\"span\" className=\"text-danger\" />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            <p>\r\n                <button type=\"button\" className=\"btn btn-success\" onClick={handleNext}>Next Step</button>\r\n                <button type=\"button\" className=\"btn btn-info\" onClick={props.previousStep}>Previous</button>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\nexport default AssetAddFormWizzardStep5;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep2.js",["317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337"],"import React from 'react';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport LoadingIndicator from '../common/LoadingIndicator';\r\nimport { FieldArray, ErrorMessage } from 'formik';\r\n\r\n\r\nfunction AssetAddFormWizzardStep2(props) {\r\n    const handleNext = async () => {\r\n        await props.formikProps.setTouched({['asset_name']:true, ['door_number']:true, ['address_hint']:true, ['street']:true, ['nagar']:true, ['city']:true, ['state']:true, ['pincode']:true, ['landmark']:true});\r\n        if(props.formikProps.errors.asset_name == undefined && props.formikProps.errors.door_number == undefined && props.formikProps.errors.address_hint == undefined && props.formikProps.errors.street == undefined && props.formikProps.errors.nagar == undefined && props.formikProps.errors.city == undefined && props.formikProps.errors.state == undefined && props.formikProps.errors.pincode == undefined && props.formikProps.errors.landmark == undefined) {\r\n            props.nextStep();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h4>Step: {props.currentStep}</h4>\r\n            <h4>\r\n            {props.all_options.type_of_asset_options[props.formikProps.values.type_of_asset - 1].label}\r\n            </h4>\r\n\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"asset_name\" className=\"form-label\">Asset Name:</label>\r\n                <input type=\"text\" className={'form-control' + (props.formikProps.errors.asset_name && props.formikProps.touched.asset_name ? ' is-invalid' : '')} id=\"asset_name\" name=\"asset_name\" placeholder=\"Enter your last name\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.asset_name} />\r\n                <ErrorMessage name=\"asset_name\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            \r\n            <div className=\"my-2\">\r\n                Address\r\n            </div>\r\n\r\n            { props.formikProps.values.type_of_asset != 5 /*5 => 'Land' */ && (\r\n                    <div>\r\n                        <div className=\"my-2\">\r\n                            Door No.\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <span className=\"input-group-text\" id=\"door_numbers\">No.</span>\r\n                            <input type=\"number\" className=\"form-control max-wid-5\" placeholder=\"Enter door number\" min=\"0\" id=\"door_number\"  name=\"door_number\" aria-label=\"Door Number\" aria-describedby=\"door_numbers\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.door_number} />\r\n                            <input type=\"text\" className={'form-control ml-3' + (props.formikProps.errors.address_hint && props.formikProps.touched.address_hint ? ' is-invalid' : '')} id=\"address_hint\" name=\"address_hint\" placeholder=\"\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.address_hint} />\r\n                        </div>\r\n                        <div className=\"mt-n2 mb-3\">\r\n                            <ErrorMessage name=\"door_number\" component=\"span\" className=\"text-danger\" />\r\n                            <ErrorMessage name=\"address_hint\" component=\"span\" className=\"text-danger\" />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            \r\n            { props.formikProps.values.type_of_asset == 5 /*5 => 'Land' */ && (\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"address_hint\">Hint</label>\r\n                        <input type=\"text\" className={'form-control' + (props.formikProps.errors.address_hint && props.formikProps.touched.address_hint ? ' is-invalid' : '')} id=\"address_hint\" name=\"address_hint\" placeholder=\"\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.address_hint} />\r\n                        <ErrorMessage name=\"address_hint\" component=\"span\" className=\"text-danger\" />\r\n                    </div>                                        \r\n                )\r\n            }\r\n\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"street\" className=\"form-label\">Street:</label>\r\n                <input type=\"text\" className={'form-control' + (props.formikProps.errors.street && props.formikProps.touched.street ? ' is-invalid' : '')} id=\"street\" name=\"street\" placeholder=\"Enter street\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.street} />\r\n                <ErrorMessage name=\"street\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            \r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"nagar\" className=\"form-label\">Nagar:</label>\r\n                <input type=\"text\" className={'form-control' + (props.formikProps.errors.nagar && props.formikProps.touched.nagar ? ' is-invalid' : '')} id=\"nagar\" name=\"nagar\" placeholder=\"Enter nagar\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.nagar} />\r\n                <ErrorMessage name=\"nagar\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            \r\n            <div className=\"my-2\">\r\n                <div className=\"my-2\">\r\n                    City:\r\n                </div>\r\n                <CreatableSelect isLoading={props.formikProps.values.city_is_loading} formatCreateLabel={(inputValue) => 'Add or Create \"'+inputValue+'\"'} className=\"basic-single\" classNamePrefix=\"select\" id=\"city\" name=\"city\" options={props.all_options.city_options} onChange={e => props.onSelectChange(e, 'city', props.formikProps.values, props.formikProps.setFieldValue)} defaultValue={props.formikProps.values.city} components={{LoadingIndicator}} styles={props.customStyles} />\r\n                <ErrorMessage name=\"city\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            \r\n            <div className=\"my-2\">\r\n                <div className=\"my-2\">\r\n                    State:\r\n                </div>\r\n                <CreatableSelect isLoading={props.formikProps.values.state_is_loading} formatCreateLabel={(inputValue) => 'Add or Create \"'+inputValue+'\"'} className=\"basic-single\" classNamePrefix=\"select\" id=\"state\" name=\"state\" options={props.all_options.state_options} onChange={e => props.onSelectChange(e, 'state', props.formikProps.values, props.formikProps.setFieldValue)} defaultValue={props.formikProps.values.state} components={{LoadingIndicator}} styles={props.customStyles} />\r\n                <ErrorMessage name=\"state\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            \r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"pincode\" className=\"form-label\">Pincode:</label>\r\n                <input type=\"number\" className={'form-control' + (props.formikProps.errors.pincode && props.formikProps.touched.pincode ? ' is-invalid' : '')} min=\"0\" id=\"pincode\" name=\"pincode\" placeholder=\"Enter pincode\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.pincode} />\r\n                <ErrorMessage name=\"pincode\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            \r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"landmark\" className=\"form-label\">Landmark</label>\r\n                <textarea className=\"form-control\" id=\"landmark\" name=\"landmark\" rows=\"3\"  onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.landmark}></textarea>\r\n                <ErrorMessage name=\"landmark\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n\r\n            <p>\r\n                <button type=\"button\" className=\"btn btn-success\" onClick={handleNext}>Next Step</button>\r\n                <button type=\"button\" className=\"btn btn-info\" onClick={props.previousStep}>Previous</button>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\nexport default AssetAddFormWizzardStep2;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep3.js",["338","339","340","341","342","343","344","345","346","347"],"import React, { useEffect } from 'react';\r\nimport Dropdown from 'react-dropdown';\r\nimport { ErrorMessage } from 'formik';\r\n\r\nfunction AssetAddFormWizzardStep3(props) {\r\n    const handleNext = async () => {\r\n        await props.formikProps.setTouched({['number_of_rooms']:true, ['bhk']:true, ['age_of_asset']:true, ['age_of_asset_type']:true});\r\n        console.log(props);\r\n        if(props.formikProps.errors.number_of_rooms == undefined && props.formikProps.errors.bhk == undefined && props.formikProps.errors.age_of_asset == undefined && props.formikProps.errors.age_of_asset_type == undefined) {\r\n            props.nextStep();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h4>Step: {props.currentStep}</h4>\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"number_of_rooms\" className=\"form-label\">Number of rooms:</label>\r\n                <input type=\"number\" className={'form-control' + (props.formikProps.errors.number_of_rooms && props.formikProps.touched.number_of_rooms ? ' is-invalid' : '')} min=\"0\" id=\"number_of_rooms\" name=\"number_of_rooms\" placeholder=\"Enter number of rooms\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.number_of_rooms} />\r\n                <ErrorMessage name=\"number_of_rooms\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n\r\n            <div className=\"mb-2\">\r\n                BHK\r\n            </div>\r\n            <div className=\"input-group\">\r\n                <input type=\"number\" className={'form-control' + (props.formikProps.errors.bhk && props.formikProps.touched.bhk ? ' is-invalid' : '')} id=\"bhk\" name=\"bhk\" placeholder=\"BHK\" aria-label=\"BHK\" aria-describedby=\"bhks\" min=\"0\" placeholder=\"Enter BHK\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.bhk} />\r\n                <span className=\"input-group-text\" id=\"bhks\">BHK</span>\r\n            </div>\r\n            <div className=\"mt-n2 mb-3\">\r\n                <ErrorMessage name=\"bhk\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            \r\n\r\n            <div className=\"mb-2\">\r\n                Age of Asset:\r\n            </div>\r\n            <div className=\"input-group\">    \r\n                <input type=\"number\" className={'form-control' + (props.formikProps.errors.age_of_asset && props.formikProps.touched.age_of_asset ? ' is-invalid' : '')} aria-label=\"Asset age\" min=\"0\" name=\"age_of_asset\" id=\"age_of_asset\" placeholder=\"Enter asset age\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.age_of_asset} />\r\n                <Dropdown options={props.all_options.days_month_years_options} onChange={e => props.onClickDMYTypes(e, 'age_of_asset_type', props.formikProps.values, props.formikProps.setFieldValue)} value={props.all_options.days_month_years_options[props.formikProps.values.age_of_asset_type - 1]} placeholder=\"Select period type\" />\r\n            </div>\r\n            <div className=\"mt-n2 mb-3\">\r\n                <ErrorMessage name=\"age_of_asset\" component=\"span\" className=\"text-danger\" />\r\n                <span> </span>\r\n                <ErrorMessage name=\"age_of_asset_type\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n\r\n            <p>\r\n                <button type=\"button\" className=\"btn btn-success\" onClick={handleNext}>Next Step</button>\r\n                <button type=\"button\" className=\"btn btn-info\" onClick={props.previousStep}>Previous</button>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\nexport default AssetAddFormWizzardStep3;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep4.js",["348","349","350","351","352","353","354","355","356","357","358","359","360"],"import React from 'react';\r\nimport FileUploadComponent from '../common/FileUploadComponent';\r\nimport Dropdown from 'react-dropdown';\r\nimport { ErrorMessage } from 'formik';\r\n\r\n\r\nfunction AssetAddFormWizzardStep4(props) {\r\n    const handleNext = async () => {\r\n        await props.formikProps.setTouched({['asset_main_image']:true, ['asset_size_in_width']:true, ['asset_size_in_width_type']:true, ['asset_size_in_length']:true, ['asset_size_in_length_type']:true, ['asset_notes_by_owner']:true});\r\n        console.log(props);\r\n        if(props.formikProps.errors.asset_main_image == undefined && props.formikProps.errors.asset_size_in_width == undefined && props.formikProps.errors.asset_size_in_width_type == undefined && props.formikProps.errors.asset_size_in_length == undefined && props.formikProps.errors.asset_size_in_length_type == undefined && props.formikProps.errors.asset_notes_by_owner == undefined) {\r\n            props.nextStep();\r\n        }\r\n    };\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h4>Step: {props.currentStep}</h4>\r\n            <div className=\"mb-3\">\r\n                {/* <FileUploadComponent maxFiles=\"1\" fileTypes=\".jpeg,.png\" setField={props.formikProps} fieldName=\"asset_main_image\" /> */}\r\n\r\n                {/* <label htmlFor=\"asset_main_image\" className=\"form-label\">Asset Image</label>\r\n                <input id=\"asset_main_image\" name=\"asset_main_image\" type=\"file\" onChange={(event) => { props.formikProps.setFieldValue(\"asset_main_image\", event.currentTarget.files[0]); }} className=\"form-control\" />\r\n                <ErrorMessage name=\"asset_main_image\" component=\"span\" className=\"text-danger\" /> */}\r\n            </div>\r\n            \r\n            <div className=\"mb-2\">\r\n                Asset width:\r\n            </div>\r\n            <div className=\"input-group mb-3\">\r\n                <input type=\"number\" className={'form-control' + (props.formikProps.errors.asset_size_in_width && props.formikProps.touched.asset_size_in_width ? ' is-invalid' : '')} aria-label=\"Asset width\" name=\"asset_size_in_width\" id=\"asset_size_in_width\" min=\"0\" placeholder=\"Enter asset width\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.asset_size_in_width} />\r\n                <Dropdown options={props.all_options.asset_length_width_options} onChange={e => props.onClickDMYTypes(e, 'asset_size_in_width_type', props.formikProps.values, props.formikProps.setFieldValue)} value={props.all_options.asset_length_width_options[props.formikProps.values.asset_size_in_width_type - 1]} placeholder=\"Select unit\" />\r\n                <ErrorMessage name=\"asset_size_in_width\" component=\"span\" className=\"text-danger\" />\r\n                <ErrorMessage name=\"asset_size_in_width_type\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            \r\n            <div className=\"mb-2\">\r\n                Asset Length:\r\n            </div>\r\n            <div className=\"input-group mb-3\">\r\n                <input type=\"number\" className={'form-control' + (props.formikProps.errors.asset_size_in_length && props.formikProps.touched.asset_size_in_length ? ' is-invalid' : '')} aria-label=\"Asset length\" name=\"asset_size_in_length\" id=\"asset_size_in_length\" min=\"0\" placeholder=\"Enter asset length\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.asset_size_in_length} />\r\n                <Dropdown options={props.all_options.asset_length_width_options} onChange={e => props.onClickDMYTypes(e, 'asset_size_in_length_type', props.formikProps.values, props.formikProps.setFieldValue)} value={props.all_options.asset_length_width_options[props.formikProps.values.asset_size_in_length_type - 1]} placeholder=\"Select unit\" />\r\n                <ErrorMessage name=\"asset_size_in_length\" component=\"span\" className=\"text-danger\" />\r\n                <ErrorMessage name=\"asset_size_in_length_type\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            \r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"asset_notes_by_owner\" className=\"form-label\">Notes or hints about asset:</label>\r\n                <textarea className=\"form-control\" id=\"asset_notes_by_owner\" name=\"asset_notes_by_owner\" rows=\"3\"  onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.asset_notes_by_owner}></textarea>\r\n                <ErrorMessage name=\"asset_notes_by_owner\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n\r\n            <p>\r\n                <button type=\"button\" className=\"btn btn-success\" onClick={handleNext}>Next Step</button>\r\n                <button type=\"button\" className=\"btn btn-info\" onClick={props.previousStep}>Previous</button>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\nexport default AssetAddFormWizzardStep4;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep6.js",["361","362","363","364","365","366","367","368","369","370","371","372","373"],"import React from 'react';\r\nimport { FieldArray, ErrorMessage } from 'formik';\r\nimport Dropdown from 'react-dropdown';\r\nimport DatePicker from \"react-datepicker\";\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport LoadingIndicator from '../common/LoadingIndicator';\r\n\r\n\r\nfunction AssetAddFormWizzardStep6(props) {\r\n    const handleNext = async () => {\r\n        await props.formikProps.setTouched({['asset_available_on_from']:true, ['notice_period_for_vocate_asset']:true, ['notice_period_for_vocate_asset_type']:true, ['asset_status_now']:true, ['show_my_asset_for_tenants']:true});\r\n        console.log(props);\r\n        if(props.formikProps.errors.asset_available_on_from == undefined && props.formikProps.errors.notice_period_for_vocate_asset == undefined && props.formikProps.errors.notice_period_for_vocate_asset_type == undefined && props.formikProps.errors.asset_status_now == undefined && props.formikProps.errors.show_my_asset_for_tenants == undefined) {\r\n            props.nextStep();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h4>Step: {props.currentStep}</h4>    \r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"dob\" className=\"form-label\">Asset available on from:</label>\r\n                <div>\r\n                    <DatePicker id=\"asset_available_on_from\" className={'form-control' + (props.formikProps.errors.asset_available_on_from && props.formikProps.touched.asset_available_on_from ? ' is-invalid' : '')} name=\"asset_available_on_from\" minDate={new Date()} onChange={e => props.onDobDateChange(e, 'asset_available_on_from', props.formikProps.values, props.formikProps.setFieldValue)} value={props.formikProps.values.asset_available_on_from} />\r\n                </div>\r\n                <ErrorMessage name=\"asset_available_on_from\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n            \r\n\r\n            { props.formikProps.values.asset_for == 1 /*1 => 'Rent' */ &&\r\n                (\r\n                    <div>\r\n                        <div className=\"mb-2\">\r\n                            Notice period for vocate asset:\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <input type=\"number\" className={'form-control' + (props.formikProps.errors.notice_period_for_vocate_asset && props.formikProps.touched.notice_period_for_vocate_asset ? ' is-invalid' : '')} aria-label=\"Asset notice period for vocate\" name=\"notice_period_for_vocate_asset\" id=\"notice_period_for_vocate_asset\"  min=\"0\" placeholder=\"Enter asset's notice period for vocate\" onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.notice_period_for_vocate_asset} />\r\n                            <Dropdown options={props.all_options.days_month_years_options} onChange={e => props.onClickDMYTypes(e, 'notice_period_for_vocate_asset_type', props.formikProps.values, props.formikProps.setFieldValue)} value={props.all_options.days_month_years_options[props.formikProps.values.notice_period_for_vocate_asset_type - 1]} placeholder=\"Select period type\" />\r\n                        </div>\r\n                        <div className=\"mt-n2 mb-3\">\r\n                            <ErrorMessage name=\"notice_period_for_vocate_asset\" component=\"span\" className=\"text-danger\" />\r\n                            <span> </span>\r\n                            <ErrorMessage name=\"notice_period_for_vocate_asset_type\" component=\"span\" className=\"text-danger\" />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            <div className=\"my-2\">\r\n                <div className=\"my-2\">\r\n                    Asset status now:\r\n                </div>\r\n                <CreatableSelect isLoading={props.formikProps.values.asset_status_now_is_loading} formatCreateLabel={(inputValue) => 'Add or Create \"'+inputValue+'\"'} className=\"basic-single\" classNamePrefix=\"select\" id=\"asset_status_now\" name=\"asset_status_now\" options={props.all_options.asset_status_now_options} onChange={e => props.onSelectChange(e, 'asset_status_now', props.formikProps.values, props.formikProps.setFieldValue)} defaultValue={props.formikProps.values.asset_status_now} components={{LoadingIndicator}} styles={props.customStyles} />\r\n                <ErrorMessage name=\"asset_status_now\" component=\"span\" className=\"text-danger\" />\r\n            </div>\r\n\r\n            <FieldArray\r\n                name=\"arrayShowMyAssetForTenantsTypes\"\r\n                render={arrayHelpers => (\r\n                    <div className=\"my-2\">\r\n                        <div className=\"mb-2\">\r\n                            Can we show your asset show to tenants?\r\n                        </div>\r\n                        {props.all_options.show_my_asset_for_tenants_options.map((type, index) =>\r\n                            (\r\n                                <div className=\"form-check form-check-inline\"  key={index}>\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"show_my_asset_for_tenants\" id={'show_my_asset_for_tenants_'+type.key} value={type.key} onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} checked={props.formikProps.values.show_my_asset_for_tenants == type.key } />\r\n                                    <label className=\"form-check-label\" htmlFor={'show_my_asset_for_tenants_'+type.key}>{type.label}</label>\r\n                                </div>\r\n                            )\r\n                        )}\r\n                        <ErrorMessage name=\"show_my_asset_for_tenants\" component=\"span\" className=\"text-danger\" />\r\n                    </div>\r\n                )}\r\n            />\r\n\r\n            <p>\r\n                {/* <button type=\"button\" className=\"btn btn-success\" onClick={handleNext}>Next Step</button> */}\r\n                <button type=\"button\" className=\"btn btn-info\" onClick={props.previousStep}>Previous</button>\r\n            </p>\r\n            {/* <div className=\"mb-2 mt-2\">\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                    Submit\r\n                </button>\r\n            </div> */}\r\n        </div>\r\n    );\r\n}\r\nexport default AssetAddFormWizzardStep6;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\assets\\AssetAddFormWizzardStep7.js",["374","375","376"],"import React from 'react';\r\nimport { Field, FieldArray, ErrorMessage } from 'formik';\r\nimport Dropdown from 'react-dropdown';\r\nimport FileUploadComponent from '../common/FileUploadComponent';\r\nimport { isNumber } from '../../../commonFunctions/Validations';\r\n\r\n\r\nfunction AssetAddFormWizzardStep7(props) {\r\n    const handleNext = async () => {\r\n        props.formikProps.values.rooms.map((value, key) => {\r\n            console.log(value, key);\r\n            if(value.room_name == '') {\r\n                let error_name = document.getElementById(\"error.rooms[\"+key+\"].room_name\");\r\n                error_name.innerHTML = \"Name required\";\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h4>Step: {props.currentStep}</h4>            \r\n            <FieldArray\r\n                name=\"rooms\"\r\n                render={arrayHelpers => (\r\n                <div>\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => arrayHelpers.push({ asset_id:0, room_name: '', room_size_in_length:0, room_size_in_length_type:'sq.ft.', room_size_in_width:0, room_size_in_width_type:'sq.ft.', room_image:'' })} >Add Rooms</button>\r\n                    {props.formikProps.values.rooms.map((room, index) => (\r\n                        <div key={index}>\r\n                            <div className=\"mb-2\">\r\n                                <label htmlFor={`rooms[${index}].room_name`}>Room Name</label>\r\n                                <Field type=\"text\" className=\"form-control\" id={`rooms[${index}].room_name`} name={`rooms[${index}].room_name`} onChange={props.formikProps.handleChange} onBlur={props.formikProps.handleBlur} value={props.formikProps.values.rooms[index].room_name} />\r\n                                <span className=\"text-danger\" id={`error.rooms[${index}].room_name`}></span>\r\n                            </div>\r\n\r\n                            <div className=\"mb-2\">\r\n                                <FileUploadComponent maxFiles=\"4\" fileTypes=\".jpeg,.png\" setField={props.formikProps} fieldName={`rooms[${index}].room_images`} />\r\n                            </div>\r\n\r\n                            <div className=\"mb-2\">\r\n                                Room Length:\r\n                            </div>\r\n                            <div className=\"input-group mb-3\">\r\n                                <Field type=\"number\" className=\"form-control\" onChange={isNumber} id={`rooms[${index}].room_size_in_length`} name={`rooms[${index}].room_size_in_length`} />\r\n                                <Dropdown options={props.all_options.asset_length_width_options} id={`rooms[${index}].room_size_in_length_type`} name={`rooms[${index}].room_size_in_length_type`} onChange={e => props.onClickRoomsTypes(e, `rooms[${index}].room_size_in_length_type`, index, props.formikProps.values, props.formikProps.setFieldValue)} value={props.formikProps.values.rooms[index].room_size_in_length_type} placeholder=\"Select unit\" />\r\n                            </div>\r\n                            \r\n                            <div className=\"mb-2\">\r\n                                Room Width:\r\n                            </div>\r\n                            <div className=\"input-group mb-3\">\r\n                                <Field type=\"number\" className=\"form-control\" id={`rooms[${index}].room_size_in_width`} name={`rooms[${index}].room_size_in_width`} />\r\n                                <Dropdown options={props.all_options.asset_length_width_options} id={`rooms[${index}].room_size_in_width_type`} name={`rooms[${index}].room_size_in_width_type`} onChange={e => props.onClickRoomsTypes(e, `rooms[${index}].room_size_in_width_type`, index, props.formikProps.values, props.formikProps.setFieldValue)} value={props.formikProps.values.rooms[index].room_size_in_width_type} placeholder=\"Select unit\" />\r\n                            </div>\r\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={() => arrayHelpers.remove(index)}>Remove</button>\r\n                        </div>\r\n                    ))}                       \r\n                </div>\r\n                )}\r\n            />\r\n            \r\n            <p>\r\n                <button type=\"button\" className=\"btn btn-success\" onClick={handleNext}>Next Step</button>\r\n                <button type=\"button\" className=\"btn btn-info\" onClick={props.previousStep}>Previous</button>\r\n            </p>\r\n            \r\n        </div>\r\n    );\r\n}\r\nexport default AssetAddFormWizzardStep7;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\actions\\assetActions.js",["377","378","379"],"import axios from 'axios';\r\nimport { ALL_OPTIONS, ASSET_LOADER, ASSET_RESULT } from '../constants/constants';\r\nimport {\r\n    DAYS_MONTH_YEARS_OPTIONS,\r\n    TYPE_OF_ASSET_OPTIONS,\r\n    ASSET_LENGTH_WIDTH_OPTIONS,\r\n    SHOW_MY_ASSET_FOR_TENANTS_OPTIONS,\r\n    ASSET_FOR_OPTIONS,\r\n    CITY_OPTIONS,\r\n    STATE_OPTIONS,\r\n    WHO_CAN_CONTACT_OPTIONS,\r\n    ASSET_STATUS_NOW_OPTIONS,\r\n    LIKE_OR_DISLIKE_OPTIONS,\r\n    IS_PROPOSAL_CANCELLED_OPTIONS\r\n} from '../config/globalConstant';\r\nimport { ASSET_CREATE, GET_OPTIONS } from '../constants/Apiconstants';\r\n\r\nexport const getAllOptions = () => async (dispatch) => {\r\n    const all_options = {\r\n        days_month_years_options: DAYS_MONTH_YEARS_OPTIONS,\r\n        type_of_asset_options: TYPE_OF_ASSET_OPTIONS,\r\n        asset_for_options: ASSET_FOR_OPTIONS,\r\n        /* city_options: CITY_OPTIONS,\r\n        state_options: STATE_OPTIONS,\r\n        who_can_contact_options: WHO_CAN_CONTACT_OPTIONS, */\r\n        asset_status_now_options: ASSET_STATUS_NOW_OPTIONS,\r\n        show_my_asset_for_tenants_options: SHOW_MY_ASSET_FOR_TENANTS_OPTIONS,\r\n        like_or_dislike_options: LIKE_OR_DISLIKE_OPTIONS,\r\n        is_proposal_cancelled_options: IS_PROPOSAL_CANCELLED_OPTIONS,\r\n        asset_length_width_options: ASSET_LENGTH_WIDTH_OPTIONS\r\n    };\r\n\r\n    let city_state_tenant_options;\r\n    try {\r\n        const { data } = await axios.get(\r\n            GET_OPTIONS\r\n        );\r\n        city_state_tenant_options = data.data;\r\n        all_options[city_state_tenant_options[0]._id] = city_state_tenant_options[0].options;\r\n        all_options[city_state_tenant_options[1]._id] = city_state_tenant_options[1].options;\r\n        all_options[city_state_tenant_options[2]._id] = city_state_tenant_options[2].options;\r\n        dispatch({type: ALL_OPTIONS, payload: all_options});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n    //console.log('final', all_options);\r\n\r\n    \r\n}\r\n\r\nexport const createAsset = (assetValues) => async (dispatch, getState) => {\r\n    const state = getState();\r\n    const { asset_form } =  state.assetState;\r\n    console.log('Actions ===>'+JSON.stringify(asset_form));\r\n    try {\r\n        const { data } = await axios.post(\r\n            ASSET_CREATE,\r\n            asset_form\r\n        );\r\n        dispatch({type:ASSET_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n        let tempData = { status: 'error', message: 'Something went wrong', 'error': error  };\r\n        dispatch({type:ASSET_RESULT, payload: tempData});\r\n    }\r\n    \r\n    dispatch({\r\n        type: ASSET_LOADER\r\n    });\r\n}","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\actions\\userActions.js",["380","381","382"],"import axios from 'axios';\r\nimport { USER_LOADER, SIGNUP_RESULT, SIGNUP_ERROR, LOGIN_FORM_RESULT } from '../constants/constants';\r\nimport { USERSIGNUP, USER_LOGIN } from '../constants/Apiconstants';\r\nimport { CUSTOM_ERRORS } from '../config/globalConstant';\r\n\r\n/* const config = {\r\n    headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Content-Type': 'application/json'\r\n    }\r\n} */\r\n\r\naxios.interceptors.request.use(function (config) {\r\n    config.headers['Authorization'] = `Bearer ${(localStorage.getItem(\"token\")? localStorage.getItem(\"token\") : '')}`;\r\n    config.headers['Content-Type'] = 'application/json';\r\n    return config;\r\n}, null, { synchronous: true });\r\n\r\nexport const signup = () => async (dispatch, getState) => {\r\n    const state = getState();\r\n    const { userState } = state;\r\n    try {\r\n        const { data } = await axios.post(\r\n            USERSIGNUP,\r\n            userState.signup_form\r\n        );\r\n        console.log('Try ==>'+JSON.stringify(data));\r\n        dispatch({type:SIGNUP_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n        let tempData = { status: 'error', message: 'Something went wrong', 'error': error  };\r\n        dispatch({type:SIGNUP_RESULT, payload: tempData});\r\n    }\r\n}\r\n\r\nexport const login = () => async (dispatch, getState) => {\r\n    const state = getState();\r\n    const { userState } = state;\r\n    try {\r\n        const { data } = await axios.post(\r\n            USER_LOGIN,\r\n            userState.login_form\r\n        );\r\n        console.log('Try ==>'+JSON.stringify(data));\r\n        dispatch({type:LOGIN_FORM_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n        let tempData = { status: 'error', message: 'Something went wrong', 'error': error  };\r\n        dispatch({type:LOGIN_FORM_RESULT, payload: tempData});\r\n    }   \r\n}","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\common\\LoadingIndicator.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\common\\FileUploadComponent.js",["383","384","385","386","387","388","389","390","391"],"import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch, connect }  from 'react-redux';\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\n\r\nconst thumbsContainer = {\r\n  display: 'flex',\r\n  flexDirection: 'row',\r\n  flexWrap: 'wrap',\r\n  marginTop: 16\r\n};\r\n\r\nconst thumb = {\r\n  display: 'inline-flex',\r\n  borderRadius: 2,\r\n  border: '1px solid #eaeaea',\r\n  marginBottom: 8,\r\n  marginRight: 8,\r\n  width: 100,\r\n  height: 100,\r\n  padding: 4,\r\n  boxSizing: 'border-box'\r\n};\r\n\r\nconst thumbInner = {\r\n  display: 'flex',\r\n  minWidth: 0,\r\n  overflow: 'hidden'\r\n};\r\n\r\nconst img = {\r\n  display: 'block',\r\n  width: 'auto',\r\n  height: '100%'\r\n};\r\n\r\n\r\nfunction FileUploadComponent(props) {\r\n  \r\n  const userState = useSelector((state) => state.userState);\r\n  const { signup_form } = userState;\r\n\r\n  let intialFiles = [];\r\n  if(signup_form != undefined && signup_form.files.length > 0 && intialFiles.length == 0) {\r\n    intialFiles = signup_form.files;\r\n  }\r\n\r\n  const [files, setFiles] = useState(intialFiles);\r\n  const [filesData, setFilesData] = useState([]);\r\n\r\n  /* if(signup_form != undefined && signup_form.files.length > 0 && files.length == 0) {\r\n    setFiles(props.preview.map(file => Object.assign(file, {\r\n      preview: URL.createObjectURL(file)\r\n    })));\r\n    //console.log(props.preview)\r\n  } */\r\n\r\n    /* console.log(files.length);\r\n    if(files.length == 0) {\r\n      console.log('Test');\r\n      if(signup_form != undefined && signup_form.files != undefined) {\r\n      }\r\n    } */\r\n\r\n  \r\n    \r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader()\r\n      reader.onabort = () => console.log('file reading was aborted')\r\n      reader.onerror = () => console.log('file reading has failed')\r\n      reader.onloadend = () => {\r\n      // Do whatever you want with the file contents\r\n        const binaryStr = reader.result\r\n        setFiles(acceptedFiles.map(file => Object.assign(file, {\r\n          preview: URL.createObjectURL(file)\r\n        })));\r\n        \r\n        setFilesData(filesData.push(binaryStr));\r\n        props.setField.setFieldValue(props.fieldName, acceptedFiles)\r\n        console.log(file);\r\n      }\r\n      reader.readAsText(file);\r\n    })\r\n  }, []);\r\n  const {getRootProps, getInputProps, acceptedFiles, fileRejections} = useDropzone({noDrag: true, multiple: true, maxSize: 9000000, onDrop, maxFiles:props.maxFiles, accept:props.fileTypes });\r\n  const acceptedFileItems = files.map(file => (\r\n    <div style={thumb} key={file.name}>\r\n      <div style={thumbInner}>\r\n        <img\r\n          src={file.preview}\r\n          style={img}\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n  const fileRejectionItems = fileRejections.map(({ file, errors }) => (\r\n    <li key={file.path} className=\"text-danger\">\r\n      {file.path} - {file.size} bytes\r\n      <ul>\r\n        {errors.map(e => (\r\n          <li key={e.code}>{e.message}</li>\r\n        ))}\r\n      </ul>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      <div {...getRootProps({className: 'dropzone'})}>\r\n        <button type=\"button\" className=\"btn btn-sm btn-primary\">Upload File</button>\r\n        <input {...getInputProps()} />\r\n      </div>\r\n      <aside>\r\n        <h4>Files</h4>\r\n        <ul>{acceptedFileItems}</ul>\r\n        <ul>{fileRejectionItems}</ul>\r\n      </aside>\r\n    </section>\r\n  );\r\n}\r\nexport default FileUploadComponent;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\constants\\Apiconstants.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\commonFunctions\\Validations.js",["392"],"export function isNumber(evt) {\r\n    var iKeyCode = (evt.which) ? evt.which : evt.keyCode;\r\n    if (iKeyCode != 46 && iKeyCode > 31 && (iKeyCode < 48 || iKeyCode > 57))\r\n        return false;\r\n    return true;\r\n}\r\n\r\nexport function validateSpecialCharacters() {\r\n    var regex = /^[A-Za-z0-9 ]+$/\r\n    //Validate TextBox value against the Regex.\r\n    var isValid = regex.test(document.getElementById(\"txtName\").value);\r\n    if (!isValid) {\r\n        alert(\"Contains Special Characters.\");\r\n    } else {\r\n        alert(\"Does not contain Special Characters.\");\r\n    }\r\n\r\n    return isValid;\r\n}","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\config\\globalConstant.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\settings\\BulkDataInsert.js",["393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408"],"import React from 'react';\r\nimport Select from 'react-select';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { useLocation, useHistory } from 'react-router';\r\nimport { CUSTOM_STYLES, BULK_DATA_INSERT_TYPES } from '../../../config/globalConstant';\r\nimport LoadingIndicator from '../common/LoadingIndicator';\r\nimport Loader from '../../Loader';\r\nimport { getAllOptions } from '../../../actions/assetActions';\r\nimport { bulkInsert, createSingleOption, dynamicOptionMerge, resetResult } from '../../../actions/settingActions';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n\r\nclass BulkDataInsert extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state={\r\n            type_of_data_to_insert: 0,\r\n            type_options: [],\r\n            default_type_option: 0,\r\n            bulk_data: \"\",\r\n            error_msg: \"\",\r\n            bulk_loader:false,\r\n            loader: false\r\n        }\r\n\r\n        this.onSelectDataType.bind(this);\r\n        this.onSelectOptions.bind(this);\r\n        this.handleBulkData.bind(this);\r\n        this.insertBulkData.bind(this);\r\n        this.toUniqueArray.bind(this);\r\n        \r\n    }\r\n    componentDidUpdate() {\r\n        if(this.props.settingState.bulk_result != undefined && Object.keys(this.props.settingState.bulk_result).length != 0) {\r\n            if(this.props.settingState.bulk_result.status == 'error') {\r\n                toast.error(this.props.settingState.bulk_result.message, {theme: \"colored\"});\r\n            } else {\r\n                if(this.props.settingState.bulk_result.result != undefined) {\r\n                    let pushValue = {\r\n                        option: {\r\n                            label: this.props.settingState.bulk_result.result.city_name,\r\n                            value: this.props.settingState.bulk_result.result._id\r\n                        },\r\n                        fieldType: this.state.type_of_data_to_insert\r\n                    };\r\n                    this.props.dynamicOptionMerge(pushValue);\r\n                    this.setState({default_type_option: pushValue.option});\r\n                }\r\n                toast.success(this.props.settingState.bulk_result.message, {theme: \"colored\"});\r\n            }\r\n            this.props.resetResult();\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.getoptions();\r\n        console.log(this.props.assetState);\r\n        //this.setState({available_options})\r\n    }\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount');\r\n    }\r\n    onSelectDataType(e) {\r\n        this.setState({type_of_data_to_insert: e.value});\r\n        if(e.value == 1) {\r\n            this.setState({type_options: this.props.assetState.alloptions.city_options})\r\n        } else if(e.value == 2) {\r\n            this.setState({type_options: this.props.assetState.alloptions.state_options})\r\n        } else if(e.value == 3) {\r\n            this.setState({type_options: this.props.assetState.alloptions.who_can_contact_options})\r\n        }\r\n    }\r\n    onSelectOptions(value, actionMeta) {\r\n        console.log(value, actionMeta);\r\n        if(actionMeta.action == \"create-option\" && actionMeta.option.__isNew__) {\r\n            let option = value.value;\r\n            this.props.createSingleOption(this.state.type_of_data_to_insert, option, this.state);\r\n        } else {\r\n            this.setState({default_type_option: value});\r\n        }\r\n    };\r\n    handleBulkData(e) {\r\n        this.setState({error_msg: ''});\r\n        this.setState({bulk_data: e.target.value});\r\n    }\r\n    insertBulkData(e) {\r\n        e.preventDefault();\r\n        if(this.state.bulk_data == \"\") {\r\n            this.setState({error_msg: 'Data Required'});\r\n        } else {\r\n            this.setState({error_msg: ''});\r\n            let bulkData = this.state.bulk_data;\r\n            bulkData = bulkData.trim();\r\n            bulkData = bulkData.split(\",\");\r\n            bulkData = this.toUniqueArray(bulkData);\r\n            setTimeout(() => {\r\n                this.props.bulkInsert(this.state.type_of_data_to_insert, bulkData, this.state);\r\n            }, 50)\r\n        }\r\n    }\r\n    toUniqueArray(a){\r\n        var newArr = [];\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (newArr.indexOf(a[i].trim()) === -1 && a[i].trim() != \"\") {\r\n                newArr.push(a[i].trim());\r\n            }\r\n        }\r\n      return newArr;\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <section id=\"BulkDataInsert\">\r\n                {this.state.loader == true ? <Loader /> : <div>\r\n                        <h4 className=\"mt-4 pt-5\">\r\n                            Bulk Data Insert\r\n                        </h4>\r\n                        <div>\r\n                            {JSON.stringify(this.state)}\r\n                        </div>\r\n                        <form id=\"bulkDataForm\" name=\"bulkDataForm\" onSubmit={e => this.insertBulkData(e)}>\r\n                        <div className=\"my-2\">\r\n                            <div className=\"my-2\">\r\n                                Select Data want to insert:\r\n                            </div>\r\n                            <Select isLoading={this.state.bulk_loader} className=\"basic-single\" classNamePrefix=\"select\" id=\"type_of_data_to_insert\" name=\"type_of_data_to_insert\" options={BULK_DATA_INSERT_TYPES} onChange={e => this.onSelectDataType(e)} defaultValue={this.state.type_of_data_to_insert} components={{LoadingIndicator}} styles={CUSTOM_STYLES} />\r\n                            <span id=\"type_of_data_to_insert_error\"></span>\r\n                        </div>\r\n                        {this.state.type_of_data_to_insert !=0 && \r\n                            <div>\r\n                                <div className=\"my-2\">\r\n                                    <div className=\"my-2\">\r\n                                        {BULK_DATA_INSERT_TYPES[(this.state.type_of_data_to_insert - 1)].label}\r\n                                    </div>\r\n                                    <CreatableSelect isLoading={this.state.bulk_loader} formatCreateLabel={(inputValue) => 'Add or Create \"'+inputValue+'\"'} createOptionPosition=\"first\" className=\"basic-single\" classNamePrefix=\"select\" id=\"who_can_contact\" name=\"who_can_contact\" options={this.state.type_options} createOptionPosition={\"first\"} onChange={(value, actionMeta) => this.onSelectOptions(value, actionMeta)} /* defaultValue={this.state.default_type_option} */ value={this.state.default_type_option} components={{LoadingIndicator}} styles={CUSTOM_STYLES} />\r\n                                    <span></span>\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"bulk_data\" className=\"form-label\">Bulk Data</label>\r\n                                    <textarea className=\"form-control\" id=\"bulk_data\" name=\"bulk_data\" rows=\"3\" onChange={e => this.handleBulkData(e)} value={this.bulk_data}></textarea>\r\n                                    <span id=\"bulk_data_error\" className=\"text-danger\">{this.state.error_msg}</span>\r\n                                </div>\r\n                                <div>\r\n                                    <button className=\"btn btn-primary\">\r\n                                        Submit\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        </form>\r\n                        \r\n                    </div>\r\n                }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        assetState: state.assetState,\r\n        settingState: state.settingState\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getoptions: () => {\r\n            dispatch(getAllOptions())\r\n        },\r\n        bulkInsert: (field, bulkValues, state) => {\r\n            dispatch(bulkInsert(field, bulkValues, state))\r\n        },\r\n        createSingleOption: (field, option, state) => {\r\n            dispatch(createSingleOption(field, option, state))\r\n        },\r\n        dynamicOptionMerge: (pushValue) => {\r\n            dispatch(dynamicOptionMerge(pushValue))\r\n        },\r\n        resetResult: () => {\r\n            dispatch(resetResult())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BulkDataInsert);","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\reducers\\settingReducer.js",["409"],"import {\r\n    SITE_LOADER,\r\n    BULK_FORM,\r\n    BULK_LOADER,\r\n    BULK_RESULT,\r\n    NEW_CITY,\r\n    USERS_LIST,\r\n    USERS_LIST_RESULT,\r\n    CITIES,\r\n    CITY_RESULT,\r\n    STATES,\r\n    STATE_RESULT,\r\n    TENANTS,\r\n    TENANT_RESULT,\r\n    USERS,\r\n    USERS_RESULT,\r\n    PUSH_OPTION\r\n} from '../constants/constants';\r\n\r\n\r\n/* const allOptions = localStorage.getItem('alloptions')\r\n  ? JSON.parse(localStorage.getItem('alloptions'))\r\n  : {} */\r\n\r\nconst initialState = {\r\n    site_loader: false,\r\n    bulk_loader: false,\r\n    bulk_form: {},\r\n    bulk_result: {},\r\n    cities_result: {},\r\n    cities: [],\r\n    states_result: {},\r\n    states: [],\r\n    tenants_result: {},\r\n    tenants: []\r\n};\r\n\r\nexport const settingReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SITE_LOADER: {\r\n            return {...state }\r\n        }\r\n        case BULK_LOADER: {\r\n            return {...state, bulk_loader: !state.bulk_loader}\r\n        }\r\n        case BULK_FORM: {\r\n            return { ...state, bulk_form: action.payload, site_loader: true }\r\n        }\r\n        case BULK_RESULT: {\r\n            return { ...state, bulk_result: action.payload, site_loader: false }\r\n        }\r\n        case NEW_CITY: {\r\n            return { ...state, new_city: action.payload }\r\n        }\r\n        case USERS_LIST: {\r\n            return { ...state, users_list: action.payload }\r\n        }\r\n        case USERS_LIST_RESULT: {\r\n            return { ...state, users_list_result: action.payload }\r\n        }\r\n        case USERS: {\r\n            return { ...state, users: action.payload.users, total_users: action.payload.total }\r\n        }\r\n        case USERS_RESULT: {\r\n            return { ...state, users_result: action.payload }\r\n        }\r\n        case CITIES: {\r\n            return { ...state, cities: action.payload.cities, total_city: action.payload.total }\r\n        }\r\n        case CITY_RESULT: {\r\n            return { ...state, cities_result: action.payload }\r\n        }\r\n        case STATES: {\r\n            return { ...state, states: action.payload.states, total_state: action.payload.total }\r\n        }\r\n        case STATE_RESULT: {\r\n            return { ...state, states_result: action.payload }\r\n        }\r\n        case TENANTS: {\r\n            return { ...state, tenants: action.payload.tenants, total_tenant: action.payload.total }\r\n        }\r\n        case TENANT_RESULT: {\r\n            return { ...state, tenants_result: action.payload }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\actions\\settingActions.js",["410","411","412","413","414","415","416"],"import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { BULK_LOADER, PUSH_OPTION, BULK_FORM, BULK_RESULT, USERS_LIST, CITIES, CITY_RESULT, STATES, STATE_RESULT, TENANTS, TENANT_RESULT, USERS, USERS_RESULT } from '../constants/constants';\r\nimport { BULK_INSERT, CREATE_SINGLE_OPTION, USERS_LIST_API, GET_CITIES, EDIT_CITY, DELETE_CITY, DELETE_BULK_CITY, ENABLE_DISABLE_BULK_CITY, ENABLE_DISABLE_CITY_STATUS, GET_STATES, EDIT_STATE, DELETE_STATE, DELETE_BULK_STATE, ENABLE_DISABLE_BULK_STATE, ENABLE_DISABLE_STATE_STATUS, GET_TENANTS, EDIT_TENANT, DELETE_TENANT, DELETE_BULK_TENANT, ENABLE_DISABLE_BULK_TENANT, ENABLE_DISABLE_TENANT_STATUS, GET_USERS, EDIT_USER, DELETE_USER, DELETE_BULK_USER, ENABLE_DISABLE_BULK_USER, ENABLE_DISABLE_USER_STATUS } from '../constants/Apiconstants';\r\nimport { BULK_DATA_INSERT_TYPES } from '../config/globalConstant';\r\n\r\naxios.interceptors.request.use(function (config) {\r\n    config.headers['Authorization'] = `Bearer ${(localStorage.getItem(\"token\")? localStorage.getItem(\"token\") : '')}`;\r\n    config.headers['Content-Type'] = 'application/json';\r\n    return config;\r\n}, null, { synchronous: true });\r\n\r\naxios.interceptors.response.use(function (response) {\r\n    return response;\r\n}, function (error) {\r\n    if(error.message == 'Request failed with status code 401') {\r\n        toast.error(\"Token expired\", {theme: \"colored\"});\r\n        setTimeout(() => {\r\n            localStorage.removeItem(\"token\");\r\n            window.location.reload();\r\n        }, 2000);\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport const bulkInsert = (field, bulkValues, state) => async (dispatch, getState) => {\r\n    //const state = getState();\r\n    dispatch({type:BULK_FORM, payload: state});\r\n    let postData = {\r\n        'bulk_data': bulkValues,\r\n        'field': field,\r\n        'field_label': BULK_DATA_INSERT_TYPES[field-1].label\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            BULK_INSERT,\r\n            postData\r\n        );\r\n        dispatch({type:BULK_RESULT, payload: data});\r\n        /* if(data.status == 'error') {\r\n            toast.error(data.message, {theme: \"colored\"});\r\n        } else {\r\n            toast.success(data.message, {theme: \"colored\"});\r\n        } */\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n        let tempData = { status: 'error', message: 'Something went wrong', 'error': error  };\r\n        dispatch({type:BULK_RESULT, payload: tempData});\r\n    }\r\n}\r\n\r\nexport const createSingleOption = (field, option, state) => async (dispatch, getState) => {\r\n    dispatch({type:BULK_FORM, payload: state});\r\n    let postData = {\r\n        'option': option,\r\n        'field': field,\r\n        'field_label': BULK_DATA_INSERT_TYPES[field-1].label\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            CREATE_SINGLE_OPTION,\r\n            postData\r\n        );\r\n        dispatch({type:BULK_RESULT, payload: data});\r\n        /* if(data.status == 'error') {\r\n            toast.error(data.message, {theme: \"colored\"});\r\n        } else {\r\n            toast.success(data.message, {theme: \"colored\"});\r\n        } */\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n        let tempData = { status: 'error', message: 'Something went wrong', 'error': error  };\r\n        dispatch({type:BULK_RESULT, payload: tempData});\r\n    }\r\n}\r\n\r\nexport const dynamicOptionMerge = (pushValue) => async (dispatch, getState) => {\r\n    dispatch({type:PUSH_OPTION, payload: pushValue});\r\n};\r\n\r\nexport const resetResult = () => async (dispatch, getState) => {\r\n    dispatch({type:BULK_RESULT, payload: {}});\r\n};\r\n\r\nexport const createCity = (newCity) => async (dispatch, getState) => {\r\n    const state = getState();\r\n    const { new_city } = state.settingState;\r\n    console.log('New City==>'+new_city);\r\n}\r\n\r\n//Start: City List\r\n\r\nexport const resetCitiesResult = () => async (dispatch, getState) => {\r\n    dispatch({type:CITY_RESULT, payload: {}});\r\n};\r\n\r\nexport const getCities = (state) => async (dispatch, getState) => {\r\n    let skip = Math.ceil(state.currentPage * state.pageRange);\r\n    console.log('Detail', state.currentPage, skip, state.pageRange);\r\n    let postData = {\r\n        'keyword': state.searchKey,\r\n        'skip': skip,\r\n        'limit': state.pageRange\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            GET_CITIES,\r\n            postData\r\n        );\r\n        dispatch({type:CITIES, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const editCity = (state) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'city_name': state.city,\r\n        'id': state.cityEditID\r\n    };\r\n    try {\r\n        const { data } = await axios.post(\r\n            EDIT_CITY,\r\n            postData\r\n        );\r\n        dispatch({type: CITY_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const deleteCityByID = (cityID) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'id': cityID\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            DELETE_CITY,\r\n            postData\r\n        );\r\n        dispatch({type: CITY_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const deleteBulkCity = (state) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'cityIds': state.cityIds\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            DELETE_BULK_CITY,\r\n            postData\r\n        );\r\n        dispatch({type: CITY_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const bulkStatusChangeCity = (state) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'cityIds': state.cityIds,\r\n        'status': state.enableDisableValue\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            ENABLE_DISABLE_BULK_CITY,\r\n            postData\r\n        );\r\n        dispatch({type: CITY_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const changeCityStatus = (cityID, status) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'cityId': cityID,\r\n        'status': status\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            ENABLE_DISABLE_CITY_STATUS,\r\n            postData\r\n        );\r\n        dispatch({type: CITY_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\n//End: City List\r\n\r\n//Start: States\r\n\r\nexport const resetStatesResult = () => async (dispatch, getState) => {\r\n    dispatch({type:STATE_RESULT, payload: {}});\r\n};\r\n\r\nexport const getStates = (state) => async (dispatch, getState) => {\r\n    let skip = Math.ceil(state.currentPage * state.pageRange);\r\n    console.log('Detail', state.currentPage, skip, state.pageRange);\r\n    let postData = {\r\n        'keyword': state.searchKey,\r\n        'skip': skip,\r\n        'limit': state.pageRange\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            GET_STATES,\r\n            postData\r\n        );\r\n        dispatch({type:STATES, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const editState = (state) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'state_name': state.state,\r\n        'id': state.stateEditID\r\n    };\r\n    try {\r\n        const { data } = await axios.post(\r\n            EDIT_STATE,\r\n            postData\r\n        );\r\n        dispatch({type: STATE_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const deleteStateByID = (stateID) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'id': stateID\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            DELETE_STATE,\r\n            postData\r\n        );\r\n        dispatch({type: STATE_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const deleteBulkState = (state) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'stateIds': state.stateIds\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            DELETE_BULK_STATE,\r\n            postData\r\n        );\r\n        dispatch({type: STATE_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const bulkStatusChangeState = (state) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'stateIds': state.stateIds,\r\n        'status': state.enableDisableValue\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            ENABLE_DISABLE_BULK_STATE,\r\n            postData\r\n        );\r\n        dispatch({type: STATE_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const changeStateStatus = (stateID, status) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'stateId': stateID,\r\n        'status': status\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            ENABLE_DISABLE_STATE_STATUS,\r\n            postData\r\n        );\r\n        dispatch({type: STATE_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\n//End: States\r\n\r\n//Start: Tenant List\r\n\r\nexport const resetTenantsResult = () => async (dispatch, getState) => {\r\n    dispatch({type:TENANT_RESULT, payload: {}});\r\n};\r\n\r\nexport const getTenants = (state) => async (dispatch, getState) => {\r\n    let skip = Math.ceil(state.currentPage * state.pageRange);\r\n    console.log('Detail', state.currentPage, skip, state.pageRange);\r\n    let postData = {\r\n        'keyword': state.searchKey,\r\n        'skip': skip,\r\n        'limit': state.pageRange\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            GET_TENANTS,\r\n            postData\r\n        );\r\n        dispatch({type:TENANTS, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const editTenant = (state) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'tenant_type': state.tenant,\r\n        'id': state.tenantEditID\r\n    };\r\n    try {\r\n        const { data } = await axios.post(\r\n            EDIT_TENANT,\r\n            postData\r\n        );\r\n        dispatch({type: TENANT_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const deleteTenantByID = (tenantID) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'id': tenantID\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            DELETE_TENANT,\r\n            postData\r\n        );\r\n        dispatch({type: TENANT_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const deleteBulkTenant = (state) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'tenantIds': state.tenantIds\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            DELETE_BULK_TENANT,\r\n            postData\r\n        );\r\n        dispatch({type: TENANT_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const bulkStatusChangeTenant = (state) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'tenantIds': state.tenantIds,\r\n        'status': state.enableDisableValue\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            ENABLE_DISABLE_BULK_TENANT,\r\n            postData\r\n        );\r\n        dispatch({type: TENANT_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const changeTenantStatus = (tenantID, status) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'tenantId': tenantID,\r\n        'status': status\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            ENABLE_DISABLE_TENANT_STATUS,\r\n            postData\r\n        );\r\n        dispatch({type: TENANT_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n//End: Tenant List\r\n\r\n\r\n//Start: User\r\nexport const getUsers = (state) => async (dispatch, getState) => {\r\n    let skip = Math.ceil(state.currentPage * state.pageRange);\r\n    console.log('Detail', state.currentPage, skip, state.pageRange);\r\n    let postData = {\r\n        'keyword': state.searchKey,\r\n        'filterUserStatus': state.filterUserStatus,\r\n        'skip': skip,\r\n        'limit': state.pageRange\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            GET_USERS,\r\n            postData\r\n        );\r\n        dispatch({type:USERS, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\nexport const bulkStatusChangeUser = (state) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'userIds': state.userIds,\r\n        'status': state.enableDisableValue\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            ENABLE_DISABLE_BULK_USER,\r\n            postData\r\n        );\r\n        dispatch({type: USERS_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\nexport const changeUserStatus = (userID, status) => async (dispatch, getState) => {\r\n    let postData = {\r\n        'userId': userID,\r\n        'status': status\r\n    }\r\n    try {\r\n        const { data } = await axios.post(\r\n            ENABLE_DISABLE_USER_STATUS,\r\n            postData\r\n        );\r\n        dispatch({type: USERS_RESULT, payload: data});\r\n    } catch(error) {\r\n        console.log('Catch Error ==>'+error);\r\n    }\r\n}\r\n\r\nexport const resetUsersResult = () => async (dispatch, getState) => {\r\n    dispatch({type:USERS_RESULT, payload: {}});\r\n};\r\n//End: User","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\routes\\PrivateRoutes.js",["417"],"import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { auth }from '../auth/Auth';\r\n\r\nconst PrivateRoutes = ({component: Component, ...rest}) => (\r\n    <Route {...rest} render={props => (\r\n        auth() ? (<Component {...props} />) : (<Redirect to={{pathname: '/login', state: { from: props.location }}}/>)\r\n    )} />\r\n)\r\n\r\nexport default PrivateRoutes;","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\auth\\Auth.js",[],"D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\settings\\CitiesList.js",["418","419","420","421","422","423","424","425","426","427","428","429","430","431"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReactPaginate from 'react-paginate';\r\nimport Modal from 'react-modal';\r\nimport { toast } from 'react-toastify';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faPencilAlt, faTimes, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport Loader from '../../Loader';\r\nimport { resetCitiesResult, getCities, editCity, deleteCityByID, deleteBulkCity, bulkStatusChangeCity, changeCityStatus } from '../../../actions/settingActions';\r\n\r\n\r\nModal.setAppElement('#root');\r\n\r\nclass CitiesList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loader: false,\r\n            searchKey: '',\r\n            pageRange: 10,\r\n            currentPage: 0,\r\n            modalIsOpen:false,\r\n            cityEditID: '',\r\n            enableDisableValue: 0,\r\n            city: '',\r\n            cityIds: []\r\n        }\r\n        this.handleSearch.bind(this);\r\n        this.handlePagination.bind(this);\r\n        this.checkAll.bind(this);\r\n        this.handleCheck.bind(this);\r\n        this.deleteCity.bind(this);\r\n        this.bulkDeleteCities.bind(this);\r\n        this.enableDisableCities.bind(this);\r\n        this.enableDisableCity.bind(this);\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({loader: true});\r\n        console.log(this.props.settingState);\r\n        this.setState({loader: false});\r\n    }\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount');\r\n    }\r\n    componentDidUpdate() {\r\n        if(this.props.settingState.cities_result != undefined && Object.keys(this.props.settingState.cities_result).length != 0) {\r\n            if(this.props.settingState.cities_result.status == 'error') {\r\n                toast.error(this.props.settingState.cities_result.message, {theme: \"colored\"});\r\n            } else {\r\n                toast.success(this.props.settingState.cities_result.message, {theme: \"colored\"});\r\n                if(this.props.settingState.cities_result.bulkDelete != undefined && this.props.settingState.cities_result.bulkDelete == 1) {\r\n                    this.setState({cityIds: []});\r\n                }\r\n                this.props.getCities(this.state);\r\n                this.setState({modalIsOpen: false});\r\n                this.props.resetCitiesResult();\r\n            }\r\n        }\r\n    }\r\n    handleSearch() {\r\n        if(timer) {\r\n            clearTimeout(timer);\r\n        }\r\n        timer = setTimeout(() => {\r\n            this.setState({loader: true});\r\n            this.props.getCities(this.state);\r\n            this.setState({loader: false});\r\n        }, 800);\r\n    }\r\n    handlePagination = (data) => {\r\n        let selected = data.selected;\r\n        this.setState({currentPage: selected});\r\n        console.log(selected);\r\n        let count = Math.ceil(this.props.settingState.total_city / this.state.pageRange);\r\n        setTimeout(() => {\r\n            this.props.getCities(this.state);\r\n        }, 50);\r\n    }\r\n    checkAll = (event) => {\r\n        var checkboxes = document.getElementsByClassName('cityID');\r\n        console.log(checkboxes);\r\n        for(var i = 0; i < checkboxes.length; i++) {\r\n            if(checkboxes[i].type == \"checkbox\") {\r\n                if(event.target.checked) {\r\n                    checkboxes[i].checked = true;\r\n                    let citiesID = this.state.cityIds;\r\n                    if(citiesID.indexOf(checkboxes[i].value) === -1) {\r\n                        citiesID.push(checkboxes[i].value);\r\n                        this.setState({cityIds: citiesID})    \r\n                    }\r\n                } else {\r\n                    checkboxes[i].checked = false;\r\n                    this.setState({cityIds: []});\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleCheck = (event) => {\r\n        let selectedCityValue = event.target.value;\r\n        let checkedValueIndex = this.state.cityIds.indexOf(selectedCityValue);\r\n        if(event.target.checked) {\r\n            if(checkedValueIndex === -1) {\r\n                this.setState({cityIds: this.state.cityIds.concat(selectedCityValue)})\r\n            }\r\n        } else {\r\n            if(checkedValueIndex !== -1) {\r\n                this.setState({cityIds: this.state.cityIds.filter(item => item !== selectedCityValue)});\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    deleteCity = (cityID, city_name) => {\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: 'Are you sure to delete this \"'+city_name+'\" city.',\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.deleteCityByID(cityID)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    }\r\n\r\n    bulkDeleteCities = () => {\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: 'Are you sure to delete selected cities.',\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.deleteBulkCity(this.state)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    }\r\n\r\n    enableDisableCities = (status) => {\r\n        let msg = \"\";\r\n        if(status == 1) {\r\n            msg = 'Are you sure to enable selected cities.';\r\n        } else {\r\n            msg = 'Are you sure to disable selected cities.';\r\n        }\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: msg,\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.bulkStatusChangeCity(this.state)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    }\r\n\r\n    enableDisableCity = (status, id, city_name) => {\r\n        let msg = \"\";\r\n        if(status == 1) {\r\n            msg = 'Are you sure to enable city \"'+city_name+'\".';\r\n        } else {\r\n            msg = 'Are you sure to disable city \"'+city_name+'\".';\r\n        }\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: msg,\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.changeCityStatus(id, status)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <section id=\"CitiesList\">\r\n                {this.state.loader == true ? <Loader /> : <div>\r\n                <h4 className=\"mt-4 pt-5\">\r\n                    Users List\r\n                </h4>\r\n                <div>\r\n                    {JSON.stringify(this.state)}\r\n                </div>\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.modalIsOpen}\r\n                        /* onAfterOpen={afterOpenModal}\r\n                        onRequestClose={closeModal} */\r\n                        style={customStyles}\r\n                        contentLabel=\"Example Modal\"\r\n                    >\r\n                        <h2>Edit City</h2>\r\n                        <button onClick={() => this.setState({modalIsOpen: false})}>close</button>\r\n                        <form name=\"editCity\" onSubmit={(e) => {e.preventDefault();this.props.editCity(this.state);}}>\r\n                            <input type=\"text\" name=\"city\" id=\"city\" value={this.state.city} onChange={(e) => this.setState({city: e.target.value})} />\r\n                            <button className=\"btn btn-info\">Edit</button>\r\n                        </form>\r\n                    </Modal>\r\n                </div>\r\n\r\n                <div className=\"mt-2\">\r\n                    <div className=\"form-group text-right\">\r\n                        <input type=\"text\" name=\"citySearch\" id=\"citySearch\" placeholder=\"Search City\" onChange={(e) => {this.setState({searchKey: e.target.value});this.handleSearch();}} value={this.state.searchKey} />\r\n                    </div>\r\n                    { this.state.cityIds.length > 0 ? \r\n                    <div className=\"btn-group\">\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={this.bulkDeleteCities}>Delete</button>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {this.setState({enableDisableValue: 1}); this.enableDisableCities(1)}}>Enable</button>\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={(e) => {this.setState({enableDisableValue: 2}); this.enableDisableCities(2)}}>Disable</button>\r\n                    </div>\r\n                   : <div></div> }\r\n                    <table className=\"table table-hover mt-2\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th><input type=\"checkbox\" name=\"bulkAction\" onChange={this.checkAll} /></th>\r\n                                <th>City Name</th>\r\n                                <th>Status</th>\r\n                                <th>Created By</th>\r\n                                <th>Created On</th>\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            { this.props.settingState.cities != undefined && this.props.settingState.cities.map(value => {\r\n                                return (\r\n                                    <tr key={value._id}>\r\n                                        <td><input className=\"cityID\" type=\"checkbox\" name=\"cityIds[]\" onChange={(e) => this.handleCheck(e)} value={value._id} /></td>\r\n                                        <td>{value.city_name}</td>\r\n                                        <td>{(value.status == 1) ? <span>Active</span> : <span>Inactive</span>}</td>\r\n                                        <td>{value.created_on}</td>\r\n                                        <td><FontAwesomeIcon icon={faTrashAlt} onClick={() => this.deleteCity(value._id, value.city_name)} /></td>\r\n                                        <td><FontAwesomeIcon icon={faPencilAlt} onClick={() => this.setState({cityEditID: value._id, city: value.city_name, modalIsOpen: true})} /></td>\r\n                                        <td>\r\n                                            {(value.status != 1) ? <span><FontAwesomeIcon icon={faCheck} onClick={() => this.enableDisableCity(1, value._id, value.city_name)} /></span> : <span><FontAwesomeIcon icon={faTimes} onClick={() => this.enableDisableCity(2, value._id, value.city_name)}  /></span>}\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                            {this.props.settingState.cities != undefined && this.props.settingState.cities.length <= 0 && <tr><td colSpan=\"7\" className=\"text-center\">No City found.</td></tr> }\r\n                        </tbody>\r\n                    </table>\r\n                <ReactPaginate\r\n                    previousLabel={'previous'}\r\n                    nextLabel={'next'}\r\n                    breakLabel={'...'}\r\n                    breakClassName={'break-me'}\r\n                    pageCount={Math.ceil(this.props.settingState.total_city / this.state.pageRange)}\r\n                    marginPagesDisplayed={2}\r\n                    pageRangeDisplayed={this.state.pageRange}\r\n                    onPageChange={this.handlePagination}\r\n                    initialPage={0}\r\n                    containerClassName={'pagination'}\r\n                    activeClassName={'active'}\r\n                />\r\n                </div>\r\n            </div>\r\n            }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nlet timer;\r\n\r\n\r\nconst customStyles = {\r\n    content: {\r\n      top: '50%',\r\n      left: '50%',\r\n      right: 'auto',\r\n      bottom: 'auto',\r\n      marginRight: '-50%',\r\n      transform: 'translate(-50%, -50%)',\r\n    },\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        settingState: state.settingState\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getCities: (state) => {\r\n            dispatch(getCities(state))\r\n        },\r\n        editCity: (state) => {\r\n            dispatch(editCity(state))\r\n        },\r\n        deleteCityByID: (cityID) => {\r\n            dispatch(deleteCityByID(cityID))\r\n        },\r\n        deleteBulkCity: (state) => {\r\n            dispatch(deleteBulkCity(state))\r\n        },\r\n        bulkStatusChangeCity: (state) => {\r\n            dispatch(bulkStatusChangeCity(state))\r\n        },\r\n        changeCityStatus: (cityID, status) => {\r\n            dispatch(changeCityStatus(cityID, status))\r\n        },\r\n        resetCitiesResult: (state) => {\r\n            dispatch(resetCitiesResult(state))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesList);","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\settings\\StatesList.js",["432","433","434","435","436","437","438","439","440","441","442","443","444","445"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReactPaginate from 'react-paginate';\r\nimport Modal from 'react-modal';\r\nimport { toast } from 'react-toastify';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faPencilAlt, faTimes, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport Loader from '../../Loader';\r\nimport { resetStatesResult, getStates, editState, deleteStateByID, deleteBulkState, bulkStatusChangeState, changeStateStatus } from '../../../actions/settingActions';\r\n\r\n\r\nModal.setAppElement('#root');\r\n\r\nclass StatesList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loader: false,\r\n            searchKey: '',\r\n            pageRange: 10,\r\n            currentPage: 0,\r\n            modalIsOpen:false,\r\n            stateEditID: '',\r\n            enableDisableValue: 0,\r\n            state: '',\r\n            stateIds: []\r\n        }\r\n        this.handleSearch.bind(this);\r\n        this.handlePagination.bind(this);\r\n        this.checkAll.bind(this);\r\n        this.handleCheck.bind(this);\r\n        this.deleteState.bind(this);\r\n        this.bulkDeleteStates.bind(this);\r\n        this.enableDisableStates.bind(this);\r\n        this.enableDisableState.bind(this);\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({loader: true});\r\n        console.log(this.props.settingState);\r\n        this.setState({loader: false});\r\n    }\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount');\r\n    }\r\n    componentDidUpdate() {\r\n        if(this.props.settingState.states_result != undefined && Object.keys(this.props.settingState.states_result).length != 0) {\r\n            if(this.props.settingState.states_result.status == 'error') {\r\n                toast.error(this.props.settingState.states_result.message, {theme: \"colored\"});\r\n            } else {\r\n                toast.success(this.props.settingState.states_result.message, {theme: \"colored\"});\r\n                if(this.props.settingState.states_result.bulkDelete != undefined && this.props.settingState.states_result.bulkDelete == 1) {\r\n                    this.setState({stateIds: []});\r\n                }\r\n                this.props.getStates(this.state);\r\n                this.setState({modalIsOpen: false});\r\n                this.props.resetStatesResult();\r\n            }\r\n        }\r\n    }\r\n    handleSearch() {\r\n        if(timer) {\r\n            clearTimeout(timer);\r\n        }\r\n        timer = setTimeout(() => {\r\n            this.setState({loader: true});\r\n            this.props.getStates(this.state);\r\n            this.setState({loader: false});\r\n        }, 800);\r\n    }\r\n    handlePagination = (data) => {\r\n        let selected = data.selected;\r\n        this.setState({currentPage: selected});\r\n        console.log(selected);\r\n        let count = Math.ceil(this.props.settingState.total_state / this.state.pageRange);\r\n        setTimeout(() => {\r\n            this.props.getStates(this.state);\r\n        }, 50);\r\n    }\r\n    checkAll = (event) => {\r\n        var checkboxes = document.getElementsByClassName('stateID');\r\n        console.log(checkboxes);\r\n        for(var i = 0; i < checkboxes.length; i++) {\r\n            if(checkboxes[i].type == \"checkbox\") {\r\n                if(event.target.checked) {\r\n                    checkboxes[i].checked = true;\r\n                    let statesID = this.state.stateIds;\r\n                    if(statesID.indexOf(checkboxes[i].value) === -1) {\r\n                        statesID.push(checkboxes[i].value);\r\n                        this.setState({stateIds: statesID})\r\n                    }\r\n                } else {\r\n                    checkboxes[i].checked = false;\r\n                    this.setState({stateIds: []});\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleCheck = (event) => {\r\n        let selectedStateValue = event.target.value;\r\n        let checkedValueIndex = this.state.stateIds.indexOf(selectedStateValue);\r\n        if(event.target.checked) {\r\n            if(checkedValueIndex === -1) {\r\n                this.setState({stateIds: this.state.stateIds.concat(selectedStateValue)})\r\n            }\r\n        } else {\r\n            if(checkedValueIndex !== -1) {\r\n                this.setState({stateIds: this.state.stateIds.filter(item => item !== selectedStateValue)});\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteState = (stateID, state_name) => {\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: 'Are you sure to delete this \"'+state_name+'\" state.',\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.deleteStateByID(stateID)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    }\r\n\r\n    bulkDeleteStates = () => {\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: 'Are you sure to delete selected state.',\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.deleteBulkState(this.state)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    }\r\n\r\n    enableDisableStates = (status) => {\r\n        let msg = \"\";\r\n        if(status == 1) {\r\n            msg = 'Are you sure to enable selected states.';\r\n        } else {\r\n            msg = 'Are you sure to disable selected states.';\r\n        }\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: msg,\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.bulkStatusChangeState(this.state)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    }\r\n\r\n    enableDisableState = (status, id, state_name) => {\r\n        let msg = \"\";\r\n        if(status == 1) {\r\n            msg = 'Are you sure to enable state \"'+state_name+'\".';\r\n        } else {\r\n            msg = 'Are you sure to disable state \"'+state_name+'\".';\r\n        }\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: msg,\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.changeStateStatus(id, status)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <section id=\"StatesList\">\r\n                {this.state.loader == true ? <Loader /> : <div>\r\n                <h4 className=\"mt-4 pt-5\">\r\n                    Users List\r\n                </h4>\r\n                <div>\r\n                    {JSON.stringify(this.state)}\r\n                </div>\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.modalIsOpen}\r\n                        /* onAfterOpen={afterOpenModal}\r\n                        onRequestClose={closeModal} */\r\n                        style={customStyles}\r\n                        contentLabel=\"Example Modal\"\r\n                    >\r\n                        <h2>Edit State</h2>\r\n                        <button onClick={() => this.setState({modalIsOpen: false})}>close</button>\r\n                        <form name=\"editState\" onSubmit={(e) => {e.preventDefault();this.props.editState(this.state);}}>\r\n                            <input type=\"text\" name=\"state\" id=\"state\" value={this.state.state} onChange={(e) => this.setState({state: e.target.value})} />\r\n                            <button className=\"btn btn-info\">Edit</button>\r\n                        </form>\r\n                    </Modal>\r\n                </div>\r\n\r\n                <div className=\"mt-2\">\r\n                    <div className=\"form-group text-right\">\r\n                        <input type=\"text\" name=\"stateSearch\" id=\"stateSearch\" placeholder=\"Search State\" onChange={(e) => {this.setState({searchKey: e.target.value});this.handleSearch();}} value={this.state.searchKey} />\r\n                    </div>\r\n                    { this.state.stateIds.length > 0 ? \r\n                    <div className=\"btn-group\">\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={this.bulkDeleteStates}>Delete</button>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {this.setState({enableDisableValue: 1}); this.enableDisableStates()}}>Enable</button>\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={(e) => {this.setState({enableDisableValue: 2}); this.enableDisableStates()}}>Disable</button>\r\n                    </div>\r\n                   : <div></div> }\r\n                    <table className=\"table table-hover mt-2\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th><input type=\"checkbox\" name=\"bulkAction\" onChange={this.checkAll} /></th>\r\n                                <th>State Name</th>\r\n                                <th>Status</th>\r\n                                <th>Created By</th>\r\n                                <th>Created On</th>\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            { this.props.settingState.states != undefined && this.props.settingState.states.map(value => {\r\n                                return (\r\n                                    <tr key={value._id}>\r\n                                        <td><input className=\"stateID\" type=\"checkbox\" name=\"stateIds[]\" onChange={(e) => this.handleCheck(e)} value={value._id} /></td>\r\n                                        <td>{value.state_name}</td>\r\n                                        <td>{(value.status == 1) ? <span>Active</span> : <span>Inactive</span>}</td>\r\n                                        <td>{value.created_on}</td>\r\n                                        <td><FontAwesomeIcon icon={faTrashAlt} onClick={() => this.deleteState(value._id, value.state_name)} /></td>\r\n                                        <td><FontAwesomeIcon icon={faPencilAlt} onClick={() => this.setState({stateEditID: value._id, state: value.state_name, modalIsOpen: true})} /></td>\r\n                                        <td>\r\n                                            {(value.status != 1) ? <span><FontAwesomeIcon icon={faCheck} onClick={() => this.enableDisableState(1, value._id, value.state_name)} /></span> : <span><FontAwesomeIcon icon={faTimes} onClick={() => this.enableDisableState(2, value._id, value.state_name)}  /></span>}\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                            {this.props.settingState.states != undefined && this.props.settingState.states.length <= 0 && <tr><td colSpan=\"7\" className=\"text-center\">No State found.</td></tr> }\r\n                        </tbody>\r\n                    </table>\r\n                <ReactPaginate\r\n                    previousLabel={'previous'}\r\n                    nextLabel={'next'}\r\n                    breakLabel={'...'}\r\n                    breakClassName={'break-me'}\r\n                    pageCount={Math.ceil(this.props.settingState.total_state / this.state.pageRange)}\r\n                    marginPagesDisplayed={2}\r\n                    pageRangeDisplayed={this.state.pageRange}\r\n                    onPageChange={this.handlePagination}\r\n                    initialPage={0}\r\n                    containerClassName={'pagination'}\r\n                    activeClassName={'active'}\r\n                />\r\n                </div>\r\n            </div>\r\n            }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nlet timer;\r\n\r\n\r\nconst customStyles = {\r\n    content: {\r\n      top: '50%',\r\n      left: '50%',\r\n      right: 'auto',\r\n      bottom: 'auto',\r\n      marginRight: '-50%',\r\n      transform: 'translate(-50%, -50%)',\r\n    },\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        settingState: state.settingState\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getStates: (state) => {\r\n            dispatch(getStates(state))\r\n        },\r\n        editState: (state) => {\r\n            dispatch(editState(state))\r\n        },\r\n        deleteStateByID: (stateID) => {\r\n            dispatch(deleteStateByID(stateID))\r\n        },\r\n        deleteBulkState: (state) => {\r\n            dispatch(deleteBulkState(state))\r\n        },\r\n        bulkStatusChangeState: (state) => {\r\n            dispatch(bulkStatusChangeState(state))\r\n        },\r\n        changeStateStatus: (stateID, status) => {\r\n            dispatch(changeStateStatus(stateID, status))\r\n        },\r\n        resetStatesResult: (state) => {\r\n            dispatch(resetStatesResult(state))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StatesList);","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\settings\\TenantsTypeList.js",["446","447","448","449","450","451","452","453","454","455","456","457","458","459"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReactPaginate from 'react-paginate';\r\nimport Modal from 'react-modal';\r\nimport { toast } from 'react-toastify';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faPencilAlt, faTimes, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport Loader from '../../Loader';\r\nimport { resetTenantsResult, getTenants, editTenant, deleteTenantByID, deleteBulkTenant, bulkStatusChangeTenant, changeTenantStatus } from '../../../actions/settingActions';\r\n\r\n\r\nModal.setAppElement('#root');\r\n\r\nclass TenantsTypeList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loader: false,\r\n            searchKey: '',\r\n            pageRange: 10,\r\n            currentPage: 0,\r\n            modalIsOpen:false,\r\n            tenantEditID: '',\r\n            enableDisableValue: 0,\r\n            tenant: '',\r\n            tenantIds: []\r\n        }\r\n        this.handleSearch.bind(this);\r\n        this.handlePagination.bind(this);\r\n        this.checkAll.bind(this);\r\n        this.handleCheck.bind(this);\r\n        this.deleteTenant.bind(this);\r\n        this.bulkDeleteTenants.bind(this);\r\n        this.enableDisableTenants.bind(this);\r\n        this.enableDisableTenant.bind(this);\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({loader: true});\r\n        console.log(this.props.settingState);\r\n        this.setState({loader: false});\r\n    }\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount');\r\n    }\r\n    componentDidUpdate() {\r\n        if(this.props.settingState.tenants_result != undefined && Object.keys(this.props.settingState.tenants_result).length != 0) {\r\n            if(this.props.settingState.tenants_result.status == 'error') {\r\n                toast.error(this.props.settingState.tenants_result.message, {theme: \"colored\"});\r\n            } else {\r\n                toast.success(this.props.settingState.tenants_result.message, {theme: \"colored\"});\r\n                if(this.props.settingState.tenants_result.bulkDelete != undefined && this.props.settingState.tenants_result.bulkDelete == 1) {\r\n                    this.setState({tenantIds: []});\r\n                }\r\n                this.props.getTenants(this.state);\r\n                this.setState({modalIsOpen: false});\r\n                this.props.resetTenantsResult();\r\n            }\r\n        }\r\n    }\r\n    handleSearch() {\r\n        if(timer) {\r\n            clearTimeout(timer);\r\n        }\r\n        timer = setTimeout(() => {\r\n            this.setState({loader: true});\r\n            this.props.getTenants(this.state);\r\n            this.setState({loader: false});\r\n        }, 800);\r\n    }\r\n    handlePagination = (data) => {\r\n        let selected = data.selected;\r\n        this.setState({currentPage: selected});\r\n        console.log(selected);\r\n        let count = Math.ceil(this.props.settingState.total_tenant / this.state.pageRange);\r\n        setTimeout(() => {\r\n            this.props.getTenants(this.state);\r\n        }, 50);\r\n    }\r\n    checkAll = (event) => {\r\n        var checkboxes = document.getElementsByClassName('tenantID');\r\n        console.log(checkboxes);\r\n        for(var i = 0; i < checkboxes.length; i++) {\r\n            if(checkboxes[i].type == \"checkbox\") {\r\n                if(event.target.checked) {\r\n                    checkboxes[i].checked = true;\r\n                    let tenantsID = this.state.tenantIds;\r\n                    if(tenantsID.indexOf(checkboxes[i].value) === -1) {\r\n                        tenantsID.push(checkboxes[i].value);\r\n                        this.setState({tenantIds: tenantsID})\r\n                    }\r\n                } else {\r\n                    checkboxes[i].checked = false;\r\n                    this.setState({tenantIds: []});\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleCheck = (event) => {\r\n        let selectedTenantValue = event.target.value;\r\n        let checkedValueIndex = this.state.tenantIds.indexOf(selectedTenantValue);\r\n        if(event.target.checked) {\r\n            if(checkedValueIndex === -1) {\r\n                this.setState({tenantIds: this.state.tenantIds.concat(selectedTenantValue)})\r\n            }\r\n        } else {\r\n            if(checkedValueIndex !== -1) {\r\n                this.setState({tenantIds: this.state.tenantIds.filter(item => item !== selectedTenantValue)});\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteTenant = (tenantID, tenant_type) => {\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: 'Are you sure to delete this \"'+tenant_type+'\" state.',\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.deleteTenantByID(tenantID)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    }\r\n\r\n    bulkDeleteTenants = () => {\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: 'Are you sure to delete selected tenant type.',\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.deleteBulkTenant(this.state)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    }\r\n\r\n    enableDisableTenants = (status) => {\r\n        let msg = \"\";\r\n        if(status == 1) {\r\n            msg = 'Are you sure to enable selected tenant type.';\r\n        } else {\r\n            msg = 'Are you sure to disable selected tenant type.';\r\n        }\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: msg,\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.bulkStatusChangeTenant(this.state)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    }\r\n\r\n    enableDisableTenant = (status, id, tenant_type) => {\r\n        let msg = \"\";\r\n        if(status == 1) {\r\n            msg = 'Are you sure to enable tenant type \"'+tenant_type+'\".';\r\n        } else {\r\n            msg = 'Are you sure to disable tenant type \"'+tenant_type+'\".';\r\n        }\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: msg,\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.changeTenantStatus(id, status)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <section id=\"TenantsList\">\r\n                {this.state.loader == true ? <Loader /> : <div>\r\n                <h4 className=\"mt-4 pt-5\">\r\n                    Users List\r\n                </h4>\r\n                <div>\r\n                    {JSON.stringify(this.state)}\r\n                </div>\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.modalIsOpen}\r\n                        /* onAfterOpen={afterOpenModal}\r\n                        onRequestClose={closeModal} */\r\n                        style={customStyles}\r\n                        contentLabel=\"Example Modal\"\r\n                    >\r\n                        <h2>Edit State</h2>\r\n                        <button onClick={() => this.setState({modalIsOpen: false})}>close</button>\r\n                        <form name=\"editTenant\" onSubmit={(e) => {e.preventDefault();this.props.editTenant(this.state);}}>\r\n                            <input type=\"text\" name=\"tenant\" id=\"tenant\" value={this.state.tenant} onChange={(e) => this.setState({tenant: e.target.value})} />\r\n                            <button className=\"btn btn-info\">Edit</button>\r\n                        </form>\r\n                    </Modal>\r\n                </div>\r\n\r\n                <div className=\"mt-2\">\r\n                    <div className=\"form-group text-right\">\r\n                        <input type=\"text\" name=\"tenantSearch\" id=\"tenantSearch\" placeholder=\"Search Tenant type\" onChange={(e) => {this.setState({searchKey: e.target.value});this.handleSearch();}} value={this.state.searchKey} />\r\n                    </div>\r\n                    { this.state.tenantIds.length > 0 ? \r\n                    <div className=\"btn-group\">\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={this.bulkDeleteTenants}>Delete</button>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {this.setState({enableDisableValue: 1}); this.enableDisableTenants()}}>Enable</button>\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={(e) => {this.setState({enableDisableValue: 2}); this.enableDisableTenants()}}>Disable</button>\r\n                    </div>\r\n                   : <div></div> }\r\n                    <table className=\"table table-hover mt-2\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th><input type=\"checkbox\" name=\"bulkAction\" onChange={this.checkAll} /></th>\r\n                                <th>State Name</th>\r\n                                <th>Status</th>\r\n                                <th>Created By</th>\r\n                                <th>Created On</th>\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            { this.props.settingState.tenants != undefined && this.props.settingState.tenants.map(value => {\r\n                                return (\r\n                                    <tr key={value._id}>\r\n                                        <td><input className=\"tenantID\" type=\"checkbox\" name=\"tenantIds[]\" onChange={(e) => this.handleCheck(e)} value={value._id} /></td>\r\n                                        <td>{value.tenant_type}</td>\r\n                                        <td>{(value.status == 1) ? <span>Active</span> : <span>Inactive</span>}</td>\r\n                                        <td>{value.created_on}</td>\r\n                                        <td><FontAwesomeIcon icon={faTrashAlt} onClick={() => this.deleteTenant(value._id, value.tenant_type)} /></td>\r\n                                        <td><FontAwesomeIcon icon={faPencilAlt} onClick={() => this.setState({tenantEditID: value._id, tenant: value.tenant_type, modalIsOpen: true})} /></td>\r\n                                        <td>\r\n                                            {(value.status != 1) ? <span><FontAwesomeIcon icon={faCheck} onClick={() => this.enableDisableTenant(1, value._id, value.tenant_type)} /></span> : <span><FontAwesomeIcon icon={faTimes} onClick={() => this.enableDisableTenant(2, value._id, value.tenant_type)}  /></span>}\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                            {this.props.settingState.tenants != undefined && this.props.settingState.tenants.length <= 0 && <tr><td colSpan=\"7\" className=\"text-center\">No tenant type found.</td></tr> }\r\n                        </tbody>\r\n                    </table>\r\n                <ReactPaginate\r\n                    previousLabel={'previous'}\r\n                    nextLabel={'next'}\r\n                    breakLabel={'...'}\r\n                    breakClassName={'break-me'}\r\n                    pageCount={Math.ceil(this.props.settingState.total_tenant / this.state.pageRange)}\r\n                    marginPagesDisplayed={2}\r\n                    pageRangeDisplayed={this.state.pageRange}\r\n                    onPageChange={this.handlePagination}\r\n                    initialPage={0}\r\n                    containerClassName={'pagination'}\r\n                    activeClassName={'active'}\r\n                />\r\n                </div>\r\n            </div>\r\n            }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nlet timer;\r\n\r\n\r\nconst customStyles = {\r\n    content: {\r\n      top: '50%',\r\n      left: '50%',\r\n      right: 'auto',\r\n      bottom: 'auto',\r\n      marginRight: '-50%',\r\n      transform: 'translate(-50%, -50%)',\r\n    },\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        settingState: state.settingState\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getTenants: (state) => {\r\n            dispatch(getTenants(state))\r\n        },\r\n        editTenant: (state) => {\r\n            dispatch(editTenant(state))\r\n        },\r\n        deleteTenantByID: (tenantID) => {\r\n            dispatch(deleteTenantByID(tenantID))\r\n        },\r\n        deleteBulkTenant: (state) => {\r\n            dispatch(deleteBulkTenant(state))\r\n        },\r\n        bulkStatusChangeTenant: (state) => {\r\n            dispatch(bulkStatusChangeTenant(state))\r\n        },\r\n        changeTenantStatus: (tenantID, status) => {\r\n            dispatch(changeTenantStatus(tenantID, status))\r\n        },\r\n        resetTenantsResult: (state) => {\r\n            dispatch(resetTenantsResult(state))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TenantsTypeList);","D:\\Apache\\Apache24\\htdocs\\Server\\React\\DemoProject\\frontend\\src\\components\\pages\\settings\\User.js",["460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReactPaginate from 'react-paginate';\r\nimport Modal from 'react-modal';\r\nimport { toast } from 'react-toastify';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport { faTrashAlt, faPencilAlt, faTimes, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport Loader from '../../Loader';\r\nimport { getUsers, bulkStatusChangeUser, changeUserStatus, resetUsersResult } from '../../../actions/settingActions';\r\nimport { ENABLE_DISABLE_FILTER } from '../../../config/globalConstant';\r\n\r\nModal.setAppElement('#root');\r\n\r\nclass User extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loader: false,\r\n            searchKey: '',\r\n            filterUserStatus:0,\r\n            pageRange: 10,\r\n            currentPage: 0,\r\n            modalIsOpen:false,\r\n            userEditID: '',\r\n            enableDisableValue: 0,\r\n            user: '',\r\n            userIds: []\r\n        }\r\n        this.handleSearch.bind(this);\r\n        this.handlePagination.bind(this);\r\n        this.handleCheck.bind(this);\r\n        this.checkAll.bind(this);\r\n        this.enableDisableUsers.bind(this);\r\n        this.enableDisableUser.bind(this);\r\n        this.onClickUserFilter.bind(this);\r\n\r\n    }\r\n    componentDidMount() {\r\n        /* this.setState({loader: true});        \r\n        this.setState({loader: false}); */\r\n    }\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount');\r\n    }\r\n    componentDidUpdate() {\r\n        if(this.props.settingState.users_result != undefined && Object.keys(this.props.settingState.users_result).length != 0) {\r\n            if(this.props.settingState.users_result.status == 'error') {\r\n                toast.error(this.props.settingState.users_result.message, {theme: \"colored\"});\r\n            } else {\r\n                toast.success(this.props.settingState.users_result.message, {theme: \"colored\"});\r\n                if(this.props.settingState.users_result.bulkDelete != undefined && this.props.settingState.users_result.bulkDelete == 1) {\r\n                    this.setState({userIds: []});\r\n                }\r\n                this.props.getUsers(this.state);\r\n                this.setState({modalIsOpen: false});\r\n                this.props.resetUsersResult();\r\n            }\r\n        }\r\n    }\r\n    handleSearch() {\r\n        if(timer) {\r\n            clearTimeout(timer);\r\n        }\r\n        timer = setTimeout(() => {\r\n            this.setState({loader: true});\r\n            this.props.getUsers(this.state);\r\n            this.setState({loader: false});\r\n        }, 800);\r\n    }\r\n    handlePagination = (data) => {\r\n        let selected = data.selected;\r\n        this.setState({currentPage: selected});\r\n        console.log(selected);\r\n        let count = Math.ceil(this.props.settingState.total_users / this.state.pageRange);\r\n        setTimeout(() => {\r\n            this.props.getUsers(this.state);\r\n        }, 50);\r\n    }\r\n    handleCheck = (event) => {\r\n        let selectedUserValue = event.target.value;\r\n        let checkedValueIndex = this.state.userIds.indexOf(selectedUserValue);\r\n        if(event.target.checked) {\r\n            if(checkedValueIndex === -1) {\r\n                this.setState({userIds: this.state.userIds.concat(selectedUserValue)})\r\n            }\r\n        } else {\r\n            if(checkedValueIndex !== -1) {\r\n                this.setState({userIds: this.state.userIds.filter(item => item !== selectedUserValue)});\r\n            }\r\n        }\r\n    }\r\n    checkAll = (event) => {\r\n        var checkboxes = document.getElementsByClassName('userID');\r\n        console.log(checkboxes);\r\n        for(var i = 0; i < checkboxes.length; i++) {\r\n            if(checkboxes[i].type == \"checkbox\") {\r\n                if(event.target.checked) {\r\n                    checkboxes[i].checked = true;\r\n                    let usersID = this.state.userIds;\r\n                    if(usersID.indexOf(checkboxes[i].value) === -1) {\r\n                        usersID.push(checkboxes[i].value);\r\n                        this.setState({userIds: usersID})\r\n                    }\r\n                } else {\r\n                    checkboxes[i].checked = false;\r\n                    this.setState({userIds: []});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    enableDisableUsers = (status) => {\r\n        let msg = \"\";\r\n        if(status == 1) {\r\n            msg = 'Are you sure to enable selected users.';\r\n        } else {\r\n            msg = 'Are you sure to disable selected users.';\r\n        }\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: msg,\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.bulkStatusChangeUser(this.state)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    }\r\n    enableDisableUser = (status, id, user_name) => {\r\n        let msg = \"\";\r\n        if(status == 1) {\r\n            msg = 'Are you sure to enable user \"'+user_name+'\".';\r\n        } else {\r\n            msg = 'Are you sure to disable user \"'+user_name+'\".';\r\n        }\r\n        confirmAlert({\r\n            title: 'Confirm',\r\n            message: msg,\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.props.changeUserStatus(id, status)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => console.log('Cancelled')\r\n              }\r\n            ]\r\n        });\r\n    };\r\n    onClickUserFilter = (e, field) => {\r\n        console.log(e, field);\r\n        this.setState({ filterUserStatus: e.value });\r\n        this.handleSearch();\r\n    }\r\n    render() {\r\n        return (\r\n            <section id=\"User\">\r\n                <div></div>\r\n                <div>\r\n                    <div className=\"form-group text-right user_filter\">\r\n                        <Dropdown options={ENABLE_DISABLE_FILTER} onChange={e => this.onClickUserFilter(e, 'filterUserStatus')} value={this.state.filterUserStatus} placeholder=\"User status\" />\r\n                        <input type=\"text\" name=\"citySearch\" id=\"citySearch\" placeholder=\"Search User\" onChange={(e) => {this.setState({searchKey: e.target.value});this.handleSearch();}} value={this.state.searchKey} />\r\n                    </div>\r\n                    { this.state.userIds.length > 0 ? \r\n                    <div className=\"btn-group\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => {this.setState({enableDisableValue: 1}); this.enableDisableUsers(1)}}>Enable</button>\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={(e) => {this.setState({enableDisableValue: 2}); this.enableDisableUsers(2)}}>Disable</button>\r\n                    </div>\r\n                   : <div></div> }\r\n                    <table className=\"table table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                            <th><input type=\"checkbox\" name=\"bulkAction\" onChange={this.checkAll} /></th>\r\n                                <th>Name</th>\r\n                                <th>Email</th>\r\n                                <th>DOB</th>\r\n                                <th>User Role</th>\r\n                                <th>Status</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            { this.props.settingState.users != undefined && this.props.settingState.users.map((value, index) => {\r\n                                return (\r\n                                    <tr key={value._id}>\r\n                                        <td><input className=\"userID\" type=\"checkbox\" name=\"userIds[]\" onChange={(e) => this.handleCheck(e)} value={value._id} /></td>\r\n                                        <td>{value.name}</td>\r\n                                        <td>{value.email}</td>\r\n                                        <td>{value.dob}</td>\r\n                                        <td>{value.user_type}</td>\r\n                                        <td>\r\n                                            {(value.user_status != 1) ? <span><FontAwesomeIcon icon={faCheck} onClick={() => this.enableDisableUser(1, value._id, value.name)} /></span> : <span><FontAwesomeIcon icon={faTimes} onClick={() => this.enableDisableUser(2, value._id, value.name)}  /></span>}\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                            { this.props.settingState.users != undefined && this.props.settingState.users.length == 0 && <tr><td colSpan=\"6\" align=\"center\">No data...</td></tr> }\r\n                        </tbody>\r\n                    </table>\r\n                    <ReactPaginate\r\n                        previousLabel={'previous'}\r\n                        nextLabel={'next'}\r\n                        breakLabel={'...'}\r\n                        breakClassName={'break-me'}\r\n                        pageCount={Math.ceil(this.props.settingState.total_users / this.state.pageRange)}\r\n                        marginPagesDisplayed={2}\r\n                        pageRangeDisplayed={this.state.pageRange}\r\n                        onPageChange={this.handlePagination}\r\n                        initialPage={0}\r\n                        containerClassName={'pagination'}\r\n                        activeClassName={'active'}\r\n                    />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nlet timer;\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        settingState: state.settingState\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getUsers: (state) => {\r\n            dispatch(getUsers(state))\r\n        },\r\n        bulkStatusChangeUser: (state) => {\r\n            dispatch(bulkStatusChangeUser(state))\r\n        },\r\n        changeUserStatus: (userID, status) => {\r\n            dispatch(changeUserStatus(userID, status))\r\n        },\r\n        resetUsersResult: (state) => {\r\n            dispatch(resetUsersResult(state))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(User);",{"ruleId":"476","severity":1,"message":"477","line":3,"column":8,"nodeType":"478","messageId":"479","endLine":3,"endColumn":14},{"ruleId":"480","replacedBy":"481"},{"ruleId":"482","replacedBy":"483"},{"ruleId":"476","severity":1,"message":"484","line":22,"column":7,"nodeType":"478","messageId":"479","endLine":22,"endColumn":19},{"ruleId":"476","severity":1,"message":"485","line":1,"column":27,"nodeType":"478","messageId":"479","endLine":1,"endColumn":31},{"ruleId":"476","severity":1,"message":"486","line":2,"column":35,"nodeType":"478","messageId":"479","endLine":2,"endColumn":40},{"ruleId":"476","severity":1,"message":"487","line":2,"column":42,"nodeType":"478","messageId":"479","endLine":2,"endColumn":50},{"ruleId":"476","severity":1,"message":"488","line":2,"column":52,"nodeType":"478","messageId":"479","endLine":2,"endColumn":58},{"ruleId":"476","severity":1,"message":"489","line":37,"column":17,"nodeType":"478","messageId":"479","endLine":37,"endColumn":26},{"ruleId":"490","severity":1,"message":"491","line":46,"column":41,"nodeType":"492","messageId":"493","endLine":46,"endColumn":43},{"ruleId":"490","severity":1,"message":"491","line":48,"column":38,"nodeType":"492","messageId":"493","endLine":48,"endColumn":40},{"ruleId":"490","severity":1,"message":"491","line":50,"column":38,"nodeType":"492","messageId":"493","endLine":50,"endColumn":40},{"ruleId":"494","severity":1,"message":"495","line":54,"column":9,"nodeType":"496","messageId":"497","endLine":55,"endColumn":26},{"ruleId":"476","severity":1,"message":"498","line":5,"column":5,"nodeType":"478","messageId":"479","endLine":5,"endColumn":20},{"ruleId":"476","severity":1,"message":"499","line":6,"column":5,"nodeType":"478","messageId":"479","endLine":6,"endColumn":16},{"ruleId":"476","severity":1,"message":"500","line":1,"column":17,"nodeType":"478","messageId":"479","endLine":1,"endColumn":25},{"ruleId":"476","severity":1,"message":"501","line":2,"column":24,"nodeType":"478","messageId":"479","endLine":2,"endColumn":30},{"ruleId":"476","severity":1,"message":"502","line":3,"column":10,"nodeType":"478","messageId":"479","endLine":3,"endColumn":21},{"ruleId":"476","severity":1,"message":"503","line":3,"column":23,"nodeType":"478","messageId":"479","endLine":3,"endColumn":34},{"ruleId":"476","severity":1,"message":"504","line":4,"column":10,"nodeType":"478","messageId":"479","endLine":4,"endColumn":25},{"ruleId":"476","severity":1,"message":"499","line":4,"column":10,"nodeType":"478","messageId":"479","endLine":4,"endColumn":21},{"ruleId":"476","severity":1,"message":"505","line":7,"column":9,"nodeType":"478","messageId":"479","endLine":7,"endColumn":17},{"ruleId":"506","severity":1,"message":"507","line":11,"column":5,"nodeType":"478","endLine":11,"endColumn":14,"suggestions":"508"},{"ruleId":"490","severity":1,"message":"491","line":33,"column":38,"nodeType":"492","messageId":"493","endLine":33,"endColumn":40},{"ruleId":"490","severity":1,"message":"491","line":33,"column":60,"nodeType":"492","messageId":"493","endLine":33,"endColumn":62},{"ruleId":"490","severity":1,"message":"509","line":65,"column":38,"nodeType":"492","messageId":"493","endLine":65,"endColumn":40},{"ruleId":"490","severity":1,"message":"509","line":65,"column":53,"nodeType":"492","messageId":"493","endLine":65,"endColumn":55},{"ruleId":"476","severity":1,"message":"510","line":4,"column":24,"nodeType":"478","messageId":"479","endLine":4,"endColumn":29},{"ruleId":"476","severity":1,"message":"511","line":4,"column":31,"nodeType":"478","messageId":"479","endLine":4,"endColumn":41},{"ruleId":"476","severity":1,"message":"505","line":11,"column":9,"nodeType":"478","messageId":"479","endLine":11,"endColumn":17},{"ruleId":"490","severity":1,"message":"509","line":38,"column":30,"nodeType":"492","messageId":"493","endLine":38,"endColumn":32},{"ruleId":"490","severity":1,"message":"491","line":40,"column":41,"nodeType":"492","messageId":"493","endLine":40,"endColumn":43},{"ruleId":"506","severity":1,"message":"512","line":50,"column":7,"nodeType":"513","endLine":50,"endColumn":26,"suggestions":"514"},{"ruleId":"476","severity":1,"message":"515","line":11,"column":10,"nodeType":"478","messageId":"479","endLine":11,"endColumn":21},{"ruleId":"476","severity":1,"message":"516","line":12,"column":10,"nodeType":"478","messageId":"479","endLine":12,"endColumn":18},{"ruleId":"476","severity":1,"message":"517","line":13,"column":8,"nodeType":"478","messageId":"479","endLine":13,"endColumn":27},{"ruleId":"476","severity":1,"message":"505","line":17,"column":9,"nodeType":"478","messageId":"479","endLine":17,"endColumn":17},{"ruleId":"476","severity":1,"message":"518","line":18,"column":9,"nodeType":"478","messageId":"479","endLine":18,"endColumn":16},{"ruleId":"476","severity":1,"message":"519","line":20,"column":28,"nodeType":"478","messageId":"479","endLine":20,"endColumn":40},{"ruleId":"490","severity":1,"message":"509","line":23,"column":46,"nodeType":"492","messageId":"493","endLine":23,"endColumn":48},{"ruleId":"490","severity":1,"message":"491","line":25,"column":37,"nodeType":"492","messageId":"493","endLine":25,"endColumn":39},{"ruleId":"490","severity":1,"message":"491","line":28,"column":44,"nodeType":"492","messageId":"493","endLine":28,"endColumn":46},{"ruleId":"490","severity":1,"message":"491","line":36,"column":20,"nodeType":"492","messageId":"493","endLine":36,"endColumn":22},{"ruleId":"476","severity":1,"message":"520","line":97,"column":11,"nodeType":"478","messageId":"479","endLine":97,"endColumn":22},{"ruleId":"490","severity":1,"message":"491","line":115,"column":36,"nodeType":"492","messageId":"493","endLine":115,"endColumn":38},{"ruleId":"490","severity":1,"message":"491","line":190,"column":224,"nodeType":"492","messageId":"493","endLine":190,"endColumn":226},{"ruleId":"490","severity":1,"message":"491","line":194,"column":222,"nodeType":"492","messageId":"493","endLine":194,"endColumn":224},{"ruleId":"476","severity":1,"message":"521","line":1,"column":28,"nodeType":"478","messageId":"479","endLine":1,"endColumn":36},{"ruleId":"476","severity":1,"message":"511","line":3,"column":24,"nodeType":"478","messageId":"479","endLine":3,"endColumn":34},{"ruleId":"476","severity":1,"message":"510","line":3,"column":36,"nodeType":"478","messageId":"479","endLine":3,"endColumn":41},{"ruleId":"476","severity":1,"message":"522","line":3,"column":43,"nodeType":"478","messageId":"479","endLine":3,"endColumn":55},{"ruleId":"476","severity":1,"message":"523","line":5,"column":8,"nodeType":"478","messageId":"479","endLine":5,"endColumn":18},{"ruleId":"476","severity":1,"message":"524","line":6,"column":8,"nodeType":"478","messageId":"479","endLine":6,"endColumn":14},{"ruleId":"476","severity":1,"message":"525","line":7,"column":8,"nodeType":"478","messageId":"479","endLine":7,"endColumn":23},{"ruleId":"476","severity":1,"message":"526","line":8,"column":8,"nodeType":"478","messageId":"479","endLine":8,"endColumn":16},{"ruleId":"476","severity":1,"message":"527","line":10,"column":10,"nodeType":"478","messageId":"479","endLine":10,"endColumn":15},{"ruleId":"476","severity":1,"message":"528","line":10,"column":17,"nodeType":"478","messageId":"479","endLine":10,"endColumn":23},{"ruleId":"476","severity":1,"message":"529","line":13,"column":22,"nodeType":"478","messageId":"479","endLine":13,"endColumn":34},{"ruleId":"476","severity":1,"message":"530","line":23,"column":8,"nodeType":"478","messageId":"479","endLine":23,"endColumn":32},{"ruleId":"490","severity":1,"message":"491","line":31,"column":26,"nodeType":"492","messageId":"493","endLine":31,"endColumn":28},{"ruleId":"490","severity":1,"message":"491","line":36,"column":33,"nodeType":"492","messageId":"493","endLine":36,"endColumn":35},{"ruleId":"490","severity":1,"message":"491","line":40,"column":33,"nodeType":"492","messageId":"493","endLine":40,"endColumn":35},{"ruleId":"490","severity":1,"message":"509","line":100,"column":45,"nodeType":"492","messageId":"493","endLine":100,"endColumn":47},{"ruleId":"490","severity":1,"message":"491","line":102,"column":36,"nodeType":"492","messageId":"493","endLine":102,"endColumn":38},{"ruleId":"490","severity":1,"message":"491","line":104,"column":43,"nodeType":"492","messageId":"493","endLine":104,"endColumn":45},{"ruleId":"490","severity":1,"message":"491","line":113,"column":56,"nodeType":"492","messageId":"493","endLine":113,"endColumn":58},{"ruleId":"531","severity":1,"message":"532","line":119,"column":13,"nodeType":"478","messageId":"533","endLine":119,"endColumn":19},{"ruleId":"490","severity":1,"message":"491","line":125,"column":22,"nodeType":"492","messageId":"493","endLine":125,"endColumn":24},{"ruleId":"476","severity":1,"message":"534","line":194,"column":11,"nodeType":"478","messageId":"479","endLine":194,"endColumn":27},{"ruleId":"490","severity":1,"message":"509","line":206,"column":39,"nodeType":"492","messageId":"493","endLine":206,"endColumn":41},{"ruleId":"490","severity":1,"message":"509","line":206,"column":62,"nodeType":"492","messageId":"493","endLine":206,"endColumn":64},{"ruleId":"490","severity":1,"message":"509","line":206,"column":85,"nodeType":"492","messageId":"493","endLine":206,"endColumn":87},{"ruleId":"490","severity":1,"message":"491","line":230,"column":39,"nodeType":"492","messageId":"493","endLine":230,"endColumn":41},{"ruleId":"490","severity":1,"message":"491","line":230,"column":62,"nodeType":"492","messageId":"493","endLine":230,"endColumn":64},{"ruleId":"490","severity":1,"message":"491","line":241,"column":39,"nodeType":"492","messageId":"493","endLine":241,"endColumn":41},{"ruleId":"490","severity":1,"message":"491","line":241,"column":62,"nodeType":"492","messageId":"493","endLine":241,"endColumn":64},{"ruleId":"490","severity":1,"message":"509","line":252,"column":38,"nodeType":"492","messageId":"493","endLine":252,"endColumn":40},{"ruleId":"490","severity":1,"message":"509","line":263,"column":38,"nodeType":"492","messageId":"493","endLine":263,"endColumn":40},{"ruleId":"490","severity":1,"message":"491","line":281,"column":34,"nodeType":"492","messageId":"493","endLine":281,"endColumn":36},{"ruleId":"490","severity":1,"message":"491","line":292,"column":34,"nodeType":"492","messageId":"493","endLine":292,"endColumn":36},{"ruleId":"490","severity":1,"message":"491","line":303,"column":34,"nodeType":"492","messageId":"493","endLine":303,"endColumn":36},{"ruleId":"490","severity":1,"message":"491","line":314,"column":34,"nodeType":"492","messageId":"493","endLine":314,"endColumn":36},{"ruleId":"490","severity":1,"message":"491","line":325,"column":34,"nodeType":"492","messageId":"493","endLine":325,"endColumn":36},{"ruleId":"490","severity":1,"message":"491","line":336,"column":35,"nodeType":"492","messageId":"493","endLine":336,"endColumn":37},{"ruleId":"490","severity":1,"message":"491","line":348,"column":34,"nodeType":"492","messageId":"493","endLine":348,"endColumn":36},{"ruleId":"490","severity":1,"message":"491","line":359,"column":34,"nodeType":"492","messageId":"493","endLine":359,"endColumn":36},{"ruleId":"490","severity":1,"message":"491","line":376,"column":43,"nodeType":"492","messageId":"493","endLine":376,"endColumn":45},{"ruleId":"490","severity":1,"message":"491","line":376,"column":66,"nodeType":"492","messageId":"493","endLine":376,"endColumn":68},{"ruleId":"490","severity":1,"message":"491","line":387,"column":43,"nodeType":"492","messageId":"493","endLine":387,"endColumn":45},{"ruleId":"490","severity":1,"message":"491","line":387,"column":66,"nodeType":"492","messageId":"493","endLine":387,"endColumn":68},{"ruleId":"490","severity":1,"message":"491","line":398,"column":43,"nodeType":"492","messageId":"493","endLine":398,"endColumn":45},{"ruleId":"490","severity":1,"message":"491","line":398,"column":66,"nodeType":"492","messageId":"493","endLine":398,"endColumn":68},{"ruleId":"490","severity":1,"message":"491","line":409,"column":43,"nodeType":"492","messageId":"493","endLine":409,"endColumn":45},{"ruleId":"490","severity":1,"message":"491","line":409,"column":66,"nodeType":"492","messageId":"493","endLine":409,"endColumn":68},{"ruleId":"490","severity":1,"message":"491","line":420,"column":43,"nodeType":"492","messageId":"493","endLine":420,"endColumn":45},{"ruleId":"490","severity":1,"message":"491","line":420,"column":66,"nodeType":"492","messageId":"493","endLine":420,"endColumn":68},{"ruleId":"490","severity":1,"message":"491","line":445,"column":31,"nodeType":"492","messageId":"493","endLine":445,"endColumn":33},{"ruleId":"490","severity":1,"message":"491","line":459,"column":65,"nodeType":"492","messageId":"493","endLine":459,"endColumn":67},{"ruleId":"490","severity":1,"message":"491","line":459,"column":94,"nodeType":"492","messageId":"493","endLine":459,"endColumn":96},{"ruleId":"476","severity":1,"message":"535","line":1,"column":17,"nodeType":"478","messageId":"479","endLine":1,"endColumn":26},{"ruleId":"476","severity":1,"message":"521","line":1,"column":28,"nodeType":"478","messageId":"479","endLine":1,"endColumn":36},{"ruleId":"536","severity":1,"message":"537","line":7,"column":45,"nodeType":"538","messageId":"539","endLine":7,"endColumn":67,"fix":"540"},{"ruleId":"536","severity":1,"message":"541","line":7,"column":69,"nodeType":"538","messageId":"539","endLine":7,"endColumn":87,"fix":"542"},{"ruleId":"490","severity":1,"message":"491","line":8,"column":51,"nodeType":"492","messageId":"493","endLine":8,"endColumn":53},{"ruleId":"490","severity":1,"message":"491","line":8,"column":102,"nodeType":"492","messageId":"493","endLine":8,"endColumn":104},{"ruleId":"490","severity":1,"message":"491","line":25,"column":283,"nodeType":"492","messageId":"493","endLine":25,"endColumn":285},{"ruleId":"490","severity":1,"message":"491","line":45,"column":279,"nodeType":"492","messageId":"493","endLine":45,"endColumn":281},{"ruleId":"536","severity":1,"message":"543","line":10,"column":45,"nodeType":"538","messageId":"539","endLine":10,"endColumn":69,"fix":"544"},{"ruleId":"536","severity":1,"message":"545","line":10,"column":71,"nodeType":"538","messageId":"539","endLine":10,"endColumn":104,"fix":"546"},{"ruleId":"536","severity":1,"message":"547","line":10,"column":106,"nodeType":"538","messageId":"539","endLine":10,"endColumn":137,"fix":"548"},{"ruleId":"536","severity":1,"message":"549","line":10,"column":139,"nodeType":"538","messageId":"539","endLine":10,"endColumn":170,"fix":"550"},{"ruleId":"536","severity":1,"message":"551","line":10,"column":172,"nodeType":"538","messageId":"539","endLine":10,"endColumn":203,"fix":"552"},{"ruleId":"536","severity":1,"message":"553","line":10,"column":205,"nodeType":"538","messageId":"539","endLine":10,"endColumn":241,"fix":"554"},{"ruleId":"536","severity":1,"message":"555","line":10,"column":243,"nodeType":"538","messageId":"539","endLine":10,"endColumn":263,"fix":"556"},{"ruleId":"490","severity":1,"message":"491","line":11,"column":53,"nodeType":"492","messageId":"493","endLine":11,"endColumn":55},{"ruleId":"490","severity":1,"message":"491","line":11,"column":119,"nodeType":"492","messageId":"493","endLine":11,"endColumn":121},{"ruleId":"490","severity":1,"message":"491","line":11,"column":183,"nodeType":"492","messageId":"493","endLine":11,"endColumn":185},{"ruleId":"490","severity":1,"message":"491","line":11,"column":247,"nodeType":"492","messageId":"493","endLine":11,"endColumn":249},{"ruleId":"490","severity":1,"message":"491","line":11,"column":311,"nodeType":"492","messageId":"493","endLine":11,"endColumn":313},{"ruleId":"490","severity":1,"message":"491","line":11,"column":380,"nodeType":"492","messageId":"493","endLine":11,"endColumn":382},{"ruleId":"490","severity":1,"message":"491","line":11,"column":433,"nodeType":"492","messageId":"493","endLine":11,"endColumn":435},{"ruleId":"557","severity":1,"message":"558","line":23,"column":350,"nodeType":"559","messageId":"560","endLine":23,"endColumn":380},{"ruleId":"490","severity":1,"message":"491","line":26,"column":50,"nodeType":"492","messageId":"493","endLine":26,"endColumn":52},{"ruleId":"490","severity":1,"message":"491","line":54,"column":50,"nodeType":"492","messageId":"493","endLine":54,"endColumn":52},{"ruleId":"490","severity":1,"message":"491","line":85,"column":50,"nodeType":"492","messageId":"493","endLine":85,"endColumn":52},{"ruleId":"476","severity":1,"message":"511","line":4,"column":10,"nodeType":"478","messageId":"479","endLine":4,"endColumn":20},{"ruleId":"536","severity":1,"message":"561","line":9,"column":45,"nodeType":"538","messageId":"539","endLine":9,"endColumn":64,"fix":"562"},{"ruleId":"536","severity":1,"message":"563","line":9,"column":66,"nodeType":"538","messageId":"539","endLine":9,"endColumn":86,"fix":"564"},{"ruleId":"536","severity":1,"message":"565","line":9,"column":88,"nodeType":"538","messageId":"539","endLine":9,"endColumn":109,"fix":"566"},{"ruleId":"536","severity":1,"message":"567","line":9,"column":111,"nodeType":"538","messageId":"539","endLine":9,"endColumn":126,"fix":"568"},{"ruleId":"536","severity":1,"message":"569","line":9,"column":128,"nodeType":"538","messageId":"539","endLine":9,"endColumn":142,"fix":"570"},{"ruleId":"536","severity":1,"message":"571","line":9,"column":144,"nodeType":"538","messageId":"539","endLine":9,"endColumn":157,"fix":"572"},{"ruleId":"536","severity":1,"message":"573","line":9,"column":159,"nodeType":"538","messageId":"539","endLine":9,"endColumn":173,"fix":"574"},{"ruleId":"536","severity":1,"message":"575","line":9,"column":175,"nodeType":"538","messageId":"539","endLine":9,"endColumn":191,"fix":"576"},{"ruleId":"536","severity":1,"message":"577","line":9,"column":193,"nodeType":"538","messageId":"539","endLine":9,"endColumn":210,"fix":"578"},{"ruleId":"490","severity":1,"message":"491","line":10,"column":48,"nodeType":"492","messageId":"493","endLine":10,"endColumn":50},{"ruleId":"490","severity":1,"message":"491","line":10,"column":101,"nodeType":"492","messageId":"493","endLine":10,"endColumn":103},{"ruleId":"490","severity":1,"message":"491","line":10,"column":155,"nodeType":"492","messageId":"493","endLine":10,"endColumn":157},{"ruleId":"490","severity":1,"message":"491","line":10,"column":203,"nodeType":"492","messageId":"493","endLine":10,"endColumn":205},{"ruleId":"490","severity":1,"message":"491","line":10,"column":250,"nodeType":"492","messageId":"493","endLine":10,"endColumn":252},{"ruleId":"490","severity":1,"message":"491","line":10,"column":296,"nodeType":"492","messageId":"493","endLine":10,"endColumn":298},{"ruleId":"490","severity":1,"message":"491","line":10,"column":343,"nodeType":"492","messageId":"493","endLine":10,"endColumn":345},{"ruleId":"490","severity":1,"message":"491","line":10,"column":392,"nodeType":"492","messageId":"493","endLine":10,"endColumn":394},{"ruleId":"490","severity":1,"message":"491","line":10,"column":442,"nodeType":"492","messageId":"493","endLine":10,"endColumn":444},{"ruleId":"490","severity":1,"message":"509","line":32,"column":54,"nodeType":"492","messageId":"493","endLine":32,"endColumn":56},{"ruleId":"490","severity":1,"message":"491","line":50,"column":54,"nodeType":"492","messageId":"493","endLine":50,"endColumn":56},{"ruleId":"476","severity":1,"message":"535","line":1,"column":17,"nodeType":"478","messageId":"479","endLine":1,"endColumn":26},{"ruleId":"536","severity":1,"message":"579","line":7,"column":45,"nodeType":"538","messageId":"539","endLine":7,"endColumn":69,"fix":"580"},{"ruleId":"536","severity":1,"message":"581","line":7,"column":71,"nodeType":"538","messageId":"539","endLine":7,"endColumn":83,"fix":"582"},{"ruleId":"536","severity":1,"message":"583","line":7,"column":85,"nodeType":"538","messageId":"539","endLine":7,"endColumn":106,"fix":"584"},{"ruleId":"536","severity":1,"message":"585","line":7,"column":108,"nodeType":"538","messageId":"539","endLine":7,"endColumn":134,"fix":"586"},{"ruleId":"490","severity":1,"message":"491","line":9,"column":53,"nodeType":"492","messageId":"493","endLine":9,"endColumn":55},{"ruleId":"490","severity":1,"message":"491","line":9,"column":98,"nodeType":"492","messageId":"493","endLine":9,"endColumn":100},{"ruleId":"490","severity":1,"message":"491","line":9,"column":152,"nodeType":"492","messageId":"493","endLine":9,"endColumn":154},{"ruleId":"490","severity":1,"message":"491","line":9,"column":211,"nodeType":"492","messageId":"493","endLine":9,"endColumn":213},{"ruleId":"557","severity":1,"message":"558","line":27,"column":239,"nodeType":"559","messageId":"560","endLine":27,"endColumn":262},{"ruleId":"476","severity":1,"message":"517","line":2,"column":8,"nodeType":"478","messageId":"479","endLine":2,"endColumn":27},{"ruleId":"536","severity":1,"message":"587","line":9,"column":45,"nodeType":"538","messageId":"539","endLine":9,"endColumn":70,"fix":"588"},{"ruleId":"536","severity":1,"message":"589","line":9,"column":72,"nodeType":"538","messageId":"539","endLine":9,"endColumn":100,"fix":"590"},{"ruleId":"536","severity":1,"message":"591","line":9,"column":102,"nodeType":"538","messageId":"539","endLine":9,"endColumn":135,"fix":"592"},{"ruleId":"536","severity":1,"message":"593","line":9,"column":137,"nodeType":"538","messageId":"539","endLine":9,"endColumn":166,"fix":"594"},{"ruleId":"536","severity":1,"message":"595","line":9,"column":168,"nodeType":"538","messageId":"539","endLine":9,"endColumn":202,"fix":"596"},{"ruleId":"536","severity":1,"message":"597","line":9,"column":204,"nodeType":"538","messageId":"539","endLine":9,"endColumn":233,"fix":"598"},{"ruleId":"490","severity":1,"message":"491","line":11,"column":54,"nodeType":"492","messageId":"493","endLine":11,"endColumn":56},{"ruleId":"490","severity":1,"message":"491","line":11,"column":115,"nodeType":"492","messageId":"493","endLine":11,"endColumn":117},{"ruleId":"490","severity":1,"message":"491","line":11,"column":181,"nodeType":"492","messageId":"493","endLine":11,"endColumn":183},{"ruleId":"490","severity":1,"message":"491","line":11,"column":243,"nodeType":"492","messageId":"493","endLine":11,"endColumn":245},{"ruleId":"490","severity":1,"message":"491","line":11,"column":310,"nodeType":"492","messageId":"493","endLine":11,"endColumn":312},{"ruleId":"490","severity":1,"message":"491","line":11,"column":372,"nodeType":"492","messageId":"493","endLine":11,"endColumn":374},{"ruleId":"476","severity":1,"message":"599","line":10,"column":11,"nodeType":"478","messageId":"479","endLine":10,"endColumn":21},{"ruleId":"536","severity":1,"message":"600","line":11,"column":45,"nodeType":"538","messageId":"539","endLine":11,"endColumn":77,"fix":"601"},{"ruleId":"536","severity":1,"message":"602","line":11,"column":79,"nodeType":"538","messageId":"539","endLine":11,"endColumn":118,"fix":"603"},{"ruleId":"536","severity":1,"message":"604","line":11,"column":120,"nodeType":"538","messageId":"539","endLine":11,"endColumn":164,"fix":"605"},{"ruleId":"536","severity":1,"message":"606","line":11,"column":166,"nodeType":"538","messageId":"539","endLine":11,"endColumn":191,"fix":"607"},{"ruleId":"536","severity":1,"message":"608","line":11,"column":193,"nodeType":"538","messageId":"539","endLine":11,"endColumn":227,"fix":"609"},{"ruleId":"490","severity":1,"message":"491","line":13,"column":61,"nodeType":"492","messageId":"493","endLine":13,"endColumn":63},{"ruleId":"490","severity":1,"message":"491","line":13,"column":133,"nodeType":"492","messageId":"493","endLine":13,"endColumn":135},{"ruleId":"490","severity":1,"message":"491","line":13,"column":210,"nodeType":"492","messageId":"493","endLine":13,"endColumn":212},{"ruleId":"490","severity":1,"message":"491","line":13,"column":268,"nodeType":"492","messageId":"493","endLine":13,"endColumn":270},{"ruleId":"490","severity":1,"message":"491","line":13,"column":335,"nodeType":"492","messageId":"493","endLine":13,"endColumn":337},{"ruleId":"490","severity":1,"message":"491","line":30,"column":50,"nodeType":"492","messageId":"493","endLine":30,"endColumn":52},{"ruleId":"490","severity":1,"message":"491","line":67,"column":319,"nodeType":"492","messageId":"493","endLine":67,"endColumn":321},{"ruleId":"476","severity":1,"message":"522","line":2,"column":29,"nodeType":"478","messageId":"479","endLine":2,"endColumn":41},{"ruleId":"610","severity":1,"message":"611","line":10,"column":57,"nodeType":"612","messageId":"613","endLine":10,"endColumn":59},{"ruleId":"490","severity":1,"message":"491","line":12,"column":32,"nodeType":"492","messageId":"493","endLine":12,"endColumn":34},{"ruleId":"476","severity":1,"message":"614","line":9,"column":5,"nodeType":"478","messageId":"479","endLine":9,"endColumn":17},{"ruleId":"476","severity":1,"message":"615","line":10,"column":5,"nodeType":"478","messageId":"479","endLine":10,"endColumn":18},{"ruleId":"476","severity":1,"message":"616","line":11,"column":5,"nodeType":"478","messageId":"479","endLine":11,"endColumn":28},{"ruleId":"476","severity":1,"message":"515","line":2,"column":10,"nodeType":"478","messageId":"479","endLine":2,"endColumn":21},{"ruleId":"476","severity":1,"message":"617","line":2,"column":38,"nodeType":"478","messageId":"479","endLine":2,"endColumn":50},{"ruleId":"476","severity":1,"message":"618","line":4,"column":10,"nodeType":"478","messageId":"479","endLine":4,"endColumn":23},{"ruleId":"476","severity":1,"message":"535","line":1,"column":30,"nodeType":"478","messageId":"479","endLine":1,"endColumn":39},{"ruleId":"476","severity":1,"message":"502","line":2,"column":23,"nodeType":"478","messageId":"479","endLine":2,"endColumn":34},{"ruleId":"476","severity":1,"message":"619","line":2,"column":36,"nodeType":"478","messageId":"479","endLine":2,"endColumn":43},{"ruleId":"476","severity":1,"message":"620","line":6,"column":7,"nodeType":"478","messageId":"479","endLine":6,"endColumn":22},{"ruleId":"490","severity":1,"message":"509","line":44,"column":18,"nodeType":"492","messageId":"493","endLine":44,"endColumn":20},{"ruleId":"490","severity":1,"message":"491","line":44,"column":85,"nodeType":"492","messageId":"493","endLine":44,"endColumn":87},{"ruleId":"506","severity":1,"message":"621","line":86,"column":6,"nodeType":"513","endLine":86,"endColumn":8,"suggestions":"622"},{"ruleId":"476","severity":1,"message":"623","line":87,"column":39,"nodeType":"478","messageId":"479","endLine":87,"endColumn":52},{"ruleId":"624","severity":1,"message":"625","line":91,"column":9,"nodeType":"626","endLine":94,"endColumn":11},{"ruleId":"490","severity":1,"message":"509","line":3,"column":18,"nodeType":"492","messageId":"493","endLine":3,"endColumn":20},{"ruleId":"476","severity":1,"message":"627","line":6,"column":10,"nodeType":"478","messageId":"479","endLine":6,"endColumn":21},{"ruleId":"476","severity":1,"message":"628","line":6,"column":23,"nodeType":"478","messageId":"479","endLine":6,"endColumn":33},{"ruleId":"476","severity":1,"message":"629","line":12,"column":10,"nodeType":"478","messageId":"479","endLine":12,"endColumn":28},{"ruleId":"490","severity":1,"message":"509","line":37,"column":48,"nodeType":"492","messageId":"493","endLine":37,"endColumn":50},{"ruleId":"490","severity":1,"message":"509","line":37,"column":120,"nodeType":"492","messageId":"493","endLine":37,"endColumn":122},{"ruleId":"490","severity":1,"message":"491","line":38,"column":59,"nodeType":"492","messageId":"493","endLine":38,"endColumn":61},{"ruleId":"490","severity":1,"message":"509","line":41,"column":63,"nodeType":"492","messageId":"493","endLine":41,"endColumn":65},{"ruleId":"490","severity":1,"message":"491","line":67,"column":20,"nodeType":"492","messageId":"493","endLine":67,"endColumn":22},{"ruleId":"490","severity":1,"message":"491","line":69,"column":27,"nodeType":"492","messageId":"493","endLine":69,"endColumn":29},{"ruleId":"490","severity":1,"message":"491","line":71,"column":27,"nodeType":"492","messageId":"493","endLine":71,"endColumn":29},{"ruleId":"490","severity":1,"message":"491","line":77,"column":30,"nodeType":"492","messageId":"493","endLine":77,"endColumn":32},{"ruleId":"490","severity":1,"message":"491","line":90,"column":33,"nodeType":"492","messageId":"493","endLine":90,"endColumn":35},{"ruleId":"490","severity":1,"message":"509","line":106,"column":67,"nodeType":"492","messageId":"493","endLine":106,"endColumn":69},{"ruleId":"490","severity":1,"message":"491","line":116,"column":36,"nodeType":"492","messageId":"493","endLine":116,"endColumn":38},{"ruleId":"490","severity":1,"message":"509","line":131,"column":60,"nodeType":"492","messageId":"493","endLine":131,"endColumn":62},{"ruleId":"557","severity":1,"message":"558","line":137,"column":315,"nodeType":"559","messageId":"560","endLine":137,"endColumn":345},{"ruleId":"476","severity":1,"message":"630","line":17,"column":5,"nodeType":"478","messageId":"479","endLine":17,"endColumn":16},{"ruleId":"476","severity":1,"message":"631","line":3,"column":10,"nodeType":"478","messageId":"479","endLine":3,"endColumn":21},{"ruleId":"476","severity":1,"message":"632","line":3,"column":60,"nodeType":"478","messageId":"479","endLine":3,"endColumn":70},{"ruleId":"476","severity":1,"message":"633","line":4,"column":45,"nodeType":"478","messageId":"479","endLine":4,"endColumn":59},{"ruleId":"476","severity":1,"message":"634","line":4,"column":412,"nodeType":"478","messageId":"479","endLine":4,"endColumn":421},{"ruleId":"476","severity":1,"message":"635","line":4,"column":423,"nodeType":"478","messageId":"479","endLine":4,"endColumn":434},{"ruleId":"476","severity":1,"message":"636","line":4,"column":436,"nodeType":"478","messageId":"479","endLine":4,"endColumn":452},{"ruleId":"490","severity":1,"message":"491","line":16,"column":22,"nodeType":"492","messageId":"493","endLine":16,"endColumn":24},{"ruleId":"476","severity":1,"message":"637","line":1,"column":17,"nodeType":"478","messageId":"479","endLine":1,"endColumn":26},{"ruleId":"490","severity":1,"message":"509","line":49,"column":50,"nodeType":"492","messageId":"493","endLine":49,"endColumn":52},{"ruleId":"490","severity":1,"message":"509","line":49,"column":124,"nodeType":"492","messageId":"493","endLine":49,"endColumn":126},{"ruleId":"490","severity":1,"message":"491","line":50,"column":61,"nodeType":"492","messageId":"493","endLine":50,"endColumn":63},{"ruleId":"490","severity":1,"message":"509","line":54,"column":69,"nodeType":"492","messageId":"493","endLine":54,"endColumn":71},{"ruleId":"490","severity":1,"message":"491","line":54,"column":134,"nodeType":"492","messageId":"493","endLine":54,"endColumn":136},{"ruleId":"476","severity":1,"message":"638","line":77,"column":13,"nodeType":"478","messageId":"479","endLine":77,"endColumn":18},{"ruleId":"490","severity":1,"message":"491","line":86,"column":35,"nodeType":"492","messageId":"493","endLine":86,"endColumn":37},{"ruleId":"490","severity":1,"message":"491","line":152,"column":19,"nodeType":"492","messageId":"493","endLine":152,"endColumn":21},{"ruleId":"490","severity":1,"message":"491","line":175,"column":19,"nodeType":"492","messageId":"493","endLine":175,"endColumn":21},{"ruleId":"490","severity":1,"message":"491","line":199,"column":36,"nodeType":"492","messageId":"493","endLine":199,"endColumn":38},{"ruleId":"490","severity":1,"message":"509","line":248,"column":62,"nodeType":"492","messageId":"493","endLine":248,"endColumn":64},{"ruleId":"490","severity":1,"message":"491","line":253,"column":60,"nodeType":"492","messageId":"493","endLine":253,"endColumn":62},{"ruleId":"490","severity":1,"message":"509","line":258,"column":60,"nodeType":"492","messageId":"493","endLine":258,"endColumn":62},{"ruleId":"490","severity":1,"message":"509","line":263,"column":61,"nodeType":"492","messageId":"493","endLine":263,"endColumn":63},{"ruleId":"490","severity":1,"message":"509","line":49,"column":50,"nodeType":"492","messageId":"493","endLine":49,"endColumn":52},{"ruleId":"490","severity":1,"message":"509","line":49,"column":124,"nodeType":"492","messageId":"493","endLine":49,"endColumn":126},{"ruleId":"490","severity":1,"message":"491","line":50,"column":61,"nodeType":"492","messageId":"493","endLine":50,"endColumn":63},{"ruleId":"490","severity":1,"message":"509","line":54,"column":69,"nodeType":"492","messageId":"493","endLine":54,"endColumn":71},{"ruleId":"490","severity":1,"message":"491","line":54,"column":134,"nodeType":"492","messageId":"493","endLine":54,"endColumn":136},{"ruleId":"476","severity":1,"message":"638","line":77,"column":13,"nodeType":"478","messageId":"479","endLine":77,"endColumn":18},{"ruleId":"490","severity":1,"message":"491","line":86,"column":35,"nodeType":"492","messageId":"493","endLine":86,"endColumn":37},{"ruleId":"490","severity":1,"message":"491","line":151,"column":19,"nodeType":"492","messageId":"493","endLine":151,"endColumn":21},{"ruleId":"490","severity":1,"message":"491","line":174,"column":19,"nodeType":"492","messageId":"493","endLine":174,"endColumn":21},{"ruleId":"490","severity":1,"message":"491","line":198,"column":36,"nodeType":"492","messageId":"493","endLine":198,"endColumn":38},{"ruleId":"490","severity":1,"message":"509","line":247,"column":62,"nodeType":"492","messageId":"493","endLine":247,"endColumn":64},{"ruleId":"490","severity":1,"message":"491","line":252,"column":60,"nodeType":"492","messageId":"493","endLine":252,"endColumn":62},{"ruleId":"490","severity":1,"message":"509","line":257,"column":60,"nodeType":"492","messageId":"493","endLine":257,"endColumn":62},{"ruleId":"490","severity":1,"message":"509","line":262,"column":61,"nodeType":"492","messageId":"493","endLine":262,"endColumn":63},{"ruleId":"490","severity":1,"message":"509","line":49,"column":51,"nodeType":"492","messageId":"493","endLine":49,"endColumn":53},{"ruleId":"490","severity":1,"message":"509","line":49,"column":126,"nodeType":"492","messageId":"493","endLine":49,"endColumn":128},{"ruleId":"490","severity":1,"message":"491","line":50,"column":62,"nodeType":"492","messageId":"493","endLine":50,"endColumn":64},{"ruleId":"490","severity":1,"message":"509","line":54,"column":70,"nodeType":"492","messageId":"493","endLine":54,"endColumn":72},{"ruleId":"490","severity":1,"message":"491","line":54,"column":136,"nodeType":"492","messageId":"493","endLine":54,"endColumn":138},{"ruleId":"476","severity":1,"message":"638","line":77,"column":13,"nodeType":"478","messageId":"479","endLine":77,"endColumn":18},{"ruleId":"490","severity":1,"message":"491","line":86,"column":35,"nodeType":"492","messageId":"493","endLine":86,"endColumn":37},{"ruleId":"490","severity":1,"message":"491","line":151,"column":19,"nodeType":"492","messageId":"493","endLine":151,"endColumn":21},{"ruleId":"490","severity":1,"message":"491","line":174,"column":19,"nodeType":"492","messageId":"493","endLine":174,"endColumn":21},{"ruleId":"490","severity":1,"message":"491","line":198,"column":36,"nodeType":"492","messageId":"493","endLine":198,"endColumn":38},{"ruleId":"490","severity":1,"message":"509","line":247,"column":63,"nodeType":"492","messageId":"493","endLine":247,"endColumn":65},{"ruleId":"490","severity":1,"message":"491","line":252,"column":60,"nodeType":"492","messageId":"493","endLine":252,"endColumn":62},{"ruleId":"490","severity":1,"message":"509","line":257,"column":60,"nodeType":"492","messageId":"493","endLine":257,"endColumn":62},{"ruleId":"490","severity":1,"message":"509","line":262,"column":62,"nodeType":"492","messageId":"493","endLine":262,"endColumn":64},{"ruleId":"476","severity":1,"message":"639","line":10,"column":10,"nodeType":"478","messageId":"479","endLine":10,"endColumn":20},{"ruleId":"476","severity":1,"message":"640","line":10,"column":22,"nodeType":"478","messageId":"479","endLine":10,"endColumn":33},{"ruleId":"476","severity":1,"message":"641","line":11,"column":8,"nodeType":"478","messageId":"479","endLine":11,"endColumn":14},{"ruleId":"490","severity":1,"message":"509","line":49,"column":49,"nodeType":"492","messageId":"493","endLine":49,"endColumn":51},{"ruleId":"490","severity":1,"message":"509","line":49,"column":122,"nodeType":"492","messageId":"493","endLine":49,"endColumn":124},{"ruleId":"490","severity":1,"message":"491","line":50,"column":60,"nodeType":"492","messageId":"493","endLine":50,"endColumn":62},{"ruleId":"490","severity":1,"message":"509","line":54,"column":68,"nodeType":"492","messageId":"493","endLine":54,"endColumn":70},{"ruleId":"490","severity":1,"message":"491","line":54,"column":132,"nodeType":"492","messageId":"493","endLine":54,"endColumn":134},{"ruleId":"476","severity":1,"message":"638","line":77,"column":13,"nodeType":"478","messageId":"479","endLine":77,"endColumn":18},{"ruleId":"490","severity":1,"message":"491","line":99,"column":35,"nodeType":"492","messageId":"493","endLine":99,"endColumn":37},{"ruleId":"490","severity":1,"message":"491","line":117,"column":19,"nodeType":"492","messageId":"493","endLine":117,"endColumn":21},{"ruleId":"490","severity":1,"message":"491","line":139,"column":19,"nodeType":"492","messageId":"493","endLine":139,"endColumn":21},{"ruleId":"490","severity":1,"message":"509","line":191,"column":61,"nodeType":"492","messageId":"493","endLine":191,"endColumn":63},{"ruleId":"490","severity":1,"message":"509","line":200,"column":65,"nodeType":"492","messageId":"493","endLine":200,"endColumn":67},{"ruleId":"490","severity":1,"message":"509","line":205,"column":61,"nodeType":"492","messageId":"493","endLine":205,"endColumn":63},{"ruleId":"490","severity":1,"message":"491","line":205,"column":114,"nodeType":"492","messageId":"493","endLine":205,"endColumn":116},"no-unused-vars","'dotenv' is defined but never used.","Identifier","unusedVar","no-native-reassign",["642"],"no-negated-in-lhs",["643"],"'initialState' is assigned a value but never used.","'lazy' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'Switch' is defined but never used.","'assetForm' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'USER_LOGIN_FAIL' is defined but never used.","'USER_LOGOUT' is defined but never used.","'Suspense' is defined but never used.","'Router' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'SET_SITE_LOADER' is defined but never used.","'location' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setToken'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["644"],"Expected '!==' and instead saw '!='.","'Field' is defined but never used.","'FieldArray' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["645"],"'USER_LOADER' is defined but never used.","'isNumber' is defined but never used.","'FileUploadComponent' is defined but never used.","'history' is assigned a value but never used.","'signup_error' is assigned a value but never used.","'handleForms' is assigned a value but never used.","'useState' is defined but never used.","'ErrorMessage' is defined but never used.","'DatePicker' is defined but never used.","'Select' is defined but never used.","'CreatableSelect' is defined but never used.","'Dropdown' is defined but never used.","'parse' is defined but never used.","'isDate' is defined but never used.","'ASSET_LOADER' is defined but never used.","'AssetAddFormWizzardStep7' is defined but never used.","no-redeclare","'loader' is already defined.","redeclared","'validationSchema' is assigned a value but never used.","'useEffect' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['type_of_asset'] found.","Property","unnecessarilyComputedProperty",{"range":"646","text":"647"},"Unnecessarily computed property ['asset_for'] found.",{"range":"648","text":"649"},"Unnecessarily computed property ['who_can_contact'] found.",{"range":"650","text":"651"},"Unnecessarily computed property ['advance_amount_for_asset'] found.",{"range":"652","text":"653"},"Unnecessarily computed property ['monthly_rent_for_asset'] found.",{"range":"654","text":"655"},"Unnecessarily computed property ['lease_amount_for_asset'] found.",{"range":"656","text":"657"},"Unnecessarily computed property ['lease_period_for_asset'] found.",{"range":"658","text":"659"},"Unnecessarily computed property ['lease_period_for_asset_type'] found.",{"range":"660","text":"661"},"Unnecessarily computed property ['asset_price'] found.",{"range":"662","text":"663"},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","Unnecessarily computed property ['asset_name'] found.",{"range":"664","text":"665"},"Unnecessarily computed property ['door_number'] found.",{"range":"666","text":"667"},"Unnecessarily computed property ['address_hint'] found.",{"range":"668","text":"669"},"Unnecessarily computed property ['street'] found.",{"range":"670","text":"671"},"Unnecessarily computed property ['nagar'] found.",{"range":"672","text":"673"},"Unnecessarily computed property ['city'] found.",{"range":"674","text":"675"},"Unnecessarily computed property ['state'] found.",{"range":"676","text":"677"},"Unnecessarily computed property ['pincode'] found.",{"range":"678","text":"679"},"Unnecessarily computed property ['landmark'] found.",{"range":"680","text":"681"},"Unnecessarily computed property ['number_of_rooms'] found.",{"range":"682","text":"683"},"Unnecessarily computed property ['bhk'] found.",{"range":"684","text":"685"},"Unnecessarily computed property ['age_of_asset'] found.",{"range":"686","text":"687"},"Unnecessarily computed property ['age_of_asset_type'] found.",{"range":"688","text":"689"},"Unnecessarily computed property ['asset_main_image'] found.",{"range":"690","text":"691"},"Unnecessarily computed property ['asset_size_in_width'] found.",{"range":"692","text":"693"},"Unnecessarily computed property ['asset_size_in_width_type'] found.",{"range":"694","text":"695"},"Unnecessarily computed property ['asset_size_in_length'] found.",{"range":"696","text":"697"},"Unnecessarily computed property ['asset_size_in_length_type'] found.",{"range":"698","text":"699"},"Unnecessarily computed property ['asset_notes_by_owner'] found.",{"range":"700","text":"701"},"'handleNext' is assigned a value but never used.","Unnecessarily computed property ['asset_available_on_from'] found.",{"range":"702","text":"703"},"Unnecessarily computed property ['notice_period_for_vocate_asset'] found.",{"range":"704","text":"705"},"Unnecessarily computed property ['notice_period_for_vocate_asset_type'] found.",{"range":"706","text":"707"},"Unnecessarily computed property ['asset_status_now'] found.",{"range":"708","text":"709"},"Unnecessarily computed property ['show_my_asset_for_tenants'] found.",{"range":"710","text":"711"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'CITY_OPTIONS' is defined but never used.","'STATE_OPTIONS' is defined but never used.","'WHO_CAN_CONTACT_OPTIONS' is defined but never used.","'SIGNUP_ERROR' is defined but never used.","'CUSTOM_ERRORS' is defined but never used.","'connect' is defined but never used.","'thumbsContainer' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'filesData', 'props.fieldName', and 'props.setField'. Either include them or remove the dependency array. You can also do a functional update 'setFilesData(f => ...)' if you only need 'filesData' in the 'setFilesData' call.",["712"],"'acceptedFiles' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useLocation' is defined but never used.","'useHistory' is defined but never used.","'bindActionCreators' is defined but never used.","'PUSH_OPTION' is defined but never used.","'BULK_LOADER' is defined but never used.","'USERS_LIST' is defined but never used.","'USERS_LIST_API' is defined but never used.","'EDIT_USER' is defined but never used.","'DELETE_USER' is defined but never used.","'DELETE_BULK_USER' is defined but never used.","'Component' is defined but never used.","'count' is assigned a value but never used.","'faTrashAlt' is defined but never used.","'faPencilAlt' is defined but never used.","'Loader' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"713","fix":"714"},{"desc":"715","fix":"716"},[239,256],"'type_of_asset'",[263,276],"'asset_for'",[353,372],"'who_can_contact'",[379,407],"'advance_amount_for_asset'",[414,440],"'monthly_rent_for_asset'",[447,473],"'lease_amount_for_asset'",[480,506],"'lease_period_for_asset'",[513,544],"'lease_period_for_asset_type'",[551,566],"'asset_price'",[325,339],"'asset_name'",[346,361],"'door_number'",[368,384],"'address_hint'",[391,401],"'street'",[408,417],"'nagar'",[424,432],"'city'",[439,448],"'state'",[455,466],"'pincode'",[473,485],"'landmark'",[251,270],"'number_of_rooms'",[277,284],"'bhk'",[291,307],"'age_of_asset'",[314,335],"'age_of_asset_type'",[304,324],"'asset_main_image'",[331,354],"'asset_size_in_width'",[361,389],"'asset_size_in_width_type'",[396,420],"'asset_size_in_length'",[427,456],"'asset_size_in_length_type'",[463,487],"'asset_notes_by_owner'",[409,436],"'asset_available_on_from'",[443,477],"'notice_period_for_vocate_asset'",[484,523],"'notice_period_for_vocate_asset_type'",[530,550],"'asset_status_now'",[557,586],"'show_my_asset_for_tenants'",{"desc":"717","fix":"718"},"Add dependencies array: []",{"range":"719","text":"720"},"Update the dependencies array to be: [dispatch, history, login_form_result]",{"range":"721","text":"722"},"Update the dependencies array to be: [filesData, props.fieldName, props.setField]",{"range":"723","text":"724"},[458,458],", []",[1984,2003],"[dispatch, history, login_form_result]",[2273,2275],"[filesData, props.fieldName, props.setField]"]